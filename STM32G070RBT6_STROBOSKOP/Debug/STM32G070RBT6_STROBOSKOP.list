
STM32G070RBT6_STROBOSKOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800644c  0800644c  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  0800644c  0800644c  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800644c  0800644c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800644c  0800644c  0000744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006450  08006450  00007450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006454  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000060  080064b4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080064b4  000082bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f766  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002102  00000000  00000000  000177ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000198f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa9  00000000  00000000  0001a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001624b  00000000  00000000  0001b121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dfc  00000000  00000000  0003136c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7bd  00000000  00000000  00042168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  000d0968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006280 	.word	0x08006280

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	08006280 	.word	0x08006280

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cfrcmple>:
 8000410:	4684      	mov	ip, r0
 8000412:	0008      	movs	r0, r1
 8000414:	4661      	mov	r1, ip
 8000416:	e7ff      	b.n	8000418 <__aeabi_cfcmpeq>

08000418 <__aeabi_cfcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 fb6d 	bl	8000af8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cfcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_fcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 faed 	bl	8000a08 <__eqsf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_fcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fb5f 	bl	8000af8 <__lesf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_fcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_fcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fb55 	bl	8000af8 <__lesf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_fcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_fcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fafb 	bl	8000a58 <__gesf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_fcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_fcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 faf1 	bl	8000a58 <__gesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_fcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)

08000484 <__aeabi_f2uiz>:
 8000484:	219e      	movs	r1, #158	@ 0x9e
 8000486:	b510      	push	{r4, lr}
 8000488:	05c9      	lsls	r1, r1, #23
 800048a:	1c04      	adds	r4, r0, #0
 800048c:	f7ff fff0 	bl	8000470 <__aeabi_fcmpge>
 8000490:	2800      	cmp	r0, #0
 8000492:	d103      	bne.n	800049c <__aeabi_f2uiz+0x18>
 8000494:	1c20      	adds	r0, r4, #0
 8000496:	f000 fe5f 	bl	8001158 <__aeabi_f2iz>
 800049a:	bd10      	pop	{r4, pc}
 800049c:	219e      	movs	r1, #158	@ 0x9e
 800049e:	1c20      	adds	r0, r4, #0
 80004a0:	05c9      	lsls	r1, r1, #23
 80004a2:	f000 fcb5 	bl	8000e10 <__aeabi_fsub>
 80004a6:	f000 fe57 	bl	8001158 <__aeabi_f2iz>
 80004aa:	2380      	movs	r3, #128	@ 0x80
 80004ac:	061b      	lsls	r3, r3, #24
 80004ae:	469c      	mov	ip, r3
 80004b0:	4460      	add	r0, ip
 80004b2:	e7f2      	b.n	800049a <__aeabi_f2uiz+0x16>

080004b4 <__aeabi_fadd>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	46ce      	mov	lr, r9
 80004b8:	4647      	mov	r7, r8
 80004ba:	0243      	lsls	r3, r0, #9
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	024e      	lsls	r6, r1, #9
 80004c0:	0045      	lsls	r5, r0, #1
 80004c2:	0fc4      	lsrs	r4, r0, #31
 80004c4:	0048      	lsls	r0, r1, #1
 80004c6:	4691      	mov	r9, r2
 80004c8:	0e2d      	lsrs	r5, r5, #24
 80004ca:	0a72      	lsrs	r2, r6, #9
 80004cc:	0e00      	lsrs	r0, r0, #24
 80004ce:	4694      	mov	ip, r2
 80004d0:	b580      	push	{r7, lr}
 80004d2:	099b      	lsrs	r3, r3, #6
 80004d4:	0fc9      	lsrs	r1, r1, #31
 80004d6:	09b6      	lsrs	r6, r6, #6
 80004d8:	1a2a      	subs	r2, r5, r0
 80004da:	428c      	cmp	r4, r1
 80004dc:	d021      	beq.n	8000522 <__aeabi_fadd+0x6e>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	dd0d      	ble.n	80004fe <__aeabi_fadd+0x4a>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d12d      	bne.n	8000542 <__aeabi_fadd+0x8e>
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x38>
 80004ea:	e08d      	b.n	8000608 <__aeabi_fadd+0x154>
 80004ec:	1e51      	subs	r1, r2, #1
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x40>
 80004f2:	e11d      	b.n	8000730 <__aeabi_fadd+0x27c>
 80004f4:	2aff      	cmp	r2, #255	@ 0xff
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x46>
 80004f8:	e0ab      	b.n	8000652 <__aeabi_fadd+0x19e>
 80004fa:	000a      	movs	r2, r1
 80004fc:	e027      	b.n	800054e <__aeabi_fadd+0x9a>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d04d      	beq.n	800059e <__aeabi_fadd+0xea>
 8000502:	1b42      	subs	r2, r0, r5
 8000504:	2d00      	cmp	r5, #0
 8000506:	d000      	beq.n	800050a <__aeabi_fadd+0x56>
 8000508:	e0cc      	b.n	80006a4 <__aeabi_fadd+0x1f0>
 800050a:	2b00      	cmp	r3, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x5c>
 800050e:	e079      	b.n	8000604 <__aeabi_fadd+0x150>
 8000510:	1e54      	subs	r4, r2, #1
 8000512:	2a01      	cmp	r2, #1
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x64>
 8000516:	e128      	b.n	800076a <__aeabi_fadd+0x2b6>
 8000518:	2aff      	cmp	r2, #255	@ 0xff
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x6a>
 800051c:	e097      	b.n	800064e <__aeabi_fadd+0x19a>
 800051e:	0022      	movs	r2, r4
 8000520:	e0c5      	b.n	80006ae <__aeabi_fadd+0x1fa>
 8000522:	2a00      	cmp	r2, #0
 8000524:	dc00      	bgt.n	8000528 <__aeabi_fadd+0x74>
 8000526:	e096      	b.n	8000656 <__aeabi_fadd+0x1a2>
 8000528:	2800      	cmp	r0, #0
 800052a:	d04f      	beq.n	80005cc <__aeabi_fadd+0x118>
 800052c:	2dff      	cmp	r5, #255	@ 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x7e>
 8000530:	e08f      	b.n	8000652 <__aeabi_fadd+0x19e>
 8000532:	2180      	movs	r1, #128	@ 0x80
 8000534:	04c9      	lsls	r1, r1, #19
 8000536:	430e      	orrs	r6, r1
 8000538:	2a1b      	cmp	r2, #27
 800053a:	dd51      	ble.n	80005e0 <__aeabi_fadd+0x12c>
 800053c:	002a      	movs	r2, r5
 800053e:	3301      	adds	r3, #1
 8000540:	e018      	b.n	8000574 <__aeabi_fadd+0xc0>
 8000542:	2dff      	cmp	r5, #255	@ 0xff
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x94>
 8000546:	e084      	b.n	8000652 <__aeabi_fadd+0x19e>
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	04c9      	lsls	r1, r1, #19
 800054c:	430e      	orrs	r6, r1
 800054e:	2101      	movs	r1, #1
 8000550:	2a1b      	cmp	r2, #27
 8000552:	dc08      	bgt.n	8000566 <__aeabi_fadd+0xb2>
 8000554:	0031      	movs	r1, r6
 8000556:	2020      	movs	r0, #32
 8000558:	40d1      	lsrs	r1, r2
 800055a:	1a82      	subs	r2, r0, r2
 800055c:	4096      	lsls	r6, r2
 800055e:	0032      	movs	r2, r6
 8000560:	1e50      	subs	r0, r2, #1
 8000562:	4182      	sbcs	r2, r0
 8000564:	4311      	orrs	r1, r2
 8000566:	1a5b      	subs	r3, r3, r1
 8000568:	015a      	lsls	r2, r3, #5
 800056a:	d459      	bmi.n	8000620 <__aeabi_fadd+0x16c>
 800056c:	2107      	movs	r1, #7
 800056e:	002a      	movs	r2, r5
 8000570:	4019      	ands	r1, r3
 8000572:	d049      	beq.n	8000608 <__aeabi_fadd+0x154>
 8000574:	210f      	movs	r1, #15
 8000576:	4019      	ands	r1, r3
 8000578:	2904      	cmp	r1, #4
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xca>
 800057c:	3304      	adds	r3, #4
 800057e:	0159      	lsls	r1, r3, #5
 8000580:	d542      	bpl.n	8000608 <__aeabi_fadd+0x154>
 8000582:	1c50      	adds	r0, r2, #1
 8000584:	2afe      	cmp	r2, #254	@ 0xfe
 8000586:	d03a      	beq.n	80005fe <__aeabi_fadd+0x14a>
 8000588:	019b      	lsls	r3, r3, #6
 800058a:	b2c0      	uxtb	r0, r0
 800058c:	0a5b      	lsrs	r3, r3, #9
 800058e:	05c0      	lsls	r0, r0, #23
 8000590:	4318      	orrs	r0, r3
 8000592:	07e4      	lsls	r4, r4, #31
 8000594:	4320      	orrs	r0, r4
 8000596:	bcc0      	pop	{r6, r7}
 8000598:	46b9      	mov	r9, r7
 800059a:	46b0      	mov	r8, r6
 800059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059e:	20fe      	movs	r0, #254	@ 0xfe
 80005a0:	4680      	mov	r8, r0
 80005a2:	1c6f      	adds	r7, r5, #1
 80005a4:	0038      	movs	r0, r7
 80005a6:	4647      	mov	r7, r8
 80005a8:	4207      	tst	r7, r0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0xfa>
 80005ac:	e08e      	b.n	80006cc <__aeabi_fadd+0x218>
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x100>
 80005b2:	e0b4      	b.n	800071e <__aeabi_fadd+0x26a>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x106>
 80005b8:	e0db      	b.n	8000772 <__aeabi_fadd+0x2be>
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d06c      	beq.n	8000698 <__aeabi_fadd+0x1e4>
 80005be:	1b98      	subs	r0, r3, r6
 80005c0:	0145      	lsls	r5, r0, #5
 80005c2:	d400      	bmi.n	80005c6 <__aeabi_fadd+0x112>
 80005c4:	e0f7      	b.n	80007b6 <__aeabi_fadd+0x302>
 80005c6:	000c      	movs	r4, r1
 80005c8:	1af3      	subs	r3, r6, r3
 80005ca:	e03d      	b.n	8000648 <__aeabi_fadd+0x194>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d01b      	beq.n	8000608 <__aeabi_fadd+0x154>
 80005d0:	1e51      	subs	r1, r2, #1
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x124>
 80005d6:	e082      	b.n	80006de <__aeabi_fadd+0x22a>
 80005d8:	2aff      	cmp	r2, #255	@ 0xff
 80005da:	d03a      	beq.n	8000652 <__aeabi_fadd+0x19e>
 80005dc:	000a      	movs	r2, r1
 80005de:	e7ab      	b.n	8000538 <__aeabi_fadd+0x84>
 80005e0:	0031      	movs	r1, r6
 80005e2:	2020      	movs	r0, #32
 80005e4:	40d1      	lsrs	r1, r2
 80005e6:	1a82      	subs	r2, r0, r2
 80005e8:	4096      	lsls	r6, r2
 80005ea:	0032      	movs	r2, r6
 80005ec:	1e50      	subs	r0, r2, #1
 80005ee:	4182      	sbcs	r2, r0
 80005f0:	430a      	orrs	r2, r1
 80005f2:	189b      	adds	r3, r3, r2
 80005f4:	015a      	lsls	r2, r3, #5
 80005f6:	d5b9      	bpl.n	800056c <__aeabi_fadd+0xb8>
 80005f8:	1c6a      	adds	r2, r5, #1
 80005fa:	2dfe      	cmp	r5, #254	@ 0xfe
 80005fc:	d175      	bne.n	80006ea <__aeabi_fadd+0x236>
 80005fe:	20ff      	movs	r0, #255	@ 0xff
 8000600:	2300      	movs	r3, #0
 8000602:	e7c4      	b.n	800058e <__aeabi_fadd+0xda>
 8000604:	000c      	movs	r4, r1
 8000606:	0033      	movs	r3, r6
 8000608:	08db      	lsrs	r3, r3, #3
 800060a:	2aff      	cmp	r2, #255	@ 0xff
 800060c:	d146      	bne.n	800069c <__aeabi_fadd+0x1e8>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f5      	beq.n	80005fe <__aeabi_fadd+0x14a>
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	03d2      	lsls	r2, r2, #15
 8000616:	4313      	orrs	r3, r2
 8000618:	025b      	lsls	r3, r3, #9
 800061a:	20ff      	movs	r0, #255	@ 0xff
 800061c:	0a5b      	lsrs	r3, r3, #9
 800061e:	e7b6      	b.n	800058e <__aeabi_fadd+0xda>
 8000620:	019f      	lsls	r7, r3, #6
 8000622:	09bf      	lsrs	r7, r7, #6
 8000624:	0038      	movs	r0, r7
 8000626:	f000 fe45 	bl	80012b4 <__clzsi2>
 800062a:	3805      	subs	r0, #5
 800062c:	4087      	lsls	r7, r0
 800062e:	4285      	cmp	r5, r0
 8000630:	dc24      	bgt.n	800067c <__aeabi_fadd+0x1c8>
 8000632:	003b      	movs	r3, r7
 8000634:	2120      	movs	r1, #32
 8000636:	1b42      	subs	r2, r0, r5
 8000638:	3201      	adds	r2, #1
 800063a:	40d3      	lsrs	r3, r2
 800063c:	1a8a      	subs	r2, r1, r2
 800063e:	4097      	lsls	r7, r2
 8000640:	1e7a      	subs	r2, r7, #1
 8000642:	4197      	sbcs	r7, r2
 8000644:	2200      	movs	r2, #0
 8000646:	433b      	orrs	r3, r7
 8000648:	0759      	lsls	r1, r3, #29
 800064a:	d193      	bne.n	8000574 <__aeabi_fadd+0xc0>
 800064c:	e797      	b.n	800057e <__aeabi_fadd+0xca>
 800064e:	000c      	movs	r4, r1
 8000650:	0033      	movs	r3, r6
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	e7db      	b.n	800060e <__aeabi_fadd+0x15a>
 8000656:	2a00      	cmp	r2, #0
 8000658:	d014      	beq.n	8000684 <__aeabi_fadd+0x1d0>
 800065a:	1b42      	subs	r2, r0, r5
 800065c:	2d00      	cmp	r5, #0
 800065e:	d14b      	bne.n	80006f8 <__aeabi_fadd+0x244>
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d0      	beq.n	8000606 <__aeabi_fadd+0x152>
 8000664:	1e51      	subs	r1, r2, #1
 8000666:	2a01      	cmp	r2, #1
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x1b8>
 800066a:	e09e      	b.n	80007aa <__aeabi_fadd+0x2f6>
 800066c:	2aff      	cmp	r2, #255	@ 0xff
 800066e:	d0ef      	beq.n	8000650 <__aeabi_fadd+0x19c>
 8000670:	000a      	movs	r2, r1
 8000672:	2a1b      	cmp	r2, #27
 8000674:	dd5f      	ble.n	8000736 <__aeabi_fadd+0x282>
 8000676:	0002      	movs	r2, r0
 8000678:	1c73      	adds	r3, r6, #1
 800067a:	e77b      	b.n	8000574 <__aeabi_fadd+0xc0>
 800067c:	4b50      	ldr	r3, [pc, #320]	@ (80007c0 <__aeabi_fadd+0x30c>)
 800067e:	1a2a      	subs	r2, r5, r0
 8000680:	403b      	ands	r3, r7
 8000682:	e7e1      	b.n	8000648 <__aeabi_fadd+0x194>
 8000684:	21fe      	movs	r1, #254	@ 0xfe
 8000686:	1c6a      	adds	r2, r5, #1
 8000688:	4211      	tst	r1, r2
 800068a:	d13b      	bne.n	8000704 <__aeabi_fadd+0x250>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d15d      	bne.n	800074c <__aeabi_fadd+0x298>
 8000690:	2b00      	cmp	r3, #0
 8000692:	d07f      	beq.n	8000794 <__aeabi_fadd+0x2e0>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d17f      	bne.n	8000798 <__aeabi_fadd+0x2e4>
 8000698:	2200      	movs	r2, #0
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	025b      	lsls	r3, r3, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	b2d0      	uxtb	r0, r2
 80006a2:	e774      	b.n	800058e <__aeabi_fadd+0xda>
 80006a4:	28ff      	cmp	r0, #255	@ 0xff
 80006a6:	d0d2      	beq.n	800064e <__aeabi_fadd+0x19a>
 80006a8:	2480      	movs	r4, #128	@ 0x80
 80006aa:	04e4      	lsls	r4, r4, #19
 80006ac:	4323      	orrs	r3, r4
 80006ae:	2401      	movs	r4, #1
 80006b0:	2a1b      	cmp	r2, #27
 80006b2:	dc07      	bgt.n	80006c4 <__aeabi_fadd+0x210>
 80006b4:	001c      	movs	r4, r3
 80006b6:	2520      	movs	r5, #32
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	1aaa      	subs	r2, r5, r2
 80006bc:	4093      	lsls	r3, r2
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	4193      	sbcs	r3, r2
 80006c2:	431c      	orrs	r4, r3
 80006c4:	1b33      	subs	r3, r6, r4
 80006c6:	0005      	movs	r5, r0
 80006c8:	000c      	movs	r4, r1
 80006ca:	e74d      	b.n	8000568 <__aeabi_fadd+0xb4>
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017a      	lsls	r2, r7, #5
 80006d0:	d422      	bmi.n	8000718 <__aeabi_fadd+0x264>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d1a6      	bne.n	8000624 <__aeabi_fadd+0x170>
 80006d6:	2400      	movs	r4, #0
 80006d8:	2000      	movs	r0, #0
 80006da:	2300      	movs	r3, #0
 80006dc:	e757      	b.n	800058e <__aeabi_fadd+0xda>
 80006de:	199b      	adds	r3, r3, r6
 80006e0:	2501      	movs	r5, #1
 80006e2:	3201      	adds	r2, #1
 80006e4:	0159      	lsls	r1, r3, #5
 80006e6:	d400      	bmi.n	80006ea <__aeabi_fadd+0x236>
 80006e8:	e740      	b.n	800056c <__aeabi_fadd+0xb8>
 80006ea:	2101      	movs	r1, #1
 80006ec:	4835      	ldr	r0, [pc, #212]	@ (80007c4 <__aeabi_fadd+0x310>)
 80006ee:	4019      	ands	r1, r3
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	4003      	ands	r3, r0
 80006f4:	430b      	orrs	r3, r1
 80006f6:	e7a7      	b.n	8000648 <__aeabi_fadd+0x194>
 80006f8:	28ff      	cmp	r0, #255	@ 0xff
 80006fa:	d0a9      	beq.n	8000650 <__aeabi_fadd+0x19c>
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	04c9      	lsls	r1, r1, #19
 8000700:	430b      	orrs	r3, r1
 8000702:	e7b6      	b.n	8000672 <__aeabi_fadd+0x1be>
 8000704:	2aff      	cmp	r2, #255	@ 0xff
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x256>
 8000708:	e779      	b.n	80005fe <__aeabi_fadd+0x14a>
 800070a:	199b      	adds	r3, r3, r6
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	0759      	lsls	r1, r3, #29
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x260>
 8000712:	e72f      	b.n	8000574 <__aeabi_fadd+0xc0>
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	e7c1      	b.n	800069c <__aeabi_fadd+0x1e8>
 8000718:	000c      	movs	r4, r1
 800071a:	1af7      	subs	r7, r6, r3
 800071c:	e782      	b.n	8000624 <__aeabi_fadd+0x170>
 800071e:	2b00      	cmp	r3, #0
 8000720:	d12c      	bne.n	800077c <__aeabi_fadd+0x2c8>
 8000722:	2e00      	cmp	r6, #0
 8000724:	d193      	bne.n	800064e <__aeabi_fadd+0x19a>
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	2400      	movs	r4, #0
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	03db      	lsls	r3, r3, #15
 800072e:	e72e      	b.n	800058e <__aeabi_fadd+0xda>
 8000730:	2501      	movs	r5, #1
 8000732:	1b9b      	subs	r3, r3, r6
 8000734:	e718      	b.n	8000568 <__aeabi_fadd+0xb4>
 8000736:	0019      	movs	r1, r3
 8000738:	2520      	movs	r5, #32
 800073a:	40d1      	lsrs	r1, r2
 800073c:	1aaa      	subs	r2, r5, r2
 800073e:	4093      	lsls	r3, r2
 8000740:	1e5a      	subs	r2, r3, #1
 8000742:	4193      	sbcs	r3, r2
 8000744:	430b      	orrs	r3, r1
 8000746:	0005      	movs	r5, r0
 8000748:	199b      	adds	r3, r3, r6
 800074a:	e753      	b.n	80005f4 <__aeabi_fadd+0x140>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_fadd+0x29e>
 8000750:	e77e      	b.n	8000650 <__aeabi_fadd+0x19c>
 8000752:	2e00      	cmp	r6, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x2a4>
 8000756:	e77c      	b.n	8000652 <__aeabi_fadd+0x19e>
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	03d2      	lsls	r2, r2, #15
 800075c:	4591      	cmp	r9, r2
 800075e:	d302      	bcc.n	8000766 <__aeabi_fadd+0x2b2>
 8000760:	4594      	cmp	ip, r2
 8000762:	d200      	bcs.n	8000766 <__aeabi_fadd+0x2b2>
 8000764:	0033      	movs	r3, r6
 8000766:	08db      	lsrs	r3, r3, #3
 8000768:	e753      	b.n	8000612 <__aeabi_fadd+0x15e>
 800076a:	000c      	movs	r4, r1
 800076c:	1af3      	subs	r3, r6, r3
 800076e:	3501      	adds	r5, #1
 8000770:	e6fa      	b.n	8000568 <__aeabi_fadd+0xb4>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d0af      	beq.n	80006d6 <__aeabi_fadd+0x222>
 8000776:	000c      	movs	r4, r1
 8000778:	0033      	movs	r3, r6
 800077a:	e78d      	b.n	8000698 <__aeabi_fadd+0x1e4>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x2ce>
 8000780:	e767      	b.n	8000652 <__aeabi_fadd+0x19e>
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	03d2      	lsls	r2, r2, #15
 8000786:	4591      	cmp	r9, r2
 8000788:	d3ed      	bcc.n	8000766 <__aeabi_fadd+0x2b2>
 800078a:	4594      	cmp	ip, r2
 800078c:	d2eb      	bcs.n	8000766 <__aeabi_fadd+0x2b2>
 800078e:	000c      	movs	r4, r1
 8000790:	0033      	movs	r3, r6
 8000792:	e7e8      	b.n	8000766 <__aeabi_fadd+0x2b2>
 8000794:	0033      	movs	r3, r6
 8000796:	e77f      	b.n	8000698 <__aeabi_fadd+0x1e4>
 8000798:	199b      	adds	r3, r3, r6
 800079a:	2200      	movs	r2, #0
 800079c:	0159      	lsls	r1, r3, #5
 800079e:	d5b9      	bpl.n	8000714 <__aeabi_fadd+0x260>
 80007a0:	4a07      	ldr	r2, [pc, #28]	@ (80007c0 <__aeabi_fadd+0x30c>)
 80007a2:	4013      	ands	r3, r2
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	2201      	movs	r2, #1
 80007a8:	e778      	b.n	800069c <__aeabi_fadd+0x1e8>
 80007aa:	199b      	adds	r3, r3, r6
 80007ac:	3201      	adds	r2, #1
 80007ae:	3501      	adds	r5, #1
 80007b0:	0159      	lsls	r1, r3, #5
 80007b2:	d49a      	bmi.n	80006ea <__aeabi_fadd+0x236>
 80007b4:	e6da      	b.n	800056c <__aeabi_fadd+0xb8>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d08d      	beq.n	80006d6 <__aeabi_fadd+0x222>
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	e76e      	b.n	800069c <__aeabi_fadd+0x1e8>
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	fbffffff 	.word	0xfbffffff
 80007c4:	7dffffff 	.word	0x7dffffff

080007c8 <__aeabi_fdiv>:
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	464f      	mov	r7, r9
 80007cc:	4646      	mov	r6, r8
 80007ce:	46d6      	mov	lr, sl
 80007d0:	0244      	lsls	r4, r0, #9
 80007d2:	b5c0      	push	{r6, r7, lr}
 80007d4:	0047      	lsls	r7, r0, #1
 80007d6:	1c0e      	adds	r6, r1, #0
 80007d8:	0a64      	lsrs	r4, r4, #9
 80007da:	0e3f      	lsrs	r7, r7, #24
 80007dc:	0fc5      	lsrs	r5, r0, #31
 80007de:	2f00      	cmp	r7, #0
 80007e0:	d03c      	beq.n	800085c <__aeabi_fdiv+0x94>
 80007e2:	2fff      	cmp	r7, #255	@ 0xff
 80007e4:	d042      	beq.n	800086c <__aeabi_fdiv+0xa4>
 80007e6:	2300      	movs	r3, #0
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	4699      	mov	r9, r3
 80007ec:	469a      	mov	sl, r3
 80007ee:	00e4      	lsls	r4, r4, #3
 80007f0:	04d2      	lsls	r2, r2, #19
 80007f2:	4314      	orrs	r4, r2
 80007f4:	3f7f      	subs	r7, #127	@ 0x7f
 80007f6:	0273      	lsls	r3, r6, #9
 80007f8:	0a5b      	lsrs	r3, r3, #9
 80007fa:	4698      	mov	r8, r3
 80007fc:	0073      	lsls	r3, r6, #1
 80007fe:	0e1b      	lsrs	r3, r3, #24
 8000800:	0ff6      	lsrs	r6, r6, #31
 8000802:	2b00      	cmp	r3, #0
 8000804:	d01b      	beq.n	800083e <__aeabi_fdiv+0x76>
 8000806:	2bff      	cmp	r3, #255	@ 0xff
 8000808:	d013      	beq.n	8000832 <__aeabi_fdiv+0x6a>
 800080a:	4642      	mov	r2, r8
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	00d2      	lsls	r2, r2, #3
 8000810:	04c9      	lsls	r1, r1, #19
 8000812:	4311      	orrs	r1, r2
 8000814:	4688      	mov	r8, r1
 8000816:	2000      	movs	r0, #0
 8000818:	3b7f      	subs	r3, #127	@ 0x7f
 800081a:	0029      	movs	r1, r5
 800081c:	1aff      	subs	r7, r7, r3
 800081e:	464b      	mov	r3, r9
 8000820:	4071      	eors	r1, r6
 8000822:	b2c9      	uxtb	r1, r1
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d900      	bls.n	800082a <__aeabi_fdiv+0x62>
 8000828:	e0b5      	b.n	8000996 <__aeabi_fdiv+0x1ce>
 800082a:	4a74      	ldr	r2, [pc, #464]	@ (80009fc <__aeabi_fdiv+0x234>)
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	58d3      	ldr	r3, [r2, r3]
 8000830:	469f      	mov	pc, r3
 8000832:	4643      	mov	r3, r8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d13f      	bne.n	80008b8 <__aeabi_fdiv+0xf0>
 8000838:	3fff      	subs	r7, #255	@ 0xff
 800083a:	3302      	adds	r3, #2
 800083c:	e003      	b.n	8000846 <__aeabi_fdiv+0x7e>
 800083e:	4643      	mov	r3, r8
 8000840:	2b00      	cmp	r3, #0
 8000842:	d12d      	bne.n	80008a0 <__aeabi_fdiv+0xd8>
 8000844:	2301      	movs	r3, #1
 8000846:	0029      	movs	r1, r5
 8000848:	464a      	mov	r2, r9
 800084a:	4071      	eors	r1, r6
 800084c:	b2c9      	uxtb	r1, r1
 800084e:	431a      	orrs	r2, r3
 8000850:	2a0e      	cmp	r2, #14
 8000852:	d838      	bhi.n	80008c6 <__aeabi_fdiv+0xfe>
 8000854:	486a      	ldr	r0, [pc, #424]	@ (8000a00 <__aeabi_fdiv+0x238>)
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	5882      	ldr	r2, [r0, r2]
 800085a:	4697      	mov	pc, r2
 800085c:	2c00      	cmp	r4, #0
 800085e:	d113      	bne.n	8000888 <__aeabi_fdiv+0xc0>
 8000860:	2304      	movs	r3, #4
 8000862:	4699      	mov	r9, r3
 8000864:	3b03      	subs	r3, #3
 8000866:	2700      	movs	r7, #0
 8000868:	469a      	mov	sl, r3
 800086a:	e7c4      	b.n	80007f6 <__aeabi_fdiv+0x2e>
 800086c:	2c00      	cmp	r4, #0
 800086e:	d105      	bne.n	800087c <__aeabi_fdiv+0xb4>
 8000870:	2308      	movs	r3, #8
 8000872:	4699      	mov	r9, r3
 8000874:	3b06      	subs	r3, #6
 8000876:	27ff      	movs	r7, #255	@ 0xff
 8000878:	469a      	mov	sl, r3
 800087a:	e7bc      	b.n	80007f6 <__aeabi_fdiv+0x2e>
 800087c:	230c      	movs	r3, #12
 800087e:	4699      	mov	r9, r3
 8000880:	3b09      	subs	r3, #9
 8000882:	27ff      	movs	r7, #255	@ 0xff
 8000884:	469a      	mov	sl, r3
 8000886:	e7b6      	b.n	80007f6 <__aeabi_fdiv+0x2e>
 8000888:	0020      	movs	r0, r4
 800088a:	f000 fd13 	bl	80012b4 <__clzsi2>
 800088e:	2776      	movs	r7, #118	@ 0x76
 8000890:	1f43      	subs	r3, r0, #5
 8000892:	409c      	lsls	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	427f      	negs	r7, r7
 8000898:	4699      	mov	r9, r3
 800089a:	469a      	mov	sl, r3
 800089c:	1a3f      	subs	r7, r7, r0
 800089e:	e7aa      	b.n	80007f6 <__aeabi_fdiv+0x2e>
 80008a0:	4640      	mov	r0, r8
 80008a2:	f000 fd07 	bl	80012b4 <__clzsi2>
 80008a6:	4642      	mov	r2, r8
 80008a8:	1f43      	subs	r3, r0, #5
 80008aa:	409a      	lsls	r2, r3
 80008ac:	2376      	movs	r3, #118	@ 0x76
 80008ae:	425b      	negs	r3, r3
 80008b0:	1a1b      	subs	r3, r3, r0
 80008b2:	4690      	mov	r8, r2
 80008b4:	2000      	movs	r0, #0
 80008b6:	e7b0      	b.n	800081a <__aeabi_fdiv+0x52>
 80008b8:	2303      	movs	r3, #3
 80008ba:	464a      	mov	r2, r9
 80008bc:	431a      	orrs	r2, r3
 80008be:	4691      	mov	r9, r2
 80008c0:	2003      	movs	r0, #3
 80008c2:	33fc      	adds	r3, #252	@ 0xfc
 80008c4:	e7a9      	b.n	800081a <__aeabi_fdiv+0x52>
 80008c6:	000d      	movs	r5, r1
 80008c8:	20ff      	movs	r0, #255	@ 0xff
 80008ca:	2200      	movs	r2, #0
 80008cc:	05c0      	lsls	r0, r0, #23
 80008ce:	07ed      	lsls	r5, r5, #31
 80008d0:	4310      	orrs	r0, r2
 80008d2:	4328      	orrs	r0, r5
 80008d4:	bce0      	pop	{r5, r6, r7}
 80008d6:	46ba      	mov	sl, r7
 80008d8:	46b1      	mov	r9, r6
 80008da:	46a8      	mov	r8, r5
 80008dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008de:	000d      	movs	r5, r1
 80008e0:	2000      	movs	r0, #0
 80008e2:	2200      	movs	r2, #0
 80008e4:	e7f2      	b.n	80008cc <__aeabi_fdiv+0x104>
 80008e6:	4653      	mov	r3, sl
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d0ed      	beq.n	80008c8 <__aeabi_fdiv+0x100>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d033      	beq.n	8000958 <__aeabi_fdiv+0x190>
 80008f0:	46a0      	mov	r8, r4
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d105      	bne.n	8000902 <__aeabi_fdiv+0x13a>
 80008f6:	2000      	movs	r0, #0
 80008f8:	2200      	movs	r2, #0
 80008fa:	e7e7      	b.n	80008cc <__aeabi_fdiv+0x104>
 80008fc:	0035      	movs	r5, r6
 80008fe:	2803      	cmp	r0, #3
 8000900:	d07a      	beq.n	80009f8 <__aeabi_fdiv+0x230>
 8000902:	003b      	movs	r3, r7
 8000904:	337f      	adds	r3, #127	@ 0x7f
 8000906:	2b00      	cmp	r3, #0
 8000908:	dd2d      	ble.n	8000966 <__aeabi_fdiv+0x19e>
 800090a:	4642      	mov	r2, r8
 800090c:	0752      	lsls	r2, r2, #29
 800090e:	d007      	beq.n	8000920 <__aeabi_fdiv+0x158>
 8000910:	220f      	movs	r2, #15
 8000912:	4641      	mov	r1, r8
 8000914:	400a      	ands	r2, r1
 8000916:	2a04      	cmp	r2, #4
 8000918:	d002      	beq.n	8000920 <__aeabi_fdiv+0x158>
 800091a:	2204      	movs	r2, #4
 800091c:	4694      	mov	ip, r2
 800091e:	44e0      	add	r8, ip
 8000920:	4642      	mov	r2, r8
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	d505      	bpl.n	8000932 <__aeabi_fdiv+0x16a>
 8000926:	4642      	mov	r2, r8
 8000928:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <__aeabi_fdiv+0x23c>)
 800092a:	401a      	ands	r2, r3
 800092c:	003b      	movs	r3, r7
 800092e:	4690      	mov	r8, r2
 8000930:	3380      	adds	r3, #128	@ 0x80
 8000932:	2bfe      	cmp	r3, #254	@ 0xfe
 8000934:	dcc8      	bgt.n	80008c8 <__aeabi_fdiv+0x100>
 8000936:	4642      	mov	r2, r8
 8000938:	0192      	lsls	r2, r2, #6
 800093a:	0a52      	lsrs	r2, r2, #9
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	e7c5      	b.n	80008cc <__aeabi_fdiv+0x104>
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	2500      	movs	r5, #0
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	03d2      	lsls	r2, r2, #15
 8000948:	e7c0      	b.n	80008cc <__aeabi_fdiv+0x104>
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	03d2      	lsls	r2, r2, #15
 800094e:	4214      	tst	r4, r2
 8000950:	d002      	beq.n	8000958 <__aeabi_fdiv+0x190>
 8000952:	4643      	mov	r3, r8
 8000954:	4213      	tst	r3, r2
 8000956:	d049      	beq.n	80009ec <__aeabi_fdiv+0x224>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	4322      	orrs	r2, r4
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e7b2      	b.n	80008cc <__aeabi_fdiv+0x104>
 8000966:	2201      	movs	r2, #1
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dcc3      	bgt.n	80008f6 <__aeabi_fdiv+0x12e>
 800096e:	4642      	mov	r2, r8
 8000970:	40da      	lsrs	r2, r3
 8000972:	4643      	mov	r3, r8
 8000974:	379e      	adds	r7, #158	@ 0x9e
 8000976:	40bb      	lsls	r3, r7
 8000978:	1e59      	subs	r1, r3, #1
 800097a:	418b      	sbcs	r3, r1
 800097c:	431a      	orrs	r2, r3
 800097e:	0753      	lsls	r3, r2, #29
 8000980:	d004      	beq.n	800098c <__aeabi_fdiv+0x1c4>
 8000982:	230f      	movs	r3, #15
 8000984:	4013      	ands	r3, r2
 8000986:	2b04      	cmp	r3, #4
 8000988:	d000      	beq.n	800098c <__aeabi_fdiv+0x1c4>
 800098a:	3204      	adds	r2, #4
 800098c:	0153      	lsls	r3, r2, #5
 800098e:	d529      	bpl.n	80009e4 <__aeabi_fdiv+0x21c>
 8000990:	2001      	movs	r0, #1
 8000992:	2200      	movs	r2, #0
 8000994:	e79a      	b.n	80008cc <__aeabi_fdiv+0x104>
 8000996:	4642      	mov	r2, r8
 8000998:	0163      	lsls	r3, r4, #5
 800099a:	0155      	lsls	r5, r2, #5
 800099c:	42ab      	cmp	r3, r5
 800099e:	d215      	bcs.n	80009cc <__aeabi_fdiv+0x204>
 80009a0:	201b      	movs	r0, #27
 80009a2:	2200      	movs	r2, #0
 80009a4:	3f01      	subs	r7, #1
 80009a6:	2601      	movs	r6, #1
 80009a8:	001c      	movs	r4, r3
 80009aa:	0052      	lsls	r2, r2, #1
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	db01      	blt.n	80009b6 <__aeabi_fdiv+0x1ee>
 80009b2:	429d      	cmp	r5, r3
 80009b4:	d801      	bhi.n	80009ba <__aeabi_fdiv+0x1f2>
 80009b6:	1b5b      	subs	r3, r3, r5
 80009b8:	4332      	orrs	r2, r6
 80009ba:	3801      	subs	r0, #1
 80009bc:	2800      	cmp	r0, #0
 80009be:	d1f3      	bne.n	80009a8 <__aeabi_fdiv+0x1e0>
 80009c0:	1e58      	subs	r0, r3, #1
 80009c2:	4183      	sbcs	r3, r0
 80009c4:	4313      	orrs	r3, r2
 80009c6:	4698      	mov	r8, r3
 80009c8:	000d      	movs	r5, r1
 80009ca:	e79a      	b.n	8000902 <__aeabi_fdiv+0x13a>
 80009cc:	201a      	movs	r0, #26
 80009ce:	2201      	movs	r2, #1
 80009d0:	1b5b      	subs	r3, r3, r5
 80009d2:	e7e8      	b.n	80009a6 <__aeabi_fdiv+0x1de>
 80009d4:	3b02      	subs	r3, #2
 80009d6:	425a      	negs	r2, r3
 80009d8:	4153      	adcs	r3, r2
 80009da:	425b      	negs	r3, r3
 80009dc:	0035      	movs	r5, r6
 80009de:	2200      	movs	r2, #0
 80009e0:	b2d8      	uxtb	r0, r3
 80009e2:	e773      	b.n	80008cc <__aeabi_fdiv+0x104>
 80009e4:	0192      	lsls	r2, r2, #6
 80009e6:	2000      	movs	r0, #0
 80009e8:	0a52      	lsrs	r2, r2, #9
 80009ea:	e76f      	b.n	80008cc <__aeabi_fdiv+0x104>
 80009ec:	431a      	orrs	r2, r3
 80009ee:	0252      	lsls	r2, r2, #9
 80009f0:	0035      	movs	r5, r6
 80009f2:	20ff      	movs	r0, #255	@ 0xff
 80009f4:	0a52      	lsrs	r2, r2, #9
 80009f6:	e769      	b.n	80008cc <__aeabi_fdiv+0x104>
 80009f8:	4644      	mov	r4, r8
 80009fa:	e7ad      	b.n	8000958 <__aeabi_fdiv+0x190>
 80009fc:	080062c0 	.word	0x080062c0
 8000a00:	08006300 	.word	0x08006300
 8000a04:	f7ffffff 	.word	0xf7ffffff

08000a08 <__eqsf2>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	0042      	lsls	r2, r0, #1
 8000a0c:	024e      	lsls	r6, r1, #9
 8000a0e:	004c      	lsls	r4, r1, #1
 8000a10:	0245      	lsls	r5, r0, #9
 8000a12:	0a6d      	lsrs	r5, r5, #9
 8000a14:	0e12      	lsrs	r2, r2, #24
 8000a16:	0fc3      	lsrs	r3, r0, #31
 8000a18:	0a76      	lsrs	r6, r6, #9
 8000a1a:	0e24      	lsrs	r4, r4, #24
 8000a1c:	0fc9      	lsrs	r1, r1, #31
 8000a1e:	2aff      	cmp	r2, #255	@ 0xff
 8000a20:	d010      	beq.n	8000a44 <__eqsf2+0x3c>
 8000a22:	2cff      	cmp	r4, #255	@ 0xff
 8000a24:	d00c      	beq.n	8000a40 <__eqsf2+0x38>
 8000a26:	2001      	movs	r0, #1
 8000a28:	42a2      	cmp	r2, r4
 8000a2a:	d10a      	bne.n	8000a42 <__eqsf2+0x3a>
 8000a2c:	42b5      	cmp	r5, r6
 8000a2e:	d108      	bne.n	8000a42 <__eqsf2+0x3a>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d00f      	beq.n	8000a54 <__eqsf2+0x4c>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d104      	bne.n	8000a42 <__eqsf2+0x3a>
 8000a38:	0028      	movs	r0, r5
 8000a3a:	1e43      	subs	r3, r0, #1
 8000a3c:	4198      	sbcs	r0, r3
 8000a3e:	e000      	b.n	8000a42 <__eqsf2+0x3a>
 8000a40:	2001      	movs	r0, #1
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	2001      	movs	r0, #1
 8000a46:	2cff      	cmp	r4, #255	@ 0xff
 8000a48:	d1fb      	bne.n	8000a42 <__eqsf2+0x3a>
 8000a4a:	4335      	orrs	r5, r6
 8000a4c:	d1f9      	bne.n	8000a42 <__eqsf2+0x3a>
 8000a4e:	404b      	eors	r3, r1
 8000a50:	0018      	movs	r0, r3
 8000a52:	e7f6      	b.n	8000a42 <__eqsf2+0x3a>
 8000a54:	2000      	movs	r0, #0
 8000a56:	e7f4      	b.n	8000a42 <__eqsf2+0x3a>

08000a58 <__gesf2>:
 8000a58:	b530      	push	{r4, r5, lr}
 8000a5a:	0042      	lsls	r2, r0, #1
 8000a5c:	0244      	lsls	r4, r0, #9
 8000a5e:	024d      	lsls	r5, r1, #9
 8000a60:	0fc3      	lsrs	r3, r0, #31
 8000a62:	0048      	lsls	r0, r1, #1
 8000a64:	0a64      	lsrs	r4, r4, #9
 8000a66:	0e12      	lsrs	r2, r2, #24
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e00      	lsrs	r0, r0, #24
 8000a6c:	0fc9      	lsrs	r1, r1, #31
 8000a6e:	2aff      	cmp	r2, #255	@ 0xff
 8000a70:	d019      	beq.n	8000aa6 <__gesf2+0x4e>
 8000a72:	28ff      	cmp	r0, #255	@ 0xff
 8000a74:	d00b      	beq.n	8000a8e <__gesf2+0x36>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d11e      	bne.n	8000ab8 <__gesf2+0x60>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d10b      	bne.n	8000a96 <__gesf2+0x3e>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d027      	beq.n	8000ad2 <__gesf2+0x7a>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d134      	bne.n	8000af0 <__gesf2+0x98>
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d02f      	beq.n	8000aea <__gesf2+0x92>
 8000a8a:	0008      	movs	r0, r1
 8000a8c:	bd30      	pop	{r4, r5, pc}
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d128      	bne.n	8000ae4 <__gesf2+0x8c>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d101      	bne.n	8000a9a <__gesf2+0x42>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d0f5      	beq.n	8000a86 <__gesf2+0x2e>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d107      	bne.n	8000aae <__gesf2+0x56>
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d023      	beq.n	8000aea <__gesf2+0x92>
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	e7f2      	b.n	8000a8c <__gesf2+0x34>
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d11c      	bne.n	8000ae4 <__gesf2+0x8c>
 8000aaa:	28ff      	cmp	r0, #255	@ 0xff
 8000aac:	d014      	beq.n	8000ad8 <__gesf2+0x80>
 8000aae:	1e58      	subs	r0, r3, #1
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	4018      	ands	r0, r3
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	e7e9      	b.n	8000a8c <__gesf2+0x34>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d0f8      	beq.n	8000aae <__gesf2+0x56>
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d1f6      	bne.n	8000aae <__gesf2+0x56>
 8000ac0:	4282      	cmp	r2, r0
 8000ac2:	dcf4      	bgt.n	8000aae <__gesf2+0x56>
 8000ac4:	dbeb      	blt.n	8000a9e <__gesf2+0x46>
 8000ac6:	42ac      	cmp	r4, r5
 8000ac8:	d8f1      	bhi.n	8000aae <__gesf2+0x56>
 8000aca:	2000      	movs	r0, #0
 8000acc:	42ac      	cmp	r4, r5
 8000ace:	d2dd      	bcs.n	8000a8c <__gesf2+0x34>
 8000ad0:	e7e5      	b.n	8000a9e <__gesf2+0x46>
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d0da      	beq.n	8000a8c <__gesf2+0x34>
 8000ad6:	e7ea      	b.n	8000aae <__gesf2+0x56>
 8000ad8:	2d00      	cmp	r5, #0
 8000ada:	d103      	bne.n	8000ae4 <__gesf2+0x8c>
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d1e6      	bne.n	8000aae <__gesf2+0x56>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	e7d3      	b.n	8000a8c <__gesf2+0x34>
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	e7d0      	b.n	8000a8c <__gesf2+0x34>
 8000aea:	2001      	movs	r0, #1
 8000aec:	4240      	negs	r0, r0
 8000aee:	e7cd      	b.n	8000a8c <__gesf2+0x34>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d0e8      	beq.n	8000ac6 <__gesf2+0x6e>
 8000af4:	e7db      	b.n	8000aae <__gesf2+0x56>
 8000af6:	46c0      	nop			@ (mov r8, r8)

08000af8 <__lesf2>:
 8000af8:	b530      	push	{r4, r5, lr}
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0244      	lsls	r4, r0, #9
 8000afe:	024d      	lsls	r5, r1, #9
 8000b00:	0fc3      	lsrs	r3, r0, #31
 8000b02:	0048      	lsls	r0, r1, #1
 8000b04:	0a64      	lsrs	r4, r4, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e00      	lsrs	r0, r0, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2aff      	cmp	r2, #255	@ 0xff
 8000b10:	d01a      	beq.n	8000b48 <__lesf2+0x50>
 8000b12:	28ff      	cmp	r0, #255	@ 0xff
 8000b14:	d00e      	beq.n	8000b34 <__lesf2+0x3c>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d11e      	bne.n	8000b58 <__lesf2+0x60>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d10e      	bne.n	8000b3c <__lesf2+0x44>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d02a      	beq.n	8000b78 <__lesf2+0x80>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d00c      	beq.n	8000b40 <__lesf2+0x48>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d01d      	beq.n	8000b66 <__lesf2+0x6e>
 8000b2a:	1e58      	subs	r0, r3, #1
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4018      	ands	r0, r3
 8000b30:	3801      	subs	r0, #1
 8000b32:	e010      	b.n	8000b56 <__lesf2+0x5e>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d10d      	bne.n	8000b54 <__lesf2+0x5c>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d120      	bne.n	8000b7e <__lesf2+0x86>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d11e      	bne.n	8000b7e <__lesf2+0x86>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	d023      	beq.n	8000b8c <__lesf2+0x94>
 8000b44:	0008      	movs	r0, r1
 8000b46:	e006      	b.n	8000b56 <__lesf2+0x5e>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d103      	bne.n	8000b54 <__lesf2+0x5c>
 8000b4c:	28ff      	cmp	r0, #255	@ 0xff
 8000b4e:	d1ec      	bne.n	8000b2a <__lesf2+0x32>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d017      	beq.n	8000b84 <__lesf2+0x8c>
 8000b54:	2002      	movs	r0, #2
 8000b56:	bd30      	pop	{r4, r5, pc}
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__lesf2+0x32>
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d1e4      	bne.n	8000b2a <__lesf2+0x32>
 8000b60:	4282      	cmp	r2, r0
 8000b62:	dce2      	bgt.n	8000b2a <__lesf2+0x32>
 8000b64:	db04      	blt.n	8000b70 <__lesf2+0x78>
 8000b66:	42ac      	cmp	r4, r5
 8000b68:	d8df      	bhi.n	8000b2a <__lesf2+0x32>
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	42ac      	cmp	r4, r5
 8000b6e:	d2f2      	bcs.n	8000b56 <__lesf2+0x5e>
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <__lesf2+0x94>
 8000b74:	0018      	movs	r0, r3
 8000b76:	e7ee      	b.n	8000b56 <__lesf2+0x5e>
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	d0ec      	beq.n	8000b56 <__lesf2+0x5e>
 8000b7c:	e7d5      	b.n	8000b2a <__lesf2+0x32>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d1d3      	bne.n	8000b2a <__lesf2+0x32>
 8000b82:	e7f5      	b.n	8000b70 <__lesf2+0x78>
 8000b84:	2000      	movs	r0, #0
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d0e5      	beq.n	8000b56 <__lesf2+0x5e>
 8000b8a:	e7ce      	b.n	8000b2a <__lesf2+0x32>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	4240      	negs	r0, r0
 8000b90:	e7e1      	b.n	8000b56 <__lesf2+0x5e>
 8000b92:	46c0      	nop			@ (mov r8, r8)

08000b94 <__aeabi_fmul>:
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	464f      	mov	r7, r9
 8000b98:	4646      	mov	r6, r8
 8000b9a:	46d6      	mov	lr, sl
 8000b9c:	0243      	lsls	r3, r0, #9
 8000b9e:	0a5b      	lsrs	r3, r3, #9
 8000ba0:	0045      	lsls	r5, r0, #1
 8000ba2:	b5c0      	push	{r6, r7, lr}
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	1c0f      	adds	r7, r1, #0
 8000ba8:	0e2d      	lsrs	r5, r5, #24
 8000baa:	0fc6      	lsrs	r6, r0, #31
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_fmul+0x1e>
 8000bb0:	e088      	b.n	8000cc4 <__aeabi_fmul+0x130>
 8000bb2:	2dff      	cmp	r5, #255	@ 0xff
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fmul+0x24>
 8000bb6:	e08d      	b.n	8000cd4 <__aeabi_fmul+0x140>
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	04d2      	lsls	r2, r2, #19
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	3d7f      	subs	r5, #127	@ 0x7f
 8000bca:	027c      	lsls	r4, r7, #9
 8000bcc:	007b      	lsls	r3, r7, #1
 8000bce:	0a64      	lsrs	r4, r4, #9
 8000bd0:	0e1b      	lsrs	r3, r3, #24
 8000bd2:	0fff      	lsrs	r7, r7, #31
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d068      	beq.n	8000caa <__aeabi_fmul+0x116>
 8000bd8:	2bff      	cmp	r3, #255	@ 0xff
 8000bda:	d021      	beq.n	8000c20 <__aeabi_fmul+0x8c>
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	00e4      	lsls	r4, r4, #3
 8000be0:	04d2      	lsls	r2, r2, #19
 8000be2:	4314      	orrs	r4, r2
 8000be4:	4642      	mov	r2, r8
 8000be6:	3b7f      	subs	r3, #127	@ 0x7f
 8000be8:	195b      	adds	r3, r3, r5
 8000bea:	2100      	movs	r1, #0
 8000bec:	1c5d      	adds	r5, r3, #1
 8000bee:	2a0a      	cmp	r2, #10
 8000bf0:	dc2e      	bgt.n	8000c50 <__aeabi_fmul+0xbc>
 8000bf2:	407e      	eors	r6, r7
 8000bf4:	4642      	mov	r2, r8
 8000bf6:	2a02      	cmp	r2, #2
 8000bf8:	dc23      	bgt.n	8000c42 <__aeabi_fmul+0xae>
 8000bfa:	3a01      	subs	r2, #1
 8000bfc:	2a01      	cmp	r2, #1
 8000bfe:	d900      	bls.n	8000c02 <__aeabi_fmul+0x6e>
 8000c00:	e0bd      	b.n	8000d7e <__aeabi_fmul+0x1ea>
 8000c02:	2902      	cmp	r1, #2
 8000c04:	d06e      	beq.n	8000ce4 <__aeabi_fmul+0x150>
 8000c06:	2901      	cmp	r1, #1
 8000c08:	d12c      	bne.n	8000c64 <__aeabi_fmul+0xd0>
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	05c0      	lsls	r0, r0, #23
 8000c10:	07f6      	lsls	r6, r6, #31
 8000c12:	4310      	orrs	r0, r2
 8000c14:	4330      	orrs	r0, r6
 8000c16:	bce0      	pop	{r5, r6, r7}
 8000c18:	46ba      	mov	sl, r7
 8000c1a:	46b1      	mov	r9, r6
 8000c1c:	46a8      	mov	r8, r5
 8000c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c20:	002b      	movs	r3, r5
 8000c22:	33ff      	adds	r3, #255	@ 0xff
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d065      	beq.n	8000cf4 <__aeabi_fmul+0x160>
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	4311      	orrs	r1, r2
 8000c2e:	0032      	movs	r2, r6
 8000c30:	3501      	adds	r5, #1
 8000c32:	4688      	mov	r8, r1
 8000c34:	407a      	eors	r2, r7
 8000c36:	35ff      	adds	r5, #255	@ 0xff
 8000c38:	290a      	cmp	r1, #10
 8000c3a:	dd00      	ble.n	8000c3e <__aeabi_fmul+0xaa>
 8000c3c:	e0d8      	b.n	8000df0 <__aeabi_fmul+0x25c>
 8000c3e:	0016      	movs	r6, r2
 8000c40:	2103      	movs	r1, #3
 8000c42:	4640      	mov	r0, r8
 8000c44:	2201      	movs	r2, #1
 8000c46:	4082      	lsls	r2, r0
 8000c48:	20a6      	movs	r0, #166	@ 0xa6
 8000c4a:	00c0      	lsls	r0, r0, #3
 8000c4c:	4202      	tst	r2, r0
 8000c4e:	d020      	beq.n	8000c92 <__aeabi_fmul+0xfe>
 8000c50:	4653      	mov	r3, sl
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d046      	beq.n	8000ce4 <__aeabi_fmul+0x150>
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0xc8>
 8000c5a:	e0bb      	b.n	8000dd4 <__aeabi_fmul+0x240>
 8000c5c:	4651      	mov	r1, sl
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2901      	cmp	r1, #1
 8000c62:	d0d2      	beq.n	8000c0a <__aeabi_fmul+0x76>
 8000c64:	002b      	movs	r3, r5
 8000c66:	337f      	adds	r3, #127	@ 0x7f
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd70      	ble.n	8000d4e <__aeabi_fmul+0x1ba>
 8000c6c:	0762      	lsls	r2, r4, #29
 8000c6e:	d004      	beq.n	8000c7a <__aeabi_fmul+0xe6>
 8000c70:	220f      	movs	r2, #15
 8000c72:	4022      	ands	r2, r4
 8000c74:	2a04      	cmp	r2, #4
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fmul+0xe6>
 8000c78:	3404      	adds	r4, #4
 8000c7a:	0122      	lsls	r2, r4, #4
 8000c7c:	d503      	bpl.n	8000c86 <__aeabi_fmul+0xf2>
 8000c7e:	4b63      	ldr	r3, [pc, #396]	@ (8000e0c <__aeabi_fmul+0x278>)
 8000c80:	401c      	ands	r4, r3
 8000c82:	002b      	movs	r3, r5
 8000c84:	3380      	adds	r3, #128	@ 0x80
 8000c86:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c88:	dc2c      	bgt.n	8000ce4 <__aeabi_fmul+0x150>
 8000c8a:	01a2      	lsls	r2, r4, #6
 8000c8c:	0a52      	lsrs	r2, r2, #9
 8000c8e:	b2d8      	uxtb	r0, r3
 8000c90:	e7bd      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000c92:	2090      	movs	r0, #144	@ 0x90
 8000c94:	0080      	lsls	r0, r0, #2
 8000c96:	4202      	tst	r2, r0
 8000c98:	d127      	bne.n	8000cea <__aeabi_fmul+0x156>
 8000c9a:	38b9      	subs	r0, #185	@ 0xb9
 8000c9c:	38ff      	subs	r0, #255	@ 0xff
 8000c9e:	4210      	tst	r0, r2
 8000ca0:	d06d      	beq.n	8000d7e <__aeabi_fmul+0x1ea>
 8000ca2:	003e      	movs	r6, r7
 8000ca4:	46a1      	mov	r9, r4
 8000ca6:	468a      	mov	sl, r1
 8000ca8:	e7d2      	b.n	8000c50 <__aeabi_fmul+0xbc>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d141      	bne.n	8000d32 <__aeabi_fmul+0x19e>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4642      	mov	r2, r8
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	002b      	movs	r3, r5
 8000cb8:	4642      	mov	r2, r8
 8000cba:	2101      	movs	r1, #1
 8000cbc:	1c5d      	adds	r5, r3, #1
 8000cbe:	2a0a      	cmp	r2, #10
 8000cc0:	dd97      	ble.n	8000bf2 <__aeabi_fmul+0x5e>
 8000cc2:	e7c5      	b.n	8000c50 <__aeabi_fmul+0xbc>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d126      	bne.n	8000d16 <__aeabi_fmul+0x182>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	4698      	mov	r8, r3
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	2500      	movs	r5, #0
 8000cd0:	469a      	mov	sl, r3
 8000cd2:	e77a      	b.n	8000bca <__aeabi_fmul+0x36>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d118      	bne.n	8000d0a <__aeabi_fmul+0x176>
 8000cd8:	2308      	movs	r3, #8
 8000cda:	4698      	mov	r8, r3
 8000cdc:	3b06      	subs	r3, #6
 8000cde:	25ff      	movs	r5, #255	@ 0xff
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	e772      	b.n	8000bca <__aeabi_fmul+0x36>
 8000ce4:	20ff      	movs	r0, #255	@ 0xff
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	e791      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000cea:	2280      	movs	r2, #128	@ 0x80
 8000cec:	2600      	movs	r6, #0
 8000cee:	20ff      	movs	r0, #255	@ 0xff
 8000cf0:	03d2      	lsls	r2, r2, #15
 8000cf2:	e78c      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000cf4:	4641      	mov	r1, r8
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	3501      	adds	r5, #1
 8000cfa:	4311      	orrs	r1, r2
 8000cfc:	4688      	mov	r8, r1
 8000cfe:	35ff      	adds	r5, #255	@ 0xff
 8000d00:	290a      	cmp	r1, #10
 8000d02:	dca5      	bgt.n	8000c50 <__aeabi_fmul+0xbc>
 8000d04:	2102      	movs	r1, #2
 8000d06:	407e      	eors	r6, r7
 8000d08:	e774      	b.n	8000bf4 <__aeabi_fmul+0x60>
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	4698      	mov	r8, r3
 8000d0e:	3b09      	subs	r3, #9
 8000d10:	25ff      	movs	r5, #255	@ 0xff
 8000d12:	469a      	mov	sl, r3
 8000d14:	e759      	b.n	8000bca <__aeabi_fmul+0x36>
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 facc 	bl	80012b4 <__clzsi2>
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	1f43      	subs	r3, r0, #5
 8000d20:	2576      	movs	r5, #118	@ 0x76
 8000d22:	409a      	lsls	r2, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	426d      	negs	r5, r5
 8000d28:	4691      	mov	r9, r2
 8000d2a:	4698      	mov	r8, r3
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	1a2d      	subs	r5, r5, r0
 8000d30:	e74b      	b.n	8000bca <__aeabi_fmul+0x36>
 8000d32:	0020      	movs	r0, r4
 8000d34:	f000 fabe 	bl	80012b4 <__clzsi2>
 8000d38:	4642      	mov	r2, r8
 8000d3a:	1f43      	subs	r3, r0, #5
 8000d3c:	409c      	lsls	r4, r3
 8000d3e:	1a2b      	subs	r3, r5, r0
 8000d40:	3b76      	subs	r3, #118	@ 0x76
 8000d42:	2100      	movs	r1, #0
 8000d44:	1c5d      	adds	r5, r3, #1
 8000d46:	2a0a      	cmp	r2, #10
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fmul+0x1b8>
 8000d4a:	e752      	b.n	8000bf2 <__aeabi_fmul+0x5e>
 8000d4c:	e780      	b.n	8000c50 <__aeabi_fmul+0xbc>
 8000d4e:	2201      	movs	r2, #1
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b1b      	cmp	r3, #27
 8000d54:	dd00      	ble.n	8000d58 <__aeabi_fmul+0x1c4>
 8000d56:	e758      	b.n	8000c0a <__aeabi_fmul+0x76>
 8000d58:	359e      	adds	r5, #158	@ 0x9e
 8000d5a:	0022      	movs	r2, r4
 8000d5c:	40ac      	lsls	r4, r5
 8000d5e:	40da      	lsrs	r2, r3
 8000d60:	1e63      	subs	r3, r4, #1
 8000d62:	419c      	sbcs	r4, r3
 8000d64:	4322      	orrs	r2, r4
 8000d66:	0753      	lsls	r3, r2, #29
 8000d68:	d004      	beq.n	8000d74 <__aeabi_fmul+0x1e0>
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fmul+0x1e0>
 8000d72:	3204      	adds	r2, #4
 8000d74:	0153      	lsls	r3, r2, #5
 8000d76:	d537      	bpl.n	8000de8 <__aeabi_fmul+0x254>
 8000d78:	2001      	movs	r0, #1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	e747      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000d7e:	0c21      	lsrs	r1, r4, #16
 8000d80:	464a      	mov	r2, r9
 8000d82:	0424      	lsls	r4, r4, #16
 8000d84:	0c24      	lsrs	r4, r4, #16
 8000d86:	0027      	movs	r7, r4
 8000d88:	0c10      	lsrs	r0, r2, #16
 8000d8a:	0412      	lsls	r2, r2, #16
 8000d8c:	0c12      	lsrs	r2, r2, #16
 8000d8e:	4344      	muls	r4, r0
 8000d90:	4357      	muls	r7, r2
 8000d92:	4348      	muls	r0, r1
 8000d94:	4351      	muls	r1, r2
 8000d96:	0c3a      	lsrs	r2, r7, #16
 8000d98:	1909      	adds	r1, r1, r4
 8000d9a:	1852      	adds	r2, r2, r1
 8000d9c:	4294      	cmp	r4, r2
 8000d9e:	d903      	bls.n	8000da8 <__aeabi_fmul+0x214>
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	0249      	lsls	r1, r1, #9
 8000da4:	468c      	mov	ip, r1
 8000da6:	4460      	add	r0, ip
 8000da8:	043f      	lsls	r7, r7, #16
 8000daa:	0411      	lsls	r1, r2, #16
 8000dac:	0c3f      	lsrs	r7, r7, #16
 8000dae:	19c9      	adds	r1, r1, r7
 8000db0:	018c      	lsls	r4, r1, #6
 8000db2:	1e67      	subs	r7, r4, #1
 8000db4:	41bc      	sbcs	r4, r7
 8000db6:	0c12      	lsrs	r2, r2, #16
 8000db8:	0e89      	lsrs	r1, r1, #26
 8000dba:	1812      	adds	r2, r2, r0
 8000dbc:	430c      	orrs	r4, r1
 8000dbe:	0192      	lsls	r2, r2, #6
 8000dc0:	4314      	orrs	r4, r2
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	d50e      	bpl.n	8000de4 <__aeabi_fmul+0x250>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	0862      	lsrs	r2, r4, #1
 8000dca:	401c      	ands	r4, r3
 8000dcc:	4314      	orrs	r4, r2
 8000dce:	e749      	b.n	8000c64 <__aeabi_fmul+0xd0>
 8000dd0:	003e      	movs	r6, r7
 8000dd2:	46a1      	mov	r9, r4
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	03d2      	lsls	r2, r2, #15
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	0252      	lsls	r2, r2, #9
 8000dde:	20ff      	movs	r0, #255	@ 0xff
 8000de0:	0a52      	lsrs	r2, r2, #9
 8000de2:	e714      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000de4:	001d      	movs	r5, r3
 8000de6:	e73d      	b.n	8000c64 <__aeabi_fmul+0xd0>
 8000de8:	0192      	lsls	r2, r2, #6
 8000dea:	2000      	movs	r0, #0
 8000dec:	0a52      	lsrs	r2, r2, #9
 8000dee:	e70e      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000df0:	290f      	cmp	r1, #15
 8000df2:	d1ed      	bne.n	8000dd0 <__aeabi_fmul+0x23c>
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	464b      	mov	r3, r9
 8000df8:	03d2      	lsls	r2, r2, #15
 8000dfa:	4213      	tst	r3, r2
 8000dfc:	d0ea      	beq.n	8000dd4 <__aeabi_fmul+0x240>
 8000dfe:	4214      	tst	r4, r2
 8000e00:	d1e8      	bne.n	8000dd4 <__aeabi_fmul+0x240>
 8000e02:	003e      	movs	r6, r7
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	4322      	orrs	r2, r4
 8000e08:	e701      	b.n	8000c0e <__aeabi_fmul+0x7a>
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	f7ffffff 	.word	0xf7ffffff

08000e10 <__aeabi_fsub>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	4647      	mov	r7, r8
 8000e14:	46ce      	mov	lr, r9
 8000e16:	024e      	lsls	r6, r1, #9
 8000e18:	0243      	lsls	r3, r0, #9
 8000e1a:	0045      	lsls	r5, r0, #1
 8000e1c:	0a72      	lsrs	r2, r6, #9
 8000e1e:	0fc4      	lsrs	r4, r0, #31
 8000e20:	0048      	lsls	r0, r1, #1
 8000e22:	b580      	push	{r7, lr}
 8000e24:	4694      	mov	ip, r2
 8000e26:	0a5f      	lsrs	r7, r3, #9
 8000e28:	0e2d      	lsrs	r5, r5, #24
 8000e2a:	099b      	lsrs	r3, r3, #6
 8000e2c:	0e00      	lsrs	r0, r0, #24
 8000e2e:	0fc9      	lsrs	r1, r1, #31
 8000e30:	09b6      	lsrs	r6, r6, #6
 8000e32:	28ff      	cmp	r0, #255	@ 0xff
 8000e34:	d024      	beq.n	8000e80 <__aeabi_fsub+0x70>
 8000e36:	2201      	movs	r2, #1
 8000e38:	4051      	eors	r1, r2
 8000e3a:	1a2a      	subs	r2, r5, r0
 8000e3c:	428c      	cmp	r4, r1
 8000e3e:	d00f      	beq.n	8000e60 <__aeabi_fsub+0x50>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x36>
 8000e44:	e16a      	b.n	800111c <__aeabi_fsub+0x30c>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d135      	bne.n	8000eb6 <__aeabi_fsub+0xa6>
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x40>
 8000e4e:	e0a2      	b.n	8000f96 <__aeabi_fsub+0x186>
 8000e50:	1e51      	subs	r1, r2, #1
 8000e52:	2a01      	cmp	r2, #1
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x48>
 8000e56:	e124      	b.n	80010a2 <__aeabi_fsub+0x292>
 8000e58:	2aff      	cmp	r2, #255	@ 0xff
 8000e5a:	d021      	beq.n	8000ea0 <__aeabi_fsub+0x90>
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	e02f      	b.n	8000ec0 <__aeabi_fsub+0xb0>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_fsub+0x56>
 8000e64:	e167      	b.n	8001136 <__aeabi_fsub+0x326>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d05e      	beq.n	8000f28 <__aeabi_fsub+0x118>
 8000e6a:	2dff      	cmp	r5, #255	@ 0xff
 8000e6c:	d018      	beq.n	8000ea0 <__aeabi_fsub+0x90>
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	04c9      	lsls	r1, r1, #19
 8000e72:	430e      	orrs	r6, r1
 8000e74:	2a1b      	cmp	r2, #27
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_fsub+0x6a>
 8000e78:	e076      	b.n	8000f68 <__aeabi_fsub+0x158>
 8000e7a:	002a      	movs	r2, r5
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	e032      	b.n	8000ee6 <__aeabi_fsub+0xd6>
 8000e80:	002a      	movs	r2, r5
 8000e82:	3aff      	subs	r2, #255	@ 0xff
 8000e84:	4691      	mov	r9, r2
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d042      	beq.n	8000f10 <__aeabi_fsub+0x100>
 8000e8a:	428c      	cmp	r4, r1
 8000e8c:	d055      	beq.n	8000f3a <__aeabi_fsub+0x12a>
 8000e8e:	464a      	mov	r2, r9
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x86>
 8000e94:	e09c      	b.n	8000fd0 <__aeabi_fsub+0x1c0>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_fsub+0x8c>
 8000e9a:	e077      	b.n	8000f8c <__aeabi_fsub+0x17c>
 8000e9c:	000c      	movs	r4, r1
 8000e9e:	0033      	movs	r3, r6
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fsub+0x98>
 8000ea6:	e06e      	b.n	8000f86 <__aeabi_fsub+0x176>
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	03d2      	lsls	r2, r2, #15
 8000eac:	4313      	orrs	r3, r2
 8000eae:	025b      	lsls	r3, r3, #9
 8000eb0:	20ff      	movs	r0, #255	@ 0xff
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	e024      	b.n	8000f00 <__aeabi_fsub+0xf0>
 8000eb6:	2dff      	cmp	r5, #255	@ 0xff
 8000eb8:	d0f2      	beq.n	8000ea0 <__aeabi_fsub+0x90>
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	04c9      	lsls	r1, r1, #19
 8000ebe:	430e      	orrs	r6, r1
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2a1b      	cmp	r2, #27
 8000ec4:	dc08      	bgt.n	8000ed8 <__aeabi_fsub+0xc8>
 8000ec6:	0031      	movs	r1, r6
 8000ec8:	2020      	movs	r0, #32
 8000eca:	40d1      	lsrs	r1, r2
 8000ecc:	1a82      	subs	r2, r0, r2
 8000ece:	4096      	lsls	r6, r2
 8000ed0:	0032      	movs	r2, r6
 8000ed2:	1e50      	subs	r0, r2, #1
 8000ed4:	4182      	sbcs	r2, r0
 8000ed6:	4311      	orrs	r1, r2
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	015a      	lsls	r2, r3, #5
 8000edc:	d460      	bmi.n	8000fa0 <__aeabi_fsub+0x190>
 8000ede:	2107      	movs	r1, #7
 8000ee0:	002a      	movs	r2, r5
 8000ee2:	4019      	ands	r1, r3
 8000ee4:	d057      	beq.n	8000f96 <__aeabi_fsub+0x186>
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	4019      	ands	r1, r3
 8000eea:	2904      	cmp	r1, #4
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fsub+0xe0>
 8000eee:	3304      	adds	r3, #4
 8000ef0:	0159      	lsls	r1, r3, #5
 8000ef2:	d550      	bpl.n	8000f96 <__aeabi_fsub+0x186>
 8000ef4:	1c50      	adds	r0, r2, #1
 8000ef6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ef8:	d045      	beq.n	8000f86 <__aeabi_fsub+0x176>
 8000efa:	019b      	lsls	r3, r3, #6
 8000efc:	b2c0      	uxtb	r0, r0
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	05c0      	lsls	r0, r0, #23
 8000f02:	4318      	orrs	r0, r3
 8000f04:	07e4      	lsls	r4, r4, #31
 8000f06:	4320      	orrs	r0, r4
 8000f08:	bcc0      	pop	{r6, r7}
 8000f0a:	46b9      	mov	r9, r7
 8000f0c:	46b0      	mov	r8, r6
 8000f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f10:	2201      	movs	r2, #1
 8000f12:	4051      	eors	r1, r2
 8000f14:	428c      	cmp	r4, r1
 8000f16:	d1ba      	bne.n	8000e8e <__aeabi_fsub+0x7e>
 8000f18:	464a      	mov	r2, r9
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d010      	beq.n	8000f40 <__aeabi_fsub+0x130>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_fsub+0x114>
 8000f22:	e098      	b.n	8001056 <__aeabi_fsub+0x246>
 8000f24:	2300      	movs	r3, #0
 8000f26:	e7bb      	b.n	8000ea0 <__aeabi_fsub+0x90>
 8000f28:	2e00      	cmp	r6, #0
 8000f2a:	d034      	beq.n	8000f96 <__aeabi_fsub+0x186>
 8000f2c:	1e51      	subs	r1, r2, #1
 8000f2e:	2a01      	cmp	r2, #1
 8000f30:	d06e      	beq.n	8001010 <__aeabi_fsub+0x200>
 8000f32:	2aff      	cmp	r2, #255	@ 0xff
 8000f34:	d0b4      	beq.n	8000ea0 <__aeabi_fsub+0x90>
 8000f36:	000a      	movs	r2, r1
 8000f38:	e79c      	b.n	8000e74 <__aeabi_fsub+0x64>
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x130>
 8000f3e:	e088      	b.n	8001052 <__aeabi_fsub+0x242>
 8000f40:	20fe      	movs	r0, #254	@ 0xfe
 8000f42:	1c6a      	adds	r2, r5, #1
 8000f44:	4210      	tst	r0, r2
 8000f46:	d000      	beq.n	8000f4a <__aeabi_fsub+0x13a>
 8000f48:	e092      	b.n	8001070 <__aeabi_fsub+0x260>
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0x140>
 8000f4e:	e0a4      	b.n	800109a <__aeabi_fsub+0x28a>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x146>
 8000f54:	e0cb      	b.n	80010ee <__aeabi_fsub+0x2de>
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d000      	beq.n	8000f5c <__aeabi_fsub+0x14c>
 8000f5a:	e0ca      	b.n	80010f2 <__aeabi_fsub+0x2e2>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	0a5b      	lsrs	r3, r3, #9
 8000f64:	b2d0      	uxtb	r0, r2
 8000f66:	e7cb      	b.n	8000f00 <__aeabi_fsub+0xf0>
 8000f68:	0031      	movs	r1, r6
 8000f6a:	2020      	movs	r0, #32
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	1a82      	subs	r2, r0, r2
 8000f70:	4096      	lsls	r6, r2
 8000f72:	0032      	movs	r2, r6
 8000f74:	1e50      	subs	r0, r2, #1
 8000f76:	4182      	sbcs	r2, r0
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	189b      	adds	r3, r3, r2
 8000f7c:	015a      	lsls	r2, r3, #5
 8000f7e:	d5ae      	bpl.n	8000ede <__aeabi_fsub+0xce>
 8000f80:	1c6a      	adds	r2, r5, #1
 8000f82:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f84:	d14a      	bne.n	800101c <__aeabi_fsub+0x20c>
 8000f86:	20ff      	movs	r0, #255	@ 0xff
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e7b9      	b.n	8000f00 <__aeabi_fsub+0xf0>
 8000f8c:	22ff      	movs	r2, #255	@ 0xff
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d14b      	bne.n	800102a <__aeabi_fsub+0x21a>
 8000f92:	000c      	movs	r4, r1
 8000f94:	0033      	movs	r3, r6
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	2aff      	cmp	r2, #255	@ 0xff
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x18e>
 8000f9c:	e781      	b.n	8000ea2 <__aeabi_fsub+0x92>
 8000f9e:	e7df      	b.n	8000f60 <__aeabi_fsub+0x150>
 8000fa0:	019f      	lsls	r7, r3, #6
 8000fa2:	09bf      	lsrs	r7, r7, #6
 8000fa4:	0038      	movs	r0, r7
 8000fa6:	f000 f985 	bl	80012b4 <__clzsi2>
 8000faa:	3805      	subs	r0, #5
 8000fac:	4087      	lsls	r7, r0
 8000fae:	4285      	cmp	r5, r0
 8000fb0:	dc21      	bgt.n	8000ff6 <__aeabi_fsub+0x1e6>
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	1b42      	subs	r2, r0, r5
 8000fb8:	3201      	adds	r2, #1
 8000fba:	40d3      	lsrs	r3, r2
 8000fbc:	1a8a      	subs	r2, r1, r2
 8000fbe:	4097      	lsls	r7, r2
 8000fc0:	1e7a      	subs	r2, r7, #1
 8000fc2:	4197      	sbcs	r7, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	433b      	orrs	r3, r7
 8000fc8:	0759      	lsls	r1, r3, #29
 8000fca:	d000      	beq.n	8000fce <__aeabi_fsub+0x1be>
 8000fcc:	e78b      	b.n	8000ee6 <__aeabi_fsub+0xd6>
 8000fce:	e78f      	b.n	8000ef0 <__aeabi_fsub+0xe0>
 8000fd0:	20fe      	movs	r0, #254	@ 0xfe
 8000fd2:	1c6a      	adds	r2, r5, #1
 8000fd4:	4210      	tst	r0, r2
 8000fd6:	d112      	bne.n	8000ffe <__aeabi_fsub+0x1ee>
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d152      	bne.n	8001082 <__aeabi_fsub+0x272>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d07c      	beq.n	80010da <__aeabi_fsub+0x2ca>
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d0bb      	beq.n	8000f5c <__aeabi_fsub+0x14c>
 8000fe4:	1b9a      	subs	r2, r3, r6
 8000fe6:	0150      	lsls	r0, r2, #5
 8000fe8:	d400      	bmi.n	8000fec <__aeabi_fsub+0x1dc>
 8000fea:	e08b      	b.n	8001104 <__aeabi_fsub+0x2f4>
 8000fec:	2401      	movs	r4, #1
 8000fee:	2200      	movs	r2, #0
 8000ff0:	1af3      	subs	r3, r6, r3
 8000ff2:	400c      	ands	r4, r1
 8000ff4:	e7e8      	b.n	8000fc8 <__aeabi_fsub+0x1b8>
 8000ff6:	4b56      	ldr	r3, [pc, #344]	@ (8001150 <__aeabi_fsub+0x340>)
 8000ff8:	1a2a      	subs	r2, r5, r0
 8000ffa:	403b      	ands	r3, r7
 8000ffc:	e7e4      	b.n	8000fc8 <__aeabi_fsub+0x1b8>
 8000ffe:	1b9f      	subs	r7, r3, r6
 8001000:	017a      	lsls	r2, r7, #5
 8001002:	d446      	bmi.n	8001092 <__aeabi_fsub+0x282>
 8001004:	2f00      	cmp	r7, #0
 8001006:	d1cd      	bne.n	8000fa4 <__aeabi_fsub+0x194>
 8001008:	2400      	movs	r4, #0
 800100a:	2000      	movs	r0, #0
 800100c:	2300      	movs	r3, #0
 800100e:	e777      	b.n	8000f00 <__aeabi_fsub+0xf0>
 8001010:	199b      	adds	r3, r3, r6
 8001012:	2501      	movs	r5, #1
 8001014:	3201      	adds	r2, #1
 8001016:	0159      	lsls	r1, r3, #5
 8001018:	d400      	bmi.n	800101c <__aeabi_fsub+0x20c>
 800101a:	e760      	b.n	8000ede <__aeabi_fsub+0xce>
 800101c:	2101      	movs	r1, #1
 800101e:	484d      	ldr	r0, [pc, #308]	@ (8001154 <__aeabi_fsub+0x344>)
 8001020:	4019      	ands	r1, r3
 8001022:	085b      	lsrs	r3, r3, #1
 8001024:	4003      	ands	r3, r0
 8001026:	430b      	orrs	r3, r1
 8001028:	e7ce      	b.n	8000fc8 <__aeabi_fsub+0x1b8>
 800102a:	1e57      	subs	r7, r2, #1
 800102c:	2a01      	cmp	r2, #1
 800102e:	d05a      	beq.n	80010e6 <__aeabi_fsub+0x2d6>
 8001030:	000c      	movs	r4, r1
 8001032:	2aff      	cmp	r2, #255	@ 0xff
 8001034:	d033      	beq.n	800109e <__aeabi_fsub+0x28e>
 8001036:	2201      	movs	r2, #1
 8001038:	2f1b      	cmp	r7, #27
 800103a:	dc07      	bgt.n	800104c <__aeabi_fsub+0x23c>
 800103c:	2120      	movs	r1, #32
 800103e:	1bc9      	subs	r1, r1, r7
 8001040:	001a      	movs	r2, r3
 8001042:	408b      	lsls	r3, r1
 8001044:	40fa      	lsrs	r2, r7
 8001046:	1e59      	subs	r1, r3, #1
 8001048:	418b      	sbcs	r3, r1
 800104a:	431a      	orrs	r2, r3
 800104c:	0005      	movs	r5, r0
 800104e:	1ab3      	subs	r3, r6, r2
 8001050:	e743      	b.n	8000eda <__aeabi_fsub+0xca>
 8001052:	2d00      	cmp	r5, #0
 8001054:	d123      	bne.n	800109e <__aeabi_fsub+0x28e>
 8001056:	22ff      	movs	r2, #255	@ 0xff
 8001058:	2b00      	cmp	r3, #0
 800105a:	d09b      	beq.n	8000f94 <__aeabi_fsub+0x184>
 800105c:	1e51      	subs	r1, r2, #1
 800105e:	2a01      	cmp	r2, #1
 8001060:	d0d6      	beq.n	8001010 <__aeabi_fsub+0x200>
 8001062:	2aff      	cmp	r2, #255	@ 0xff
 8001064:	d01b      	beq.n	800109e <__aeabi_fsub+0x28e>
 8001066:	291b      	cmp	r1, #27
 8001068:	dd2c      	ble.n	80010c4 <__aeabi_fsub+0x2b4>
 800106a:	0002      	movs	r2, r0
 800106c:	1c73      	adds	r3, r6, #1
 800106e:	e73a      	b.n	8000ee6 <__aeabi_fsub+0xd6>
 8001070:	2aff      	cmp	r2, #255	@ 0xff
 8001072:	d088      	beq.n	8000f86 <__aeabi_fsub+0x176>
 8001074:	199b      	adds	r3, r3, r6
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	0759      	lsls	r1, r3, #29
 800107a:	d000      	beq.n	800107e <__aeabi_fsub+0x26e>
 800107c:	e733      	b.n	8000ee6 <__aeabi_fsub+0xd6>
 800107e:	08db      	lsrs	r3, r3, #3
 8001080:	e76e      	b.n	8000f60 <__aeabi_fsub+0x150>
 8001082:	2b00      	cmp	r3, #0
 8001084:	d110      	bne.n	80010a8 <__aeabi_fsub+0x298>
 8001086:	2e00      	cmp	r6, #0
 8001088:	d043      	beq.n	8001112 <__aeabi_fsub+0x302>
 800108a:	2401      	movs	r4, #1
 800108c:	0033      	movs	r3, r6
 800108e:	400c      	ands	r4, r1
 8001090:	e706      	b.n	8000ea0 <__aeabi_fsub+0x90>
 8001092:	2401      	movs	r4, #1
 8001094:	1af7      	subs	r7, r6, r3
 8001096:	400c      	ands	r4, r1
 8001098:	e784      	b.n	8000fa4 <__aeabi_fsub+0x194>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d104      	bne.n	80010a8 <__aeabi_fsub+0x298>
 800109e:	0033      	movs	r3, r6
 80010a0:	e6fe      	b.n	8000ea0 <__aeabi_fsub+0x90>
 80010a2:	2501      	movs	r5, #1
 80010a4:	1b9b      	subs	r3, r3, r6
 80010a6:	e718      	b.n	8000eda <__aeabi_fsub+0xca>
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_fsub+0x29e>
 80010ac:	e6f8      	b.n	8000ea0 <__aeabi_fsub+0x90>
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	03d2      	lsls	r2, r2, #15
 80010b2:	4297      	cmp	r7, r2
 80010b4:	d304      	bcc.n	80010c0 <__aeabi_fsub+0x2b0>
 80010b6:	4594      	cmp	ip, r2
 80010b8:	d202      	bcs.n	80010c0 <__aeabi_fsub+0x2b0>
 80010ba:	2401      	movs	r4, #1
 80010bc:	0033      	movs	r3, r6
 80010be:	400c      	ands	r4, r1
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	e6f1      	b.n	8000ea8 <__aeabi_fsub+0x98>
 80010c4:	001a      	movs	r2, r3
 80010c6:	2520      	movs	r5, #32
 80010c8:	40ca      	lsrs	r2, r1
 80010ca:	1a69      	subs	r1, r5, r1
 80010cc:	408b      	lsls	r3, r1
 80010ce:	1e59      	subs	r1, r3, #1
 80010d0:	418b      	sbcs	r3, r1
 80010d2:	4313      	orrs	r3, r2
 80010d4:	0005      	movs	r5, r0
 80010d6:	199b      	adds	r3, r3, r6
 80010d8:	e750      	b.n	8000f7c <__aeabi_fsub+0x16c>
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d094      	beq.n	8001008 <__aeabi_fsub+0x1f8>
 80010de:	2401      	movs	r4, #1
 80010e0:	0033      	movs	r3, r6
 80010e2:	400c      	ands	r4, r1
 80010e4:	e73a      	b.n	8000f5c <__aeabi_fsub+0x14c>
 80010e6:	000c      	movs	r4, r1
 80010e8:	2501      	movs	r5, #1
 80010ea:	1af3      	subs	r3, r6, r3
 80010ec:	e6f5      	b.n	8000eda <__aeabi_fsub+0xca>
 80010ee:	0033      	movs	r3, r6
 80010f0:	e734      	b.n	8000f5c <__aeabi_fsub+0x14c>
 80010f2:	199b      	adds	r3, r3, r6
 80010f4:	2200      	movs	r2, #0
 80010f6:	0159      	lsls	r1, r3, #5
 80010f8:	d5c1      	bpl.n	800107e <__aeabi_fsub+0x26e>
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <__aeabi_fsub+0x340>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	2201      	movs	r2, #1
 8001102:	e72d      	b.n	8000f60 <__aeabi_fsub+0x150>
 8001104:	2a00      	cmp	r2, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x2fa>
 8001108:	e77e      	b.n	8001008 <__aeabi_fsub+0x1f8>
 800110a:	0013      	movs	r3, r2
 800110c:	2200      	movs	r2, #0
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	e726      	b.n	8000f60 <__aeabi_fsub+0x150>
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	2400      	movs	r4, #0
 8001116:	20ff      	movs	r0, #255	@ 0xff
 8001118:	03db      	lsls	r3, r3, #15
 800111a:	e6f1      	b.n	8000f00 <__aeabi_fsub+0xf0>
 800111c:	2a00      	cmp	r2, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_fsub+0x312>
 8001120:	e756      	b.n	8000fd0 <__aeabi_fsub+0x1c0>
 8001122:	1b47      	subs	r7, r0, r5
 8001124:	003a      	movs	r2, r7
 8001126:	2d00      	cmp	r5, #0
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0x31c>
 800112a:	e730      	b.n	8000f8e <__aeabi_fsub+0x17e>
 800112c:	2280      	movs	r2, #128	@ 0x80
 800112e:	04d2      	lsls	r2, r2, #19
 8001130:	000c      	movs	r4, r1
 8001132:	4313      	orrs	r3, r2
 8001134:	e77f      	b.n	8001036 <__aeabi_fsub+0x226>
 8001136:	2a00      	cmp	r2, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x32c>
 800113a:	e701      	b.n	8000f40 <__aeabi_fsub+0x130>
 800113c:	1b41      	subs	r1, r0, r5
 800113e:	2d00      	cmp	r5, #0
 8001140:	d101      	bne.n	8001146 <__aeabi_fsub+0x336>
 8001142:	000a      	movs	r2, r1
 8001144:	e788      	b.n	8001058 <__aeabi_fsub+0x248>
 8001146:	2280      	movs	r2, #128	@ 0x80
 8001148:	04d2      	lsls	r2, r2, #19
 800114a:	4313      	orrs	r3, r2
 800114c:	e78b      	b.n	8001066 <__aeabi_fsub+0x256>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	fbffffff 	.word	0xfbffffff
 8001154:	7dffffff 	.word	0x7dffffff

08001158 <__aeabi_f2iz>:
 8001158:	0241      	lsls	r1, r0, #9
 800115a:	0042      	lsls	r2, r0, #1
 800115c:	0fc3      	lsrs	r3, r0, #31
 800115e:	0a49      	lsrs	r1, r1, #9
 8001160:	2000      	movs	r0, #0
 8001162:	0e12      	lsrs	r2, r2, #24
 8001164:	2a7e      	cmp	r2, #126	@ 0x7e
 8001166:	dd03      	ble.n	8001170 <__aeabi_f2iz+0x18>
 8001168:	2a9d      	cmp	r2, #157	@ 0x9d
 800116a:	dd02      	ble.n	8001172 <__aeabi_f2iz+0x1a>
 800116c:	4a09      	ldr	r2, [pc, #36]	@ (8001194 <__aeabi_f2iz+0x3c>)
 800116e:	1898      	adds	r0, r3, r2
 8001170:	4770      	bx	lr
 8001172:	2080      	movs	r0, #128	@ 0x80
 8001174:	0400      	lsls	r0, r0, #16
 8001176:	4301      	orrs	r1, r0
 8001178:	2a95      	cmp	r2, #149	@ 0x95
 800117a:	dc07      	bgt.n	800118c <__aeabi_f2iz+0x34>
 800117c:	2096      	movs	r0, #150	@ 0x96
 800117e:	1a82      	subs	r2, r0, r2
 8001180:	40d1      	lsrs	r1, r2
 8001182:	4248      	negs	r0, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f3      	bne.n	8001170 <__aeabi_f2iz+0x18>
 8001188:	0008      	movs	r0, r1
 800118a:	e7f1      	b.n	8001170 <__aeabi_f2iz+0x18>
 800118c:	3a96      	subs	r2, #150	@ 0x96
 800118e:	4091      	lsls	r1, r2
 8001190:	e7f7      	b.n	8001182 <__aeabi_f2iz+0x2a>
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	7fffffff 	.word	0x7fffffff

08001198 <__aeabi_i2f>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	2800      	cmp	r0, #0
 800119c:	d013      	beq.n	80011c6 <__aeabi_i2f+0x2e>
 800119e:	17c3      	asrs	r3, r0, #31
 80011a0:	18c5      	adds	r5, r0, r3
 80011a2:	405d      	eors	r5, r3
 80011a4:	0fc4      	lsrs	r4, r0, #31
 80011a6:	0028      	movs	r0, r5
 80011a8:	f000 f884 	bl	80012b4 <__clzsi2>
 80011ac:	239e      	movs	r3, #158	@ 0x9e
 80011ae:	0001      	movs	r1, r0
 80011b0:	1a1b      	subs	r3, r3, r0
 80011b2:	2b96      	cmp	r3, #150	@ 0x96
 80011b4:	dc0f      	bgt.n	80011d6 <__aeabi_i2f+0x3e>
 80011b6:	2808      	cmp	r0, #8
 80011b8:	d034      	beq.n	8001224 <__aeabi_i2f+0x8c>
 80011ba:	3908      	subs	r1, #8
 80011bc:	408d      	lsls	r5, r1
 80011be:	026d      	lsls	r5, r5, #9
 80011c0:	0a6d      	lsrs	r5, r5, #9
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	e002      	b.n	80011cc <__aeabi_i2f+0x34>
 80011c6:	2400      	movs	r4, #0
 80011c8:	2000      	movs	r0, #0
 80011ca:	2500      	movs	r5, #0
 80011cc:	05c0      	lsls	r0, r0, #23
 80011ce:	4328      	orrs	r0, r5
 80011d0:	07e4      	lsls	r4, r4, #31
 80011d2:	4320      	orrs	r0, r4
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	2b99      	cmp	r3, #153	@ 0x99
 80011d8:	dc16      	bgt.n	8001208 <__aeabi_i2f+0x70>
 80011da:	1f42      	subs	r2, r0, #5
 80011dc:	2805      	cmp	r0, #5
 80011de:	d000      	beq.n	80011e2 <__aeabi_i2f+0x4a>
 80011e0:	4095      	lsls	r5, r2
 80011e2:	002a      	movs	r2, r5
 80011e4:	4811      	ldr	r0, [pc, #68]	@ (800122c <__aeabi_i2f+0x94>)
 80011e6:	4002      	ands	r2, r0
 80011e8:	076e      	lsls	r6, r5, #29
 80011ea:	d009      	beq.n	8001200 <__aeabi_i2f+0x68>
 80011ec:	260f      	movs	r6, #15
 80011ee:	4035      	ands	r5, r6
 80011f0:	2d04      	cmp	r5, #4
 80011f2:	d005      	beq.n	8001200 <__aeabi_i2f+0x68>
 80011f4:	3204      	adds	r2, #4
 80011f6:	0155      	lsls	r5, r2, #5
 80011f8:	d502      	bpl.n	8001200 <__aeabi_i2f+0x68>
 80011fa:	239f      	movs	r3, #159	@ 0x9f
 80011fc:	4002      	ands	r2, r0
 80011fe:	1a5b      	subs	r3, r3, r1
 8001200:	0192      	lsls	r2, r2, #6
 8001202:	0a55      	lsrs	r5, r2, #9
 8001204:	b2d8      	uxtb	r0, r3
 8001206:	e7e1      	b.n	80011cc <__aeabi_i2f+0x34>
 8001208:	2205      	movs	r2, #5
 800120a:	1a12      	subs	r2, r2, r0
 800120c:	0028      	movs	r0, r5
 800120e:	40d0      	lsrs	r0, r2
 8001210:	0002      	movs	r2, r0
 8001212:	0008      	movs	r0, r1
 8001214:	301b      	adds	r0, #27
 8001216:	4085      	lsls	r5, r0
 8001218:	0028      	movs	r0, r5
 800121a:	1e45      	subs	r5, r0, #1
 800121c:	41a8      	sbcs	r0, r5
 800121e:	4302      	orrs	r2, r0
 8001220:	0015      	movs	r5, r2
 8001222:	e7de      	b.n	80011e2 <__aeabi_i2f+0x4a>
 8001224:	026d      	lsls	r5, r5, #9
 8001226:	2096      	movs	r0, #150	@ 0x96
 8001228:	0a6d      	lsrs	r5, r5, #9
 800122a:	e7cf      	b.n	80011cc <__aeabi_i2f+0x34>
 800122c:	fbffffff 	.word	0xfbffffff

08001230 <__aeabi_ui2f>:
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	1e04      	subs	r4, r0, #0
 8001234:	d00e      	beq.n	8001254 <__aeabi_ui2f+0x24>
 8001236:	f000 f83d 	bl	80012b4 <__clzsi2>
 800123a:	239e      	movs	r3, #158	@ 0x9e
 800123c:	0001      	movs	r1, r0
 800123e:	1a1b      	subs	r3, r3, r0
 8001240:	2b96      	cmp	r3, #150	@ 0x96
 8001242:	dc0c      	bgt.n	800125e <__aeabi_ui2f+0x2e>
 8001244:	2808      	cmp	r0, #8
 8001246:	d02f      	beq.n	80012a8 <__aeabi_ui2f+0x78>
 8001248:	3908      	subs	r1, #8
 800124a:	408c      	lsls	r4, r1
 800124c:	0264      	lsls	r4, r4, #9
 800124e:	0a64      	lsrs	r4, r4, #9
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	e001      	b.n	8001258 <__aeabi_ui2f+0x28>
 8001254:	2000      	movs	r0, #0
 8001256:	2400      	movs	r4, #0
 8001258:	05c0      	lsls	r0, r0, #23
 800125a:	4320      	orrs	r0, r4
 800125c:	bd70      	pop	{r4, r5, r6, pc}
 800125e:	2b99      	cmp	r3, #153	@ 0x99
 8001260:	dc16      	bgt.n	8001290 <__aeabi_ui2f+0x60>
 8001262:	1f42      	subs	r2, r0, #5
 8001264:	2805      	cmp	r0, #5
 8001266:	d000      	beq.n	800126a <__aeabi_ui2f+0x3a>
 8001268:	4094      	lsls	r4, r2
 800126a:	0022      	movs	r2, r4
 800126c:	4810      	ldr	r0, [pc, #64]	@ (80012b0 <__aeabi_ui2f+0x80>)
 800126e:	4002      	ands	r2, r0
 8001270:	0765      	lsls	r5, r4, #29
 8001272:	d009      	beq.n	8001288 <__aeabi_ui2f+0x58>
 8001274:	250f      	movs	r5, #15
 8001276:	402c      	ands	r4, r5
 8001278:	2c04      	cmp	r4, #4
 800127a:	d005      	beq.n	8001288 <__aeabi_ui2f+0x58>
 800127c:	3204      	adds	r2, #4
 800127e:	0154      	lsls	r4, r2, #5
 8001280:	d502      	bpl.n	8001288 <__aeabi_ui2f+0x58>
 8001282:	239f      	movs	r3, #159	@ 0x9f
 8001284:	4002      	ands	r2, r0
 8001286:	1a5b      	subs	r3, r3, r1
 8001288:	0192      	lsls	r2, r2, #6
 800128a:	0a54      	lsrs	r4, r2, #9
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	e7e3      	b.n	8001258 <__aeabi_ui2f+0x28>
 8001290:	0002      	movs	r2, r0
 8001292:	0020      	movs	r0, r4
 8001294:	321b      	adds	r2, #27
 8001296:	4090      	lsls	r0, r2
 8001298:	0002      	movs	r2, r0
 800129a:	1e50      	subs	r0, r2, #1
 800129c:	4182      	sbcs	r2, r0
 800129e:	2005      	movs	r0, #5
 80012a0:	1a40      	subs	r0, r0, r1
 80012a2:	40c4      	lsrs	r4, r0
 80012a4:	4314      	orrs	r4, r2
 80012a6:	e7e0      	b.n	800126a <__aeabi_ui2f+0x3a>
 80012a8:	0264      	lsls	r4, r4, #9
 80012aa:	2096      	movs	r0, #150	@ 0x96
 80012ac:	0a64      	lsrs	r4, r4, #9
 80012ae:	e7d3      	b.n	8001258 <__aeabi_ui2f+0x28>
 80012b0:	fbffffff 	.word	0xfbffffff

080012b4 <__clzsi2>:
 80012b4:	211c      	movs	r1, #28
 80012b6:	2301      	movs	r3, #1
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d301      	bcc.n	80012c2 <__clzsi2+0xe>
 80012be:	0c00      	lsrs	r0, r0, #16
 80012c0:	3910      	subs	r1, #16
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d301      	bcc.n	80012cc <__clzsi2+0x18>
 80012c8:	0a00      	lsrs	r0, r0, #8
 80012ca:	3908      	subs	r1, #8
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d301      	bcc.n	80012d6 <__clzsi2+0x22>
 80012d2:	0900      	lsrs	r0, r0, #4
 80012d4:	3904      	subs	r1, #4
 80012d6:	a202      	add	r2, pc, #8	@ (adr r2, 80012e0 <__clzsi2+0x2c>)
 80012d8:	5c10      	ldrb	r0, [r2, r0]
 80012da:	1840      	adds	r0, r0, r1
 80012dc:	4770      	bx	lr
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	02020304 	.word	0x02020304
 80012e4:	01010101 	.word	0x01010101
	...

080012f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f4:	f3bf 8f4f 	dsb	sy
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_SystemReset+0x1c>)
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SystemReset+0x20>)
 80012fe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001300:	f3bf 8f4f 	dsb	sy
}
 8001304:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	e7fd      	b.n	8001306 <__NVIC_SystemReset+0x16>
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0004 	.word	0x05fa0004

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fca3 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f8e9 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fa67 	bl	80017f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001326:	f000 f93f 	bl	80015a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800132a:	f000 fa15 	bl	8001758 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint16_t duty_cycle=0;


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800132e:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <main+0x1c0>)
 8001330:	2104      	movs	r1, #4
 8001332:	0018      	movs	r0, r3
 8001334:	f001 feb6 	bl	80030a4 <HAL_TIM_PWM_Start>
  Set_PWM_Frekans(frekans);
 8001338:	4b67      	ldr	r3, [pc, #412]	@ (80014d8 <main+0x1c4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff2b 	bl	8001198 <__aeabi_i2f>
 8001342:	1c03      	adds	r3, r0, #0
 8001344:	1c18      	adds	r0, r3, #0
 8001346:	f000 faab 	bl	80018a0 <Set_PWM_Frekans>


  UART_Receive_IT();
 800134a:	f000 fadf 	bl	800190c <UART_Receive_IT>





	  butonState2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800134e:	23a0      	movs	r3, #160	@ 0xa0
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	2110      	movs	r1, #16
 8001354:	0018      	movs	r0, r3
 8001356:	f000 ff47 	bl	80021e8 <HAL_GPIO_ReadPin>
 800135a:	0003      	movs	r3, r0
 800135c:	001a      	movs	r2, r3
 800135e:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <main+0x1c8>)
 8001360:	601a      	str	r2, [r3, #0]
	  butonState=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001362:	23a0      	movs	r3, #160	@ 0xa0
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	2102      	movs	r1, #2
 8001368:	0018      	movs	r0, r3
 800136a:	f000 ff3d 	bl	80021e8 <HAL_GPIO_ReadPin>
 800136e:	0003      	movs	r3, r0
 8001370:	001a      	movs	r2, r3
 8001372:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <main+0x1cc>)
 8001374:	601a      	str	r2, [r3, #0]
	  butonReset=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001376:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <main+0x1d0>)
 8001378:	2102      	movs	r1, #2
 800137a:	0018      	movs	r0, r3
 800137c:	f000 ff34 	bl	80021e8 <HAL_GPIO_ReadPin>
 8001380:	0003      	movs	r3, r0
 8001382:	001a      	movs	r2, r3
 8001384:	4b58      	ldr	r3, [pc, #352]	@ (80014e8 <main+0x1d4>)
 8001386:	601a      	str	r2, [r3, #0]
	    if(butonState==0)
 8001388:	4b55      	ldr	r3, [pc, #340]	@ (80014e0 <main+0x1cc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d145      	bne.n	800141c <main+0x108>
	    {
	    	HAL_Delay(50);
 8001390:	2032      	movs	r0, #50	@ 0x32
 8001392:	f000 fced 	bl	8001d70 <HAL_Delay>
	    	if(butonState==0)
 8001396:	4b52      	ldr	r3, [pc, #328]	@ (80014e0 <main+0x1cc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d13b      	bne.n	8001416 <main+0x102>
	    		/*period-=Period_azaltma;
	    		frekans=1000/period;
	    		frekans=(frekans*10)+2;
	    		UART_Send_Period("Frekans:\r",frekans);
	    		Set_PWM_Period(period);*/
	    		float period=1;
 800139e:	23fe      	movs	r3, #254	@ 0xfe
 80013a0:	059b      	lsls	r3, r3, #22
 80013a2:	607b      	str	r3, [r7, #4]
	    		frekans+=1.0f;
 80013a4:	4b4c      	ldr	r3, [pc, #304]	@ (80014d8 <main+0x1c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fef5 	bl	8001198 <__aeabi_i2f>
 80013ae:	1c03      	adds	r3, r0, #0
 80013b0:	21fe      	movs	r1, #254	@ 0xfe
 80013b2:	0589      	lsls	r1, r1, #22
 80013b4:	1c18      	adds	r0, r3, #0
 80013b6:	f7ff f87d 	bl	80004b4 <__aeabi_fadd>
 80013ba:	1c03      	adds	r3, r0, #0
 80013bc:	1c18      	adds	r0, r3, #0
 80013be:	f7ff fecb 	bl	8001158 <__aeabi_f2iz>
 80013c2:	0002      	movs	r2, r0
 80013c4:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <main+0x1c4>)
 80013c6:	601a      	str	r2, [r3, #0]
	    		period=1/frekans;
 80013c8:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <main+0x1c4>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	0003      	movs	r3, r0
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	2102      	movs	r1, #2
 80013d2:	2300      	movs	r3, #0
 80013d4:	4291      	cmp	r1, r2
 80013d6:	415b      	adcs	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <main+0xce>
 80013de:	0003      	movs	r3, r0
 80013e0:	e000      	b.n	80013e4 <main+0xd0>
 80013e2:	2300      	movs	r3, #0
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fed7 	bl	8001198 <__aeabi_i2f>
 80013ea:	1c03      	adds	r3, r0, #0
 80013ec:	607b      	str	r3, [r7, #4]

	    		UART_Send_Frequency("Frekans:\r", frekans);
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <main+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fed0 	bl	8001198 <__aeabi_i2f>
 80013f8:	1c02      	adds	r2, r0, #0
 80013fa:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <main+0x1d8>)
 80013fc:	1c11      	adds	r1, r2, #0
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 faaa 	bl	8001958 <UART_Send_Frequency>
	    		Set_PWM_Frekans(frekans);
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <main+0x1c4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff fec5 	bl	8001198 <__aeabi_i2f>
 800140e:	1c03      	adds	r3, r0, #0
 8001410:	1c18      	adds	r0, r3, #0
 8001412:	f000 fa45 	bl	80018a0 <Set_PWM_Frekans>
	    	}
	    	HAL_Delay(100);
 8001416:	2064      	movs	r0, #100	@ 0x64
 8001418:	f000 fcaa 	bl	8001d70 <HAL_Delay>
	    }

	    if(butonState2==0)
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <main+0x1c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d13d      	bne.n	80014a0 <main+0x18c>
	    {
	    	HAL_Delay(50);
 8001424:	2032      	movs	r0, #50	@ 0x32
 8001426:	f000 fca3 	bl	8001d70 <HAL_Delay>
	    	if(butonState2==0)
 800142a:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <main+0x1c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d132      	bne.n	8001498 <main+0x184>
	    		}
	    		frekans=1000.0f/period;
	    		frekans=frekans*10;
	    		UART_Send_Period("Frekans:\r",frekans);
	    		Set_PWM_Period(period);*/
	    		if(frekans>1.0f)
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <main+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff feae 	bl	8001198 <__aeabi_i2f>
 800143c:	1c03      	adds	r3, r0, #0
 800143e:	21fe      	movs	r1, #254	@ 0xfe
 8001440:	0589      	lsls	r1, r1, #22
 8001442:	1c18      	adds	r0, r3, #0
 8001444:	f7ff f80a 	bl	800045c <__aeabi_fcmpgt>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d025      	beq.n	8001498 <main+0x184>
	    		{
	    			frekans-=1.0f;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <main+0x1c4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff fea1 	bl	8001198 <__aeabi_i2f>
 8001456:	1c03      	adds	r3, r0, #0
 8001458:	21fe      	movs	r1, #254	@ 0xfe
 800145a:	0589      	lsls	r1, r1, #22
 800145c:	1c18      	adds	r0, r3, #0
 800145e:	f7ff fcd7 	bl	8000e10 <__aeabi_fsub>
 8001462:	1c03      	adds	r3, r0, #0
 8001464:	1c18      	adds	r0, r3, #0
 8001466:	f7ff fe77 	bl	8001158 <__aeabi_f2iz>
 800146a:	0002      	movs	r2, r0
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <main+0x1c4>)
 800146e:	601a      	str	r2, [r3, #0]
	    	        UART_Send_Frequency("Frekans:\r", frekans);
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <main+0x1c4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fe8f 	bl	8001198 <__aeabi_i2f>
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <main+0x1d8>)
 800147e:	1c11      	adds	r1, r2, #0
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fa69 	bl	8001958 <UART_Send_Frequency>
	    	        Set_PWM_Frekans(frekans);
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <main+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fe84 	bl	8001198 <__aeabi_i2f>
 8001490:	1c03      	adds	r3, r0, #0
 8001492:	1c18      	adds	r0, r3, #0
 8001494:	f000 fa04 	bl	80018a0 <Set_PWM_Frekans>
	    		}

	    	}
	    	HAL_Delay(100);
 8001498:	2064      	movs	r0, #100	@ 0x64
 800149a:	f000 fc69 	bl	8001d70 <HAL_Delay>
 800149e:	e756      	b.n	800134e <main+0x3a>

	    }
	    else if (butonReset == 0)
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <main+0x1d4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d000      	beq.n	80014aa <main+0x196>
 80014a8:	e751      	b.n	800134e <main+0x3a>
	    {
	        HAL_Delay(50); // Debouncing
 80014aa:	2032      	movs	r0, #50	@ 0x32
 80014ac:	f000 fc60 	bl	8001d70 <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <main+0x1d0>)
 80014b2:	2102      	movs	r1, #2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 fe97 	bl	80021e8 <HAL_GPIO_ReadPin>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d101      	bne.n	80014c2 <main+0x1ae>
	        {
	        	NVIC_SystemReset();
 80014be:	f7ff ff17 	bl	80012f0 <__NVIC_SystemReset>
	        }
	        UART_Send("Resetlendi\n\r");
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <main+0x1dc>)
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 fa31 	bl	800192c <UART_Send>
	        HAL_Delay(100); // Ekstra gecikme
 80014ca:	2064      	movs	r0, #100	@ 0x64
 80014cc:	f000 fc50 	bl	8001d70 <HAL_Delay>
	  butonState2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80014d0:	e73d      	b.n	800134e <main+0x3a>
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	2000007c 	.word	0x2000007c
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000160 	.word	0x20000160
 80014e0:	2000015c 	.word	0x2000015c
 80014e4:	50000400 	.word	0x50000400
 80014e8:	20000164 	.word	0x20000164
 80014ec:	08006298 	.word	0x08006298
 80014f0:	080062a4 	.word	0x080062a4

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b093      	sub	sp, #76	@ 0x4c
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	2414      	movs	r4, #20
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	0018      	movs	r0, r3
 8001500:	2334      	movs	r3, #52	@ 0x34
 8001502:	001a      	movs	r2, r3
 8001504:	2100      	movs	r1, #0
 8001506:	f004 fa3d 	bl	8005984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	0018      	movs	r0, r3
 800150e:	2310      	movs	r3, #16
 8001510:	001a      	movs	r2, r3
 8001512:	2100      	movs	r1, #0
 8001514:	f004 fa36 	bl	8005984 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fe81 	bl	8002224 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001528:	193b      	adds	r3, r7, r4
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	0052      	lsls	r2, r2, #1
 800152e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001530:	0021      	movs	r1, r4
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2240      	movs	r2, #64	@ 0x40
 800153c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2202      	movs	r2, #2
 8001542:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2202      	movs	r2, #2
 8001548:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2208      	movs	r2, #8
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	0292      	lsls	r2, r2, #10
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	0592      	lsls	r2, r2, #22
 8001564:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	187b      	adds	r3, r7, r1
 8001568:	0018      	movs	r0, r3
 800156a:	f000 fea7 	bl	80022bc <HAL_RCC_OscConfig>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001572:	f000 fa0d 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2202      	movs	r2, #2
 8001580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2102      	movs	r1, #2
 8001592:	0018      	movs	r0, r3
 8001594:	f001 f9a2 	bl	80028dc <HAL_RCC_ClockConfig>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800159c:	f000 f9f8 	bl	8001990 <Error_Handler>
  }
}
 80015a0:	46c0      	nop			@ (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b013      	add	sp, #76	@ 0x4c
 80015a6:	bd90      	pop	{r4, r7, pc}

080015a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09c      	sub	sp, #112	@ 0x70
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	2360      	movs	r3, #96	@ 0x60
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	0018      	movs	r0, r3
 80015b4:	2310      	movs	r3, #16
 80015b6:	001a      	movs	r2, r3
 80015b8:	2100      	movs	r1, #0
 80015ba:	f004 f9e3 	bl	8005984 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	2354      	movs	r3, #84	@ 0x54
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	0018      	movs	r0, r3
 80015c4:	230c      	movs	r3, #12
 80015c6:	001a      	movs	r2, r3
 80015c8:	2100      	movs	r1, #0
 80015ca:	f004 f9db 	bl	8005984 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	2338      	movs	r3, #56	@ 0x38
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	0018      	movs	r0, r3
 80015d4:	231c      	movs	r3, #28
 80015d6:	001a      	movs	r2, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	f004 f9d3 	bl	8005984 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	0018      	movs	r0, r3
 80015e2:	2334      	movs	r3, #52	@ 0x34
 80015e4:	001a      	movs	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f004 f9cc 	bl	8005984 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ec:	4b56      	ldr	r3, [pc, #344]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 80015ee:	4a57      	ldr	r2, [pc, #348]	@ (800174c <MX_TIM1_Init+0x1a4>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 80015f2:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 80015f4:	4a56      	ldr	r2, [pc, #344]	@ (8001750 <MX_TIM1_Init+0x1a8>)
 80015f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80015fe:	4b52      	ldr	r3, [pc, #328]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001600:	4a54      	ldr	r2, [pc, #336]	@ (8001754 <MX_TIM1_Init+0x1ac>)
 8001602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160a:	4b4f      	ldr	r3, [pc, #316]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b4d      	ldr	r3, [pc, #308]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001616:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001618:	0018      	movs	r0, r3
 800161a:	f001 fc3d 	bl	8002e98 <HAL_TIM_Base_Init>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001622:	f000 f9b5 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001626:	2160      	movs	r1, #96	@ 0x60
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	0152      	lsls	r2, r2, #5
 800162e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001630:	187a      	adds	r2, r7, r1
 8001632:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001634:	0011      	movs	r1, r2
 8001636:	0018      	movs	r0, r3
 8001638:	f001 ff18 	bl	800346c <HAL_TIM_ConfigClockSource>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001640:	f000 f9a6 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001644:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001646:	0018      	movs	r0, r3
 8001648:	f001 fccc 	bl	8002fe4 <HAL_TIM_PWM_Init>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001650:	f000 f99e 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2154      	movs	r1, #84	@ 0x54
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001668:	187a      	adds	r2, r7, r1
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 800166c:	0011      	movs	r1, r2
 800166e:	0018      	movs	r0, r3
 8001670:	f002 fbda 	bl	8003e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001678:	f000 f98a 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167c:	2138      	movs	r1, #56	@ 0x38
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2260      	movs	r2, #96	@ 0x60
 8001682:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	22fa      	movs	r2, #250	@ 0xfa
 8001688:	0052      	lsls	r2, r2, #1
 800168a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016aa:	1879      	adds	r1, r7, r1
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 80016ae:	2204      	movs	r2, #4
 80016b0:	0018      	movs	r0, r3
 80016b2:	f001 fddb 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80016ba:	f000 f969 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2280      	movs	r2, #128	@ 0x80
 80016e0:	0192      	lsls	r2, r2, #6
 80016e2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2280      	movs	r2, #128	@ 0x80
 80016fa:	0492      	lsls	r2, r2, #18
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001714:	0011      	movs	r1, r2
 8001716:	0018      	movs	r0, r3
 8001718:	f002 fbee 	bl	8003ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001720:	f000 f936 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001726:	0018      	movs	r0, r3
 8001728:	f001 fc0e 	bl	8002f48 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 800172e:	2104      	movs	r1, #4
 8001730:	0018      	movs	r0, r3
 8001732:	f001 fcb7 	bl	80030a4 <HAL_TIM_PWM_Start>
  //Set_PWM_Period(period);
  //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,500);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001736:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <MX_TIM1_Init+0x1a0>)
 8001738:	0018      	movs	r0, r3
 800173a:	f000 f973 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b01c      	add	sp, #112	@ 0x70
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	2000007c 	.word	0x2000007c
 800174c:	40012c00 	.word	0x40012c00
 8001750:	0000f9ff 	.word	0x0000f9ff
 8001754:	000003e7 	.word	0x000003e7

08001758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 800175e:	4a24      	ldr	r2, [pc, #144]	@ (80017f0 <MX_USART1_UART_Init+0x98>)
 8001760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 8001764:	2296      	movs	r2, #150	@ 0x96
 8001766:	0192      	lsls	r2, r2, #6
 8001768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001776:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 fc44 	bl	8004030 <HAL_UART_Init>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017ac:	f000 f8f0 	bl	8001990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b0:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 80017b2:	2100      	movs	r1, #0
 80017b4:	0018      	movs	r0, r3
 80017b6:	f003 ffd1 	bl	800575c <HAL_UARTEx_SetTxFifoThreshold>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017be:	f000 f8e7 	bl	8001990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	0018      	movs	r0, r3
 80017c8:	f004 f808 	bl	80057dc <HAL_UARTEx_SetRxFifoThreshold>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017d0:	f000 f8de 	bl	8001990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <MX_USART1_UART_Init+0x94>)
 80017d6:	0018      	movs	r0, r3
 80017d8:	f003 ff86 	bl	80056e8 <HAL_UARTEx_DisableFifoMode>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017e0:	f000 f8d6 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e4:	46c0      	nop			@ (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	200000c8 	.word	0x200000c8
 80017f0:	40013800 	.word	0x40013800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	240c      	movs	r4, #12
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	0018      	movs	r0, r3
 8001800:	2314      	movs	r3, #20
 8001802:	001a      	movs	r2, r3
 8001804:	2100      	movs	r1, #0
 8001806:	f004 f8bd 	bl	8005984 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <MX_GPIO_Init+0xa4>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001828:	2104      	movs	r1, #4
 800182a:	430a      	orrs	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001832:	2204      	movs	r2, #4
 8001834:	4013      	ands	r3, r2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_GPIO_Init+0xa4>)
 800183c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001840:	2102      	movs	r1, #2
 8001842:	430a      	orrs	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_GPIO_Init+0xa4>)
 8001848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001852:	193b      	adds	r3, r7, r4
 8001854:	2212      	movs	r2, #18
 8001856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	193b      	adds	r3, r7, r4
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185e:	193b      	adds	r3, r7, r4
 8001860:	2201      	movs	r2, #1
 8001862:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	193a      	adds	r2, r7, r4
 8001866:	23a0      	movs	r3, #160	@ 0xa0
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	0011      	movs	r1, r2
 800186c:	0018      	movs	r0, r3
 800186e:	f000 fb57 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001872:	193b      	adds	r3, r7, r4
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2201      	movs	r2, #1
 8001882:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	193b      	adds	r3, r7, r4
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <MX_GPIO_Init+0xa8>)
 8001888:	0019      	movs	r1, r3
 800188a:	0010      	movs	r0, r2
 800188c:	f000 fb48 	bl	8001f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b009      	add	sp, #36	@ 0x24
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	50000400 	.word	0x50000400

080018a0 <Set_PWM_Frekans>:

	  __HAL_TIM_SET_AUTORELOAD(&htim1, new_period);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, new_period / 2);
}*/
void Set_PWM_Frekans(float frekans)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    // Calculate the new period based on the frequency
    if(frekans > 0)
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7fe fdd6 	bl	800045c <__aeabi_fcmpgt>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d100      	bne.n	80018b6 <Set_PWM_Frekans+0x16>
        uint32_t new_period = (uint32_t)(64000000 / (frekans * (htim1.Init.Prescaler + 1))) - 1;
        __HAL_TIM_SET_AUTORELOAD(&htim1, new_period);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, new_period /2);

    }
}
 80018b4:	e022      	b.n	80018fc <Set_PWM_Frekans+0x5c>
        uint32_t new_period = (uint32_t)(64000000 / (frekans * (htim1.Init.Prescaler + 1))) - 1;
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <Set_PWM_Frekans+0x64>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fcb7 	bl	8001230 <__aeabi_ui2f>
 80018c2:	1c03      	adds	r3, r0, #0
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	1c18      	adds	r0, r3, #0
 80018c8:	f7ff f964 	bl	8000b94 <__aeabi_fmul>
 80018cc:	1c03      	adds	r3, r0, #0
 80018ce:	1c19      	adds	r1, r3, #0
 80018d0:	480d      	ldr	r0, [pc, #52]	@ (8001908 <Set_PWM_Frekans+0x68>)
 80018d2:	f7fe ff79 	bl	80007c8 <__aeabi_fdiv>
 80018d6:	1c03      	adds	r3, r0, #0
 80018d8:	1c18      	adds	r0, r3, #0
 80018da:	f7fe fdd3 	bl	8000484 <__aeabi_f2uiz>
 80018de:	0003      	movs	r3, r0
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_AUTORELOAD(&htim1, new_period);
 80018e4:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <Set_PWM_Frekans+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <Set_PWM_Frekans+0x64>)
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, new_period /2);
 80018f2:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <Set_PWM_Frekans+0x64>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	0852      	lsrs	r2, r2, #1
 80018fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80018fc:	46c0      	nop			@ (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000007c 	.word	0x2000007c
 8001908:	4c742400 	.word	0x4c742400

0800190c <UART_Receive_IT>:
void UART_Receive_IT(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 8001910:	4904      	ldr	r1, [pc, #16]	@ (8001924 <UART_Receive_IT+0x18>)
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <UART_Receive_IT+0x1c>)
 8001914:	2201      	movs	r2, #1
 8001916:	0018      	movs	r0, r3
 8001918:	f002 fc84 	bl	8004224 <HAL_UART_Receive_IT>

}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	20000168 	.word	0x20000168
 8001928:	200000c8 	.word	0x200000c8

0800192c <UART_Send>:
void UART_Send(char *message)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f7fe fbe2 	bl	8000100 <strlen>
 800193c:	0003      	movs	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	2301      	movs	r3, #1
 8001942:	425b      	negs	r3, r3
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4803      	ldr	r0, [pc, #12]	@ (8001954 <UART_Send+0x28>)
 8001948:	f002 fbc8 	bl	80040dc <HAL_UART_Transmit>
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200000c8 	.word	0x200000c8

08001958 <UART_Send_Frequency>:

// UART Receive Complete Callback function
void UART_Send_Frequency(const char *prefix, float freakans)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b09f      	sub	sp, #124	@ 0x7c
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	  char message[100];
	  snprintf(message, sizeof(message), "%s%.2f Hz\r\n", prefix, frekans);
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <UART_Send_Frequency+0x30>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4a08      	ldr	r2, [pc, #32]	@ (800198c <UART_Send_Frequency+0x34>)
 800196a:	240c      	movs	r4, #12
 800196c:	1938      	adds	r0, r7, r4
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	000b      	movs	r3, r1
 8001972:	2164      	movs	r1, #100	@ 0x64
 8001974:	f003 ffd2 	bl	800591c <sniprintf>
	  UART_Send(message);
 8001978:	193b      	adds	r3, r7, r4
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff ffd6 	bl	800192c <UART_Send>
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b01d      	add	sp, #116	@ 0x74
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	080062b4 	.word	0x080062b4

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	e7fd      	b.n	8001998 <Error_Handler+0x8>

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_MspInit+0x44>)
 80019a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <HAL_MspInit+0x44>)
 80019a8:	2101      	movs	r1, #1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_MspInit+0x44>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_MspInit+0x44>)
 80019bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_MspInit+0x44>)
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	0549      	lsls	r1, r1, #21
 80019c4:	430a      	orrs	r2, r1
 80019c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_MspInit+0x44>)
 80019ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	055b      	lsls	r3, r3, #21
 80019d0:	4013      	ands	r3, r2
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <HAL_TIM_Base_MspInit+0x38>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10d      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_TIM_Base_MspInit+0x3c>)
 80019f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_TIM_Base_MspInit+0x3c>)
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0109      	lsls	r1, r1, #4
 8001a00:	430a      	orrs	r2, r1
 8001a02:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_TIM_Base_MspInit+0x3c>)
 8001a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	240c      	movs	r4, #12
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	0018      	movs	r0, r3
 8001a32:	2314      	movs	r3, #20
 8001a34:	001a      	movs	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	f003 ffa4 	bl	8005984 <memset>
  if(htim->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <HAL_TIM_MspPostInit+0x74>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d123      	bne.n	8001a8e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_TIM_MspPostInit+0x78>)
 8001a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_TIM_MspPostInit+0x78>)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_TIM_MspPostInit+0x78>)
 8001a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	0021      	movs	r1, r4
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	187a      	adds	r2, r7, r1
 8001a82:	23a0      	movs	r3, #160	@ 0xa0
 8001a84:	05db      	lsls	r3, r3, #23
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 fa49 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b009      	add	sp, #36	@ 0x24
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b091      	sub	sp, #68	@ 0x44
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	232c      	movs	r3, #44	@ 0x2c
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	0018      	movs	r0, r3
 8001aae:	2314      	movs	r3, #20
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f003 ff66 	bl	8005984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab8:	2410      	movs	r4, #16
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	0018      	movs	r0, r3
 8001abe:	231c      	movs	r3, #28
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f003 ff5e 	bl	8005984 <memset>
  if(huart->Instance==USART1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a22      	ldr	r2, [pc, #136]	@ (8001b58 <HAL_UART_MspInit+0xb8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d13d      	bne.n	8001b4e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f001 f8a5 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001aea:	f7ff ff51 	bl	8001990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_UART_MspInit+0xbc>)
 8001af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_UART_MspInit+0xbc>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	01c9      	lsls	r1, r1, #7
 8001af8:	430a      	orrs	r2, r1
 8001afa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_UART_MspInit+0xbc>)
 8001afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	01db      	lsls	r3, r3, #7
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_UART_MspInit+0xbc>)
 8001b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_UART_MspInit+0xbc>)
 8001b10:	2104      	movs	r1, #4
 8001b12:	430a      	orrs	r2, r1
 8001b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_UART_MspInit+0xbc>)
 8001b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b22:	212c      	movs	r1, #44	@ 0x2c
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2230      	movs	r2, #48	@ 0x30
 8001b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2201      	movs	r2, #1
 8001b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	4a06      	ldr	r2, [pc, #24]	@ (8001b60 <HAL_UART_MspInit+0xc0>)
 8001b46:	0019      	movs	r1, r3
 8001b48:	0010      	movs	r0, r2
 8001b4a:	f000 f9e9 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b011      	add	sp, #68	@ 0x44
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	50000800 	.word	0x50000800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	e7fd      	b.n	8001b68 <NMI_Handler+0x4>

08001b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	e7fd      	b.n	8001b70 <HardFault_Handler+0x4>

08001b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f8d4 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	@ (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f003 fee4 	bl	8005994 <__errno>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	425b      	negs	r3, r3
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	18d2      	adds	r2, r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <_sbrk+0x64>)
 8001be8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20009000 	.word	0x20009000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	2000016c 	.word	0x2000016c
 8001c00:	200002c0 	.word	0x200002c0

08001c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c10:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c14:	f7ff fff6 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <LoopForever+0xe>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <LoopForever+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c3e:	f003 feaf 	bl	80059a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c42:	f7ff fb67 	bl	8001314 <main>

08001c46 <LoopForever>:

LoopForever:
  b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
  ldr   r0, =_estack
 8001c48:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c54:	08006454 	.word	0x08006454
  ldr r2, =_sbss
 8001c58:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c5c:	200002bc 	.word	0x200002bc

08001c60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_Init+0x3c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Init+0x3c>)
 8001c76:	2180      	movs	r1, #128	@ 0x80
 8001c78:	0049      	lsls	r1, r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c7e:	2003      	movs	r0, #3
 8001c80:	f000 f810 	bl	8001ca4 <HAL_InitTick>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	e001      	b.n	8001c94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fe84 	bl	800199c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cac:	230f      	movs	r3, #15
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_InitTick+0x88>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d02b      	beq.n	8001d14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <HAL_InitTick+0x8c>)
 8001cbe:	681c      	ldr	r4, [r3, #0]
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_InitTick+0x88>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	23fa      	movs	r3, #250	@ 0xfa
 8001cc8:	0098      	lsls	r0, r3, #2
 8001cca:	f7fe fa2b 	bl	8000124 <__udivsi3>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	0020      	movs	r0, r4
 8001cd4:	f7fe fa26 	bl	8000124 <__udivsi3>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f000 f913 	bl	8001f06 <HAL_SYSTICK_Config>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d112      	bne.n	8001d0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d80a      	bhi.n	8001d00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	2301      	movs	r3, #1
 8001cee:	425b      	negs	r3, r3
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f8f2 	bl	8001edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_InitTick+0x90>)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e00d      	b.n	8001d1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d00:	230f      	movs	r3, #15
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e008      	b.n	8001d1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e003      	b.n	8001d1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d14:	230f      	movs	r3, #15
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	781b      	ldrb	r3, [r3, #0]
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b005      	add	sp, #20
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	20000004 	.word	0x20000004
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	001a      	movs	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	18d2      	adds	r2, r2, r3
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	20000170 	.word	0x20000170

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b02      	ldr	r3, [pc, #8]	@ (8001d6c <HAL_GetTick+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	20000170 	.word	0x20000170

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	189b      	adds	r3, r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	f7ff ffe0 	bl	8001d5c <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	2000000c 	.word	0x2000000c

08001db8 <__NVIC_SetPriority>:
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dcc:	d828      	bhi.n	8001e20 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dce:	4a2f      	ldr	r2, [pc, #188]	@ (8001e8c <__NVIC_SetPriority+0xd4>)
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	33c0      	adds	r3, #192	@ 0xc0
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	589b      	ldr	r3, [r3, r2]
 8001dde:	1dfa      	adds	r2, r7, #7
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	0011      	movs	r1, r2
 8001de4:	2203      	movs	r2, #3
 8001de6:	400a      	ands	r2, r1
 8001de8:	00d2      	lsls	r2, r2, #3
 8001dea:	21ff      	movs	r1, #255	@ 0xff
 8001dec:	4091      	lsls	r1, r2
 8001dee:	000a      	movs	r2, r1
 8001df0:	43d2      	mvns	r2, r2
 8001df2:	401a      	ands	r2, r3
 8001df4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	22ff      	movs	r2, #255	@ 0xff
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	0018      	movs	r0, r3
 8001e04:	2303      	movs	r3, #3
 8001e06:	4003      	ands	r3, r0
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e0c:	481f      	ldr	r0, [pc, #124]	@ (8001e8c <__NVIC_SetPriority+0xd4>)
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	430a      	orrs	r2, r1
 8001e18:	33c0      	adds	r3, #192	@ 0xc0
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	501a      	str	r2, [r3, r0]
}
 8001e1e:	e031      	b.n	8001e84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e20:	4a1b      	ldr	r2, [pc, #108]	@ (8001e90 <__NVIC_SetPriority+0xd8>)
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	0019      	movs	r1, r3
 8001e28:	230f      	movs	r3, #15
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	3b08      	subs	r3, #8
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3306      	adds	r3, #6
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	18d3      	adds	r3, r2, r3
 8001e36:	3304      	adds	r3, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1dfa      	adds	r2, r7, #7
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	0011      	movs	r1, r2
 8001e40:	2203      	movs	r2, #3
 8001e42:	400a      	ands	r2, r1
 8001e44:	00d2      	lsls	r2, r2, #3
 8001e46:	21ff      	movs	r1, #255	@ 0xff
 8001e48:	4091      	lsls	r1, r2
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	43d2      	mvns	r2, r2
 8001e4e:	401a      	ands	r2, r3
 8001e50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	22ff      	movs	r2, #255	@ 0xff
 8001e58:	401a      	ands	r2, r3
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	2303      	movs	r3, #3
 8001e62:	4003      	ands	r3, r0
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e68:	4809      	ldr	r0, [pc, #36]	@ (8001e90 <__NVIC_SetPriority+0xd8>)
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	001c      	movs	r4, r3
 8001e70:	230f      	movs	r3, #15
 8001e72:	4023      	ands	r3, r4
 8001e74:	3b08      	subs	r3, #8
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	3306      	adds	r3, #6
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	18c3      	adds	r3, r0, r3
 8001e80:	3304      	adds	r3, #4
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b003      	add	sp, #12
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	045b      	lsls	r3, r3, #17
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d301      	bcc.n	8001eac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e010      	b.n	8001ece <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <SysTick_Config+0x44>)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	425b      	negs	r3, r3
 8001eb8:	2103      	movs	r1, #3
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff ff7c 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <SysTick_Config+0x44>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <SysTick_Config+0x44>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	1c02      	adds	r2, r0, #0
 8001eec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff ff5d 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b004      	add	sp, #16
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff ffbf 	bl	8001e94 <SysTick_Config>
 8001f16:	0003      	movs	r3, r0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e147      	b.n	80021c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4091      	lsls	r1, r2
 8001f3a:	000a      	movs	r2, r1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d100      	bne.n	8001f48 <HAL_GPIO_Init+0x28>
 8001f46:	e138      	b.n	80021ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d005      	beq.n	8001f60 <HAL_GPIO_Init+0x40>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d130      	bne.n	8001fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	0013      	movs	r3, r2
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	409a      	lsls	r2, r3
 8001f82:	0013      	movs	r3, r2
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f96:	2201      	movs	r2, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	2201      	movs	r2, #1
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d017      	beq.n	8001ffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	4013      	ands	r3, r2
 8002006:	2b02      	cmp	r3, #2
 8002008:	d123      	bne.n	8002052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	58d3      	ldr	r3, [r2, r3]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	409a      	lsls	r2, r3
 8002024:	0013      	movs	r3, r2
 8002026:	43da      	mvns	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2107      	movs	r1, #7
 8002036:	400b      	ands	r3, r1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	6939      	ldr	r1, [r7, #16]
 8002050:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	401a      	ands	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	409a      	lsls	r2, r3
 8002078:	0013      	movs	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	23c0      	movs	r3, #192	@ 0xc0
 800208c:	029b      	lsls	r3, r3, #10
 800208e:	4013      	ands	r3, r2
 8002090:	d100      	bne.n	8002094 <HAL_GPIO_Init+0x174>
 8002092:	e092      	b.n	80021ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002094:	4a50      	ldr	r2, [pc, #320]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3318      	adds	r3, #24
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	589b      	ldr	r3, [r3, r2]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2203      	movs	r2, #3
 80020a6:	4013      	ands	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	220f      	movs	r2, #15
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	43da      	mvns	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	23a0      	movs	r3, #160	@ 0xa0
 80020bc:	05db      	lsls	r3, r3, #23
 80020be:	429a      	cmp	r2, r3
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x1ca>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a45      	ldr	r2, [pc, #276]	@ (80021dc <HAL_GPIO_Init+0x2bc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x1c6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a44      	ldr	r2, [pc, #272]	@ (80021e0 <HAL_GPIO_Init+0x2c0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x1c2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a43      	ldr	r2, [pc, #268]	@ (80021e4 <HAL_GPIO_Init+0x2c4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x1be>
 80020da:	2303      	movs	r3, #3
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x1cc>
 80020de:	2305      	movs	r3, #5
 80020e0:	e004      	b.n	80020ec <HAL_GPIO_Init+0x1cc>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x1cc>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x1cc>
 80020ea:	2300      	movs	r3, #0
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	2103      	movs	r1, #3
 80020f0:	400a      	ands	r2, r1
 80020f2:	00d2      	lsls	r2, r2, #3
 80020f4:	4093      	lsls	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020fc:	4936      	ldr	r1, [pc, #216]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3318      	adds	r3, #24
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43da      	mvns	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	035b      	lsls	r3, r3, #13
 8002122:	4013      	ands	r3, r2
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800212e:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002134:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43da      	mvns	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	039b      	lsls	r3, r3, #14
 800214c:	4013      	ands	r3, r2
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800215e:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 8002160:	2384      	movs	r3, #132	@ 0x84
 8002162:	58d3      	ldr	r3, [r2, r3]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43da      	mvns	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	029b      	lsls	r3, r3, #10
 8002178:	4013      	ands	r3, r2
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002184:	4914      	ldr	r1, [pc, #80]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 8002186:	2284      	movs	r2, #132	@ 0x84
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800218c:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	58d3      	ldr	r3, [r2, r3]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43da      	mvns	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	025b      	lsls	r3, r3, #9
 80021a6:	4013      	ands	r3, r2
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b2:	4909      	ldr	r1, [pc, #36]	@ (80021d8 <HAL_GPIO_Init+0x2b8>)
 80021b4:	2280      	movs	r2, #128	@ 0x80
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	40da      	lsrs	r2, r3
 80021c8:	1e13      	subs	r3, r2, #0
 80021ca:	d000      	beq.n	80021ce <HAL_GPIO_Init+0x2ae>
 80021cc:	e6b0      	b.n	8001f30 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	46c0      	nop			@ (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b006      	add	sp, #24
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021800 	.word	0x40021800
 80021dc:	50000400 	.word	0x50000400
 80021e0:	50000800 	.word	0x50000800
 80021e4:	50000c00 	.word	0x50000c00

080021e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	000a      	movs	r2, r1
 80021f2:	1cbb      	adds	r3, r7, #2
 80021f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	1cba      	adds	r2, r7, #2
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	4013      	ands	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002202:	230f      	movs	r3, #15
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e003      	b.n	8002214 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002214:	230f      	movs	r3, #15
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800222c:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d11f      	bne.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	0013      	movs	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	189b      	adds	r3, r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4912      	ldr	r1, [pc, #72]	@ (80022a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002256:	0018      	movs	r0, r3
 8002258:	f7fd ff64 	bl	8000124 <__udivsi3>
 800225c:	0003      	movs	r3, r0
 800225e:	3301      	adds	r3, #1
 8002260:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002262:	e008      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e001      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e009      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	401a      	ands	r2, r3
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	429a      	cmp	r2, r3
 8002286:	d0ed      	beq.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b004      	add	sp, #16
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	40007000 	.word	0x40007000
 8002298:	fffff9ff 	.word	0xfffff9ff
 800229c:	20000004 	.word	0x20000004
 80022a0:	000f4240 	.word	0x000f4240

080022a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	23e0      	movs	r3, #224	@ 0xe0
 80022ae:	01db      	lsls	r3, r3, #7
 80022b0:	4013      	ands	r3, r2
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e2f3      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	d100      	bne.n	80022da <HAL_RCC_OscConfig+0x1e>
 80022d8:	e07c      	b.n	80023d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022da:	4bc3      	ldr	r3, [pc, #780]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2238      	movs	r2, #56	@ 0x38
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e4:	4bc0      	ldr	r3, [pc, #768]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_OscConfig+0x3e>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4bb9      	ldr	r3, [pc, #740]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d062      	beq.n	80023d2 <HAL_RCC_OscConfig+0x116>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d15e      	bne.n	80023d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e2ce      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x78>
 8002324:	4bb0      	ldr	r3, [pc, #704]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4baf      	ldr	r3, [pc, #700]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800232a:	2180      	movs	r1, #128	@ 0x80
 800232c:	0249      	lsls	r1, r1, #9
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e020      	b.n	8002376 <HAL_RCC_OscConfig+0xba>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	23a0      	movs	r3, #160	@ 0xa0
 800233a:	02db      	lsls	r3, r3, #11
 800233c:	429a      	cmp	r2, r3
 800233e:	d10e      	bne.n	800235e <HAL_RCC_OscConfig+0xa2>
 8002340:	4ba9      	ldr	r3, [pc, #676]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4ba8      	ldr	r3, [pc, #672]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002346:	2180      	movs	r1, #128	@ 0x80
 8002348:	02c9      	lsls	r1, r1, #11
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	4ba6      	ldr	r3, [pc, #664]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4ba5      	ldr	r3, [pc, #660]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002354:	2180      	movs	r1, #128	@ 0x80
 8002356:	0249      	lsls	r1, r1, #9
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0xba>
 800235e:	4ba2      	ldr	r3, [pc, #648]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4ba1      	ldr	r3, [pc, #644]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002364:	49a1      	ldr	r1, [pc, #644]	@ (80025ec <HAL_RCC_OscConfig+0x330>)
 8002366:	400a      	ands	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4b9f      	ldr	r3, [pc, #636]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b9e      	ldr	r3, [pc, #632]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002370:	499f      	ldr	r1, [pc, #636]	@ (80025f0 <HAL_RCC_OscConfig+0x334>)
 8002372:	400a      	ands	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d014      	beq.n	80023a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fced 	bl	8001d5c <HAL_GetTick>
 8002382:	0003      	movs	r3, r0
 8002384:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff fce8 	bl	8001d5c <HAL_GetTick>
 800238c:	0002      	movs	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	@ 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e28d      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	4b93      	ldr	r3, [pc, #588]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	029b      	lsls	r3, r3, #10
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0xcc>
 80023a6:	e015      	b.n	80023d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff fcd8 	bl	8001d5c <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b2:	f7ff fcd3 	bl	8001d5c <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	@ 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e278      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c4:	4b88      	ldr	r3, [pc, #544]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	4013      	ands	r3, r2
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0xf6>
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d100      	bne.n	80023e0 <HAL_RCC_OscConfig+0x124>
 80023de:	e099      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e0:	4b81      	ldr	r3, [pc, #516]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2238      	movs	r2, #56	@ 0x38
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ea:	4b7f      	ldr	r3, [pc, #508]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2203      	movs	r2, #3
 80023f0:	4013      	ands	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d102      	bne.n	8002400 <HAL_RCC_OscConfig+0x144>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d002      	beq.n	8002406 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d135      	bne.n	8002472 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002406:	4b78      	ldr	r3, [pc, #480]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4013      	ands	r3, r2
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x162>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e24b      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b72      	ldr	r3, [pc, #456]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a74      	ldr	r2, [pc, #464]	@ (80025f4 <HAL_RCC_OscConfig+0x338>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	4b6e      	ldr	r3, [pc, #440]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d112      	bne.n	8002460 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800243a:	4b6b      	ldr	r3, [pc, #428]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	@ (80025f8 <HAL_RCC_OscConfig+0x33c>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	4b67      	ldr	r3, [pc, #412]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800244e:	4b66      	ldr	r3, [pc, #408]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0adb      	lsrs	r3, r3, #11
 8002454:	2207      	movs	r2, #7
 8002456:	4013      	ands	r3, r2
 8002458:	4a68      	ldr	r2, [pc, #416]	@ (80025fc <HAL_RCC_OscConfig+0x340>)
 800245a:	40da      	lsrs	r2, r3
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <HAL_RCC_OscConfig+0x344>)
 800245e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002460:	4b68      	ldr	r3, [pc, #416]	@ (8002604 <HAL_RCC_OscConfig+0x348>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff fc1d 	bl	8001ca4 <HAL_InitTick>
 800246a:	1e03      	subs	r3, r0, #0
 800246c:	d051      	beq.n	8002512 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e221      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d030      	beq.n	80024dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800247a:	4b5b      	ldr	r3, [pc, #364]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5e      	ldr	r2, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x33c>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	4b57      	ldr	r3, [pc, #348]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800248e:	4b56      	ldr	r3, [pc, #344]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b55      	ldr	r3, [pc, #340]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002494:	2180      	movs	r1, #128	@ 0x80
 8002496:	0049      	lsls	r1, r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff fc5e 	bl	8001d5c <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff fc59 	bl	8001d5c <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1fe      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b4b      	ldr	r3, [pc, #300]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4013      	ands	r3, r2
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b48      	ldr	r3, [pc, #288]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	@ (80025f4 <HAL_RCC_OscConfig+0x338>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	021a      	lsls	r2, r3, #8
 80024d4:	4b44      	ldr	r3, [pc, #272]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e01b      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024dc:	4b42      	ldr	r3, [pc, #264]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80024e2:	4949      	ldr	r1, [pc, #292]	@ (8002608 <HAL_RCC_OscConfig+0x34c>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff fc38 	bl	8001d5c <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff fc33 	bl	8001d5c <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1d8      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4013      	ands	r3, r2
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x236>
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002512:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2208      	movs	r2, #8
 800251a:	4013      	ands	r3, r2
 800251c:	d047      	beq.n	80025ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800251e:	4b32      	ldr	r3, [pc, #200]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2238      	movs	r2, #56	@ 0x38
 8002524:	4013      	ands	r3, r2
 8002526:	2b18      	cmp	r3, #24
 8002528:	d10a      	bne.n	8002540 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800252a:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d03c      	beq.n	80025ae <HAL_RCC_OscConfig+0x2f2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d138      	bne.n	80025ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e1ba      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d019      	beq.n	800257c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002548:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800254a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800254c:	4b26      	ldr	r3, [pc, #152]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800254e:	2101      	movs	r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff fc02 	bl	8001d5c <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255e:	f7ff fbfd 	bl	8001d5c <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a2      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002570:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d0f1      	beq.n	800255e <HAL_RCC_OscConfig+0x2a2>
 800257a:	e018      	b.n	80025ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 800257e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fbe8 	bl	8001d5c <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002592:	f7ff fbe3 	bl	8001d5c <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e188      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a4:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80025a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d1f1      	bne.n	8002592 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2204      	movs	r2, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x2fe>
 80025b8:	e0c6      	b.n	8002748 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	231f      	movs	r3, #31
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2238      	movs	r2, #56	@ 0x38
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d11e      	bne.n	800260c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_RCC_OscConfig+0x32c>)
 80025d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d100      	bne.n	80025da <HAL_RCC_OscConfig+0x31e>
 80025d8:	e0b6      	b.n	8002748 <HAL_RCC_OscConfig+0x48c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d000      	beq.n	80025e4 <HAL_RCC_OscConfig+0x328>
 80025e2:	e0b1      	b.n	8002748 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e166      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	fffeffff 	.word	0xfffeffff
 80025f0:	fffbffff 	.word	0xfffbffff
 80025f4:	ffff80ff 	.word	0xffff80ff
 80025f8:	ffffc7ff 	.word	0xffffc7ff
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	20000004 	.word	0x20000004
 8002604:	20000008 	.word	0x20000008
 8002608:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260c:	4bac      	ldr	r3, [pc, #688]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800260e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x360>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x362>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d011      	beq.n	8002646 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4ba7      	ldr	r3, [pc, #668]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002626:	4ba6      	ldr	r3, [pc, #664]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002628:	2180      	movs	r1, #128	@ 0x80
 800262a:	0549      	lsls	r1, r1, #21
 800262c:	430a      	orrs	r2, r1
 800262e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002630:	4ba3      	ldr	r3, [pc, #652]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	055b      	lsls	r3, r3, #21
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800263e:	231f      	movs	r3, #31
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002646:	4b9f      	ldr	r3, [pc, #636]	@ (80028c4 <HAL_RCC_OscConfig+0x608>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4013      	ands	r3, r2
 8002650:	d11a      	bne.n	8002688 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002652:	4b9c      	ldr	r3, [pc, #624]	@ (80028c4 <HAL_RCC_OscConfig+0x608>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b9b      	ldr	r3, [pc, #620]	@ (80028c4 <HAL_RCC_OscConfig+0x608>)
 8002658:	2180      	movs	r1, #128	@ 0x80
 800265a:	0049      	lsls	r1, r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002660:	f7ff fb7c 	bl	8001d5c <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fb77 	bl	8001d5c <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e11c      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	4b91      	ldr	r3, [pc, #580]	@ (80028c4 <HAL_RCC_OscConfig+0x608>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4013      	ands	r3, r2
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x3e2>
 8002690:	4b8b      	ldr	r3, [pc, #556]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002692:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002694:	4b8a      	ldr	r3, [pc, #552]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002696:	2101      	movs	r1, #1
 8002698:	430a      	orrs	r2, r1
 800269a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800269c:	e01c      	b.n	80026d8 <HAL_RCC_OscConfig+0x41c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x404>
 80026a6:	4b86      	ldr	r3, [pc, #536]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026aa:	4b85      	ldr	r3, [pc, #532]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026ac:	2104      	movs	r1, #4
 80026ae:	430a      	orrs	r2, r1
 80026b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b2:	4b83      	ldr	r3, [pc, #524]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026b6:	4b82      	ldr	r3, [pc, #520]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	430a      	orrs	r2, r1
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0x41c>
 80026c0:	4b7f      	ldr	r3, [pc, #508]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c4:	4b7e      	ldr	r3, [pc, #504]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	438a      	bics	r2, r1
 80026ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026cc:	4b7c      	ldr	r3, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026d0:	4b7b      	ldr	r3, [pc, #492]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80026d2:	2104      	movs	r1, #4
 80026d4:	438a      	bics	r2, r1
 80026d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d014      	beq.n	800270a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7ff fb3c 	bl	8001d5c <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e8:	e009      	b.n	80026fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7ff fb37 	bl	8001d5c <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	4a74      	ldr	r2, [pc, #464]	@ (80028c8 <HAL_RCC_OscConfig+0x60c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0db      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fe:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2202      	movs	r2, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x42e>
 8002708:	e013      	b.n	8002732 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff fb27 	bl	8001d5c <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002712:	e009      	b.n	8002728 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7ff fb22 	bl	8001d5c <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	4a6a      	ldr	r2, [pc, #424]	@ (80028c8 <HAL_RCC_OscConfig+0x60c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0c6      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002732:	231f      	movs	r3, #31
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4b60      	ldr	r3, [pc, #384]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800273e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002740:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002742:	4962      	ldr	r1, [pc, #392]	@ (80028cc <HAL_RCC_OscConfig+0x610>)
 8002744:	400a      	ands	r2, r1
 8002746:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d100      	bne.n	8002752 <HAL_RCC_OscConfig+0x496>
 8002750:	e0b0      	b.n	80028b4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002752:	4b5b      	ldr	r3, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2238      	movs	r2, #56	@ 0x38
 8002758:	4013      	ands	r3, r2
 800275a:	2b10      	cmp	r3, #16
 800275c:	d100      	bne.n	8002760 <HAL_RCC_OscConfig+0x4a4>
 800275e:	e078      	b.n	8002852 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d153      	bne.n	8002810 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b55      	ldr	r3, [pc, #340]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b54      	ldr	r3, [pc, #336]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800276e:	4958      	ldr	r1, [pc, #352]	@ (80028d0 <HAL_RCC_OscConfig+0x614>)
 8002770:	400a      	ands	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7ff faf2 	bl	8001d5c <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7ff faed 	bl	8001d5c <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e092      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002790:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	049b      	lsls	r3, r3, #18
 8002798:	4013      	ands	r3, r2
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279c:	4b48      	ldr	r3, [pc, #288]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a4c      	ldr	r2, [pc, #304]	@ (80028d4 <HAL_RCC_OscConfig+0x618>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	431a      	orrs	r2, r3
 80027c4:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	0449      	lsls	r1, r1, #17
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027d8:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4b38      	ldr	r3, [pc, #224]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0549      	lsls	r1, r1, #21
 80027e2:	430a      	orrs	r2, r1
 80027e4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7ff fab9 	bl	8001d5c <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7ff fab4 	bl	8001d5c <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e059      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	049b      	lsls	r3, r3, #18
 800280a:	4013      	ands	r3, r2
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x534>
 800280e:	e051      	b.n	80028b4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002816:	492e      	ldr	r1, [pc, #184]	@ (80028d0 <HAL_RCC_OscConfig+0x614>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff fa9e 	bl	8001d5c <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7ff fa99 	bl	8001d5c <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e03e      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	049b      	lsls	r3, r3, #18
 8002840:	4013      	ands	r3, r2
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 800284a:	4923      	ldr	r1, [pc, #140]	@ (80028d8 <HAL_RCC_OscConfig+0x61c>)
 800284c:	400a      	ands	r2, r1
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e030      	b.n	80028b4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e02b      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800285e:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <HAL_RCC_OscConfig+0x604>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2203      	movs	r2, #3
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	429a      	cmp	r2, r3
 8002870:	d11e      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2270      	movs	r2, #112	@ 0x70
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d117      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	23fe      	movs	r3, #254	@ 0xfe
 8002884:	01db      	lsls	r3, r3, #7
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d10e      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	23f8      	movs	r3, #248	@ 0xf8
 8002896:	039b      	lsls	r3, r3, #14
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	0f5b      	lsrs	r3, r3, #29
 80028a6:	075a      	lsls	r2, r3, #29
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b008      	add	sp, #32
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	00001388 	.word	0x00001388
 80028cc:	efffffff 	.word	0xefffffff
 80028d0:	feffffff 	.word	0xfeffffff
 80028d4:	1fc1808c 	.word	0x1fc1808c
 80028d8:	effefffc 	.word	0xeffefffc

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0e9      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b76      	ldr	r3, [pc, #472]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2207      	movs	r2, #7
 80028f6:	4013      	ands	r3, r2
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d91e      	bls.n	800293c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b73      	ldr	r3, [pc, #460]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2207      	movs	r2, #7
 8002904:	4393      	bics	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	4b70      	ldr	r3, [pc, #448]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002910:	f7ff fa24 	bl	8001d5c <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002918:	e009      	b.n	800292e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291a:	f7ff fa1f 	bl	8001d5c <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e0ca      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800292e:	4b67      	ldr	r3, [pc, #412]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2207      	movs	r2, #7
 8002934:	4013      	ands	r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d1ee      	bne.n	800291a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2202      	movs	r2, #2
 8002942:	4013      	ands	r3, r2
 8002944:	d015      	beq.n	8002972 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2204      	movs	r2, #4
 800294c:	4013      	ands	r3, r2
 800294e:	d006      	beq.n	800295e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002950:	4b60      	ldr	r3, [pc, #384]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002956:	21e0      	movs	r1, #224	@ 0xe0
 8002958:	01c9      	lsls	r1, r1, #7
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1fc>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d057      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d107      	bne.n	8002994 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002984:	4b53      	ldr	r3, [pc, #332]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	029b      	lsls	r3, r3, #10
 800298c:	4013      	ands	r3, r2
 800298e:	d12b      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e097      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d107      	bne.n	80029ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	049b      	lsls	r3, r3, #18
 80029a4:	4013      	ands	r3, r2
 80029a6:	d11f      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e08b      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b4:	4b47      	ldr	r3, [pc, #284]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	d113      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e07f      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d106      	bne.n	80029da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029cc:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e074      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e06d      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2207      	movs	r2, #7
 80029ee:	4393      	bics	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7ff f9ae 	bl	8001d5c <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a06:	f7ff f9a9 	bl	8001d5c <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e054      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2238      	movs	r2, #56	@ 0x38
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1ec      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2207      	movs	r2, #7
 8002a32:	4013      	ands	r3, r2
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d21e      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2207      	movs	r2, #7
 8002a40:	4393      	bics	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f986 	bl	8001d5c <HAL_GetTick>
 8002a50:	0003      	movs	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a54:	e009      	b.n	8002a6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a56:	f7ff f981 	bl	8001d5c <HAL_GetTick>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e02c      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a6a:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2207      	movs	r2, #7
 8002a70:	4013      	ands	r3, r2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a82:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a15      	ldr	r2, [pc, #84]	@ (8002adc <HAL_RCC_ClockConfig+0x200>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a96:	f000 f829 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002a9a:	0001      	movs	r1, r0
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <HAL_RCC_ClockConfig+0x204>)
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	58d3      	ldr	r3, [r2, r3]
 8002aac:	221f      	movs	r2, #31
 8002aae:	4013      	ands	r3, r2
 8002ab0:	000a      	movs	r2, r1
 8002ab2:	40da      	lsrs	r2, r3
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_ClockConfig+0x208>)
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_ClockConfig+0x20c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff f8f1 	bl	8001ca4 <HAL_InitTick>
 8002ac2:	0003      	movs	r3, r0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	00001388 	.word	0x00001388
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	fffff0ff 	.word	0xfffff0ff
 8002adc:	ffff8fff 	.word	0xffff8fff
 8002ae0:	0800633c 	.word	0x0800633c
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	20000008 	.word	0x20000008

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af2:	4b3c      	ldr	r3, [pc, #240]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2238      	movs	r2, #56	@ 0x38
 8002af8:	4013      	ands	r3, r2
 8002afa:	d10f      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002afc:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0adb      	lsrs	r3, r3, #11
 8002b02:	2207      	movs	r2, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	2201      	movs	r2, #1
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	4835      	ldr	r0, [pc, #212]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b12:	f7fd fb07 	bl	8000124 <__udivsi3>
 8002b16:	0003      	movs	r3, r0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e05d      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b1c:	4b31      	ldr	r3, [pc, #196]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2238      	movs	r2, #56	@ 0x38
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b28:	4b30      	ldr	r3, [pc, #192]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x100>)
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e054      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2238      	movs	r2, #56	@ 0x38
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d138      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b44:	4b27      	ldr	r3, [pc, #156]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d10d      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4824      	ldr	r0, [pc, #144]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x100>)
 8002b5c:	f7fd fae2 	bl	8000124 <__udivsi3>
 8002b60:	0003      	movs	r3, r0
 8002b62:	0019      	movs	r1, r3
 8002b64:	4b1f      	ldr	r3, [pc, #124]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	227f      	movs	r2, #127	@ 0x7f
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	434b      	muls	r3, r1
 8002b70:	617b      	str	r3, [r7, #20]
        break;
 8002b72:	e00d      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	481c      	ldr	r0, [pc, #112]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b78:	f7fd fad4 	bl	8000124 <__udivsi3>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	0019      	movs	r1, r3
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	227f      	movs	r2, #127	@ 0x7f
 8002b88:	4013      	ands	r3, r2
 8002b8a:	434b      	muls	r3, r1
 8002b8c:	617b      	str	r3, [r7, #20]
        break;
 8002b8e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b90:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0f5b      	lsrs	r3, r3, #29
 8002b96:	2207      	movs	r2, #7
 8002b98:	4013      	ands	r3, r2
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f7fd fabf 	bl	8000124 <__udivsi3>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	e015      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bac:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2238      	movs	r2, #56	@ 0x38
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d103      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2238      	movs	r2, #56	@ 0x38
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b18      	cmp	r3, #24
 8002bca:	d103      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bcc:	23fa      	movs	r3, #250	@ 0xfa
 8002bce:	01db      	lsls	r3, r3, #7
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e001      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bd8:	693b      	ldr	r3, [r7, #16]
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b006      	add	sp, #24
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	40021000 	.word	0x40021000
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	007a1200 	.word	0x007a1200

08002bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b02      	ldr	r3, [pc, #8]	@ (8002c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c08:	f7ff fff2 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c0c:	0004      	movs	r4, r0
 8002c0e:	f7ff fb49 	bl	80022a4 <LL_RCC_GetAPB1Prescaler>
 8002c12:	0003      	movs	r3, r0
 8002c14:	0b1a      	lsrs	r2, r3, #12
 8002c16:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	58d3      	ldr	r3, [r2, r3]
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	4013      	ands	r3, r2
 8002c20:	40dc      	lsrs	r4, r3
 8002c22:	0023      	movs	r3, r4
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	0800637c 	.word	0x0800637c

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c38:	2313      	movs	r3, #19
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c40:	2312      	movs	r3, #18
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	4013      	ands	r3, r2
 8002c52:	d100      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c54:	e0a3      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2011      	movs	r0, #17
 8002c58:	183b      	adds	r3, r7, r0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b86      	ldr	r3, [pc, #536]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	055b      	lsls	r3, r3, #21
 8002c66:	4013      	ands	r3, r2
 8002c68:	d110      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b83      	ldr	r3, [pc, #524]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c6e:	4b82      	ldr	r3, [pc, #520]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	0549      	lsls	r1, r1, #21
 8002c74:	430a      	orrs	r2, r1
 8002c76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c78:	4b7f      	ldr	r3, [pc, #508]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	055b      	lsls	r3, r3, #21
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	183b      	adds	r3, r7, r0
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b7a      	ldr	r3, [pc, #488]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	0049      	lsls	r1, r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9a:	f7ff f85f 	bl	8001d5c <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7ff f85a 	bl	8001d5c <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d904      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cb2:	2313      	movs	r3, #19
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	701a      	strb	r2, [r3, #0]
        break;
 8002cba:	e005      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d0ed      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002cc8:	2313      	movs	r3, #19
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d154      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cd2:	4b69      	ldr	r3, [pc, #420]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cd6:	23c0      	movs	r3, #192	@ 0xc0
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d019      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d014      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cee:	4b62      	ldr	r3, [pc, #392]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	4a63      	ldr	r2, [pc, #396]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cfe:	2180      	movs	r1, #128	@ 0x80
 8002d00:	0249      	lsls	r1, r1, #9
 8002d02:	430a      	orrs	r2, r1
 8002d04:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d06:	4b5c      	ldr	r3, [pc, #368]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0c:	495d      	ldr	r1, [pc, #372]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d12:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d016      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff f81c 	bl	8001d5c <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d28:	e00c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7ff f817 	bl	8001d5c <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	4a54      	ldr	r2, [pc, #336]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d904      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d3a:	2313      	movs	r3, #19
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
            break;
 8002d42:	e004      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d44:	4b4c      	ldr	r3, [pc, #304]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d0ed      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d4e:	2313      	movs	r3, #19
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d58:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	4a48      	ldr	r2, [pc, #288]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	4b44      	ldr	r3, [pc, #272]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d6c:	e00c      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d6e:	2312      	movs	r3, #18
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2213      	movs	r2, #19
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e005      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	2312      	movs	r3, #18
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2213      	movs	r2, #19
 8002d82:	18ba      	adds	r2, r7, r2
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d88:	2311      	movs	r3, #17
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d96:	4b38      	ldr	r3, [pc, #224]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d98:	493c      	ldr	r1, [pc, #240]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da8:	4b33      	ldr	r3, [pc, #204]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	2203      	movs	r2, #3
 8002dae:	4393      	bics	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4b30      	ldr	r3, [pc, #192]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	220c      	movs	r2, #12
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	4013      	ands	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de4:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	4a29      	ldr	r2, [pc, #164]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	01db      	lsls	r3, r3, #7
 8002e00:	4013      	ands	r3, r2
 8002e02:	d015      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e04:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	0899      	lsrs	r1, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d106      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	0249      	lsls	r1, r1, #9
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d016      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	01db      	lsls	r3, r3, #7
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	0249      	lsls	r1, r1, #9
 8002e66:	430a      	orrs	r2, r1
 8002e68:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e6a:	2312      	movs	r3, #18
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b006      	add	sp, #24
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	fffffcff 	.word	0xfffffcff
 8002e84:	fffeffff 	.word	0xfffeffff
 8002e88:	00001388 	.word	0x00001388
 8002e8c:	efffffff 	.word	0xefffffff
 8002e90:	ffffcfff 	.word	0xffffcfff
 8002e94:	ffff3fff 	.word	0xffff3fff

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e04a      	b.n	8002f40 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	223d      	movs	r2, #61	@ 0x3d
 8002eae:	5c9b      	ldrb	r3, [r3, r2]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	223c      	movs	r2, #60	@ 0x3c
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7fe fd8f 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	223d      	movs	r2, #61	@ 0x3d
 8002eca:	2102      	movs	r1, #2
 8002ecc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	0010      	movs	r0, r2
 8002eda:	f000 fb9d 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2248      	movs	r2, #72	@ 0x48
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223e      	movs	r2, #62	@ 0x3e
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	223f      	movs	r2, #63	@ 0x3f
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	5499      	strb	r1, [r3, r2]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2240      	movs	r2, #64	@ 0x40
 8002efa:	2101      	movs	r1, #1
 8002efc:	5499      	strb	r1, [r3, r2]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2241      	movs	r2, #65	@ 0x41
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2242      	movs	r2, #66	@ 0x42
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2243      	movs	r2, #67	@ 0x43
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2244      	movs	r2, #68	@ 0x44
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2245      	movs	r2, #69	@ 0x45
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2246      	movs	r2, #70	@ 0x46
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2247      	movs	r2, #71	@ 0x47
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	223d      	movs	r2, #61	@ 0x3d
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223d      	movs	r2, #61	@ 0x3d
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d001      	beq.n	8002f60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e034      	b.n	8002fca <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	223d      	movs	r2, #61	@ 0x3d
 8002f64:	2102      	movs	r1, #2
 8002f66:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	@ (8002fd4 <HAL_TIM_Base_Start+0x8c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_TIM_Base_Start+0x3e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a18      	ldr	r2, [pc, #96]	@ (8002fd8 <HAL_TIM_Base_Start+0x90>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_Base_Start+0x3e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a16      	ldr	r2, [pc, #88]	@ (8002fdc <HAL_TIM_Base_Start+0x94>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d116      	bne.n	8002fb4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <HAL_TIM_Base_Start+0x98>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d016      	beq.n	8002fc6 <HAL_TIM_Base_Start+0x7e>
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d011      	beq.n	8002fc6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	e008      	b.n	8002fc6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e000      	b.n	8002fc8 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	00010007 	.word	0x00010007

08002fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e04a      	b.n	800308c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223d      	movs	r2, #61	@ 0x3d
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223c      	movs	r2, #60	@ 0x3c
 8003006:	2100      	movs	r1, #0
 8003008:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f841 	bl	8003094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223d      	movs	r2, #61	@ 0x3d
 8003016:	2102      	movs	r1, #2
 8003018:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f000 faf7 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2248      	movs	r2, #72	@ 0x48
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	223e      	movs	r2, #62	@ 0x3e
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	223f      	movs	r2, #63	@ 0x3f
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2240      	movs	r2, #64	@ 0x40
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2241      	movs	r2, #65	@ 0x41
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2242      	movs	r2, #66	@ 0x42
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2243      	movs	r2, #67	@ 0x43
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2244      	movs	r2, #68	@ 0x44
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2245      	movs	r2, #69	@ 0x45
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2246      	movs	r2, #70	@ 0x46
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2247      	movs	r2, #71	@ 0x47
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223d      	movs	r2, #61	@ 0x3d
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x22>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	223e      	movs	r2, #62	@ 0x3e
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	4193      	sbcs	r3, r2
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e037      	b.n	8003136 <HAL_TIM_PWM_Start+0x92>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d108      	bne.n	80030de <HAL_TIM_PWM_Start+0x3a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	223f      	movs	r2, #63	@ 0x3f
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	4193      	sbcs	r3, r2
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e02b      	b.n	8003136 <HAL_TIM_PWM_Start+0x92>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d108      	bne.n	80030f6 <HAL_TIM_PWM_Start+0x52>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2240      	movs	r2, #64	@ 0x40
 80030e8:	5c9b      	ldrb	r3, [r3, r2]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	1e5a      	subs	r2, r3, #1
 80030f0:	4193      	sbcs	r3, r2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e01f      	b.n	8003136 <HAL_TIM_PWM_Start+0x92>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d108      	bne.n	800310e <HAL_TIM_PWM_Start+0x6a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2241      	movs	r2, #65	@ 0x41
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	1e5a      	subs	r2, r3, #1
 8003108:	4193      	sbcs	r3, r2
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e013      	b.n	8003136 <HAL_TIM_PWM_Start+0x92>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d108      	bne.n	8003126 <HAL_TIM_PWM_Start+0x82>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2242      	movs	r2, #66	@ 0x42
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	1e5a      	subs	r2, r3, #1
 8003120:	4193      	sbcs	r3, r2
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e007      	b.n	8003136 <HAL_TIM_PWM_Start+0x92>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2243      	movs	r2, #67	@ 0x43
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	4193      	sbcs	r3, r2
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e085      	b.n	800324a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0xaa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223e      	movs	r2, #62	@ 0x3e
 8003148:	2102      	movs	r1, #2
 800314a:	5499      	strb	r1, [r3, r2]
 800314c:	e023      	b.n	8003196 <HAL_TIM_PWM_Start+0xf2>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0xba>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	223f      	movs	r2, #63	@ 0x3f
 8003158:	2102      	movs	r1, #2
 800315a:	5499      	strb	r1, [r3, r2]
 800315c:	e01b      	b.n	8003196 <HAL_TIM_PWM_Start+0xf2>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xca>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	@ 0x40
 8003168:	2102      	movs	r1, #2
 800316a:	5499      	strb	r1, [r3, r2]
 800316c:	e013      	b.n	8003196 <HAL_TIM_PWM_Start+0xf2>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xda>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2241      	movs	r2, #65	@ 0x41
 8003178:	2102      	movs	r1, #2
 800317a:	5499      	strb	r1, [r3, r2]
 800317c:	e00b      	b.n	8003196 <HAL_TIM_PWM_Start+0xf2>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b10      	cmp	r3, #16
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Start+0xea>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2242      	movs	r2, #66	@ 0x42
 8003188:	2102      	movs	r1, #2
 800318a:	5499      	strb	r1, [r3, r2]
 800318c:	e003      	b.n	8003196 <HAL_TIM_PWM_Start+0xf2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2243      	movs	r2, #67	@ 0x43
 8003192:	2102      	movs	r1, #2
 8003194:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fe1e 	bl	8003de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <HAL_TIM_PWM_Start+0x1b0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_TIM_PWM_Start+0x128>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <HAL_TIM_PWM_Start+0x1b4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_TIM_PWM_Start+0x128>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a27      	ldr	r2, [pc, #156]	@ (800325c <HAL_TIM_PWM_Start+0x1b8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_TIM_PWM_Start+0x128>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a26      	ldr	r2, [pc, #152]	@ (8003260 <HAL_TIM_PWM_Start+0x1bc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x12c>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_TIM_PWM_Start+0x12e>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2180      	movs	r1, #128	@ 0x80
 80031e2:	0209      	lsls	r1, r1, #8
 80031e4:	430a      	orrs	r2, r1
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <HAL_TIM_PWM_Start+0x1b0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_TIM_PWM_Start+0x162>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003264 <HAL_TIM_PWM_Start+0x1c0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_TIM_PWM_Start+0x162>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <HAL_TIM_PWM_Start+0x1b4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d116      	bne.n	8003234 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <HAL_TIM_PWM_Start+0x1c4>)
 800320e:	4013      	ands	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b06      	cmp	r3, #6
 8003216:	d016      	beq.n	8003246 <HAL_TIM_PWM_Start+0x1a2>
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	025b      	lsls	r3, r3, #9
 800321e:	429a      	cmp	r2, r3
 8003220:	d011      	beq.n	8003246 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	e008      	b.n	8003246 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e000      	b.n	8003248 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003246:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b004      	add	sp, #16
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40014000 	.word	0x40014000
 800325c:	40014400 	.word	0x40014400
 8003260:	40014800 	.word	0x40014800
 8003264:	40000400 	.word	0x40000400
 8003268:	00010007 	.word	0x00010007

0800326c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003278:	2317      	movs	r3, #23
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	223c      	movs	r2, #60	@ 0x3c
 8003284:	5c9b      	ldrb	r3, [r3, r2]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_TIM_PWM_ConfigChannel+0x22>
 800328a:	2302      	movs	r3, #2
 800328c:	e0e5      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	223c      	movs	r2, #60	@ 0x3c
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b14      	cmp	r3, #20
 800329a:	d900      	bls.n	800329e <HAL_TIM_PWM_ConfigChannel+0x32>
 800329c:	e0d1      	b.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	4b70      	ldr	r3, [pc, #448]	@ (8003464 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80032a4:	18d3      	adds	r3, r2, r3
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fa34 	bl	8003720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2108      	movs	r1, #8
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2104      	movs	r1, #4
 80032d4:	438a      	bics	r2, r1
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]
      break;
 80032ea:	e0af      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 fa9d 	bl	8003834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2180      	movs	r1, #128	@ 0x80
 8003306:	0109      	lsls	r1, r1, #4
 8003308:	430a      	orrs	r2, r1
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4954      	ldr	r1, [pc, #336]	@ (8003468 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003318:	400a      	ands	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	021a      	lsls	r2, r3, #8
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	619a      	str	r2, [r3, #24]
      break;
 8003330:	e08c      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0011      	movs	r1, r2
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fafe 	bl	800393c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2108      	movs	r1, #8
 800334c:	430a      	orrs	r2, r1
 800334e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2104      	movs	r1, #4
 800335c:	438a      	bics	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69d9      	ldr	r1, [r3, #28]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
      break;
 8003372:	e06b      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fb65 	bl	8003a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2180      	movs	r1, #128	@ 0x80
 800338e:	0109      	lsls	r1, r1, #4
 8003390:	430a      	orrs	r2, r1
 8003392:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4932      	ldr	r1, [pc, #200]	@ (8003468 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69d9      	ldr	r1, [r3, #28]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	61da      	str	r2, [r3, #28]
      break;
 80033b8:	e048      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	0011      	movs	r1, r2
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fbac 	bl	8003b20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2108      	movs	r1, #8
 80033d4:	430a      	orrs	r2, r1
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2104      	movs	r1, #4
 80033e4:	438a      	bics	r2, r1
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033fa:	e027      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	0011      	movs	r1, r2
 8003404:	0018      	movs	r0, r3
 8003406:	f000 fbeb 	bl	8003be0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2180      	movs	r1, #128	@ 0x80
 8003416:	0109      	lsls	r1, r1, #4
 8003418:	430a      	orrs	r2, r1
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4910      	ldr	r1, [pc, #64]	@ (8003468 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003428:	400a      	ands	r2, r1
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003440:	e004      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003442:	2317      	movs	r3, #23
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	223c      	movs	r2, #60	@ 0x3c
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]

  return status;
 8003454:	2317      	movs	r3, #23
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	781b      	ldrb	r3, [r3, #0]
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	0800639c 	.word	0x0800639c
 8003468:	fffffbff 	.word	0xfffffbff

0800346c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	230f      	movs	r3, #15
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223c      	movs	r2, #60	@ 0x3c
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIM_ConfigClockSource+0x20>
 8003488:	2302      	movs	r3, #2
 800348a:	e0bc      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x19a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223c      	movs	r2, #60	@ 0x3c
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	223d      	movs	r2, #61	@ 0x3d
 8003498:	2102      	movs	r1, #2
 800349a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003610 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4a59      	ldr	r2, [pc, #356]	@ (8003614 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2280      	movs	r2, #128	@ 0x80
 80034c2:	0192      	lsls	r2, r2, #6
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d040      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xde>
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	0192      	lsls	r2, r2, #6
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d900      	bls.n	80034d2 <HAL_TIM_ConfigClockSource+0x66>
 80034d0:	e088      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 80034d2:	2280      	movs	r2, #128	@ 0x80
 80034d4:	0152      	lsls	r2, r2, #5
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d100      	bne.n	80034dc <HAL_TIM_ConfigClockSource+0x70>
 80034da:	e088      	b.n	80035ee <HAL_TIM_ConfigClockSource+0x182>
 80034dc:	2280      	movs	r2, #128	@ 0x80
 80034de:	0152      	lsls	r2, r2, #5
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d900      	bls.n	80034e6 <HAL_TIM_ConfigClockSource+0x7a>
 80034e4:	e07e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 80034e6:	2b70      	cmp	r3, #112	@ 0x70
 80034e8:	d018      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xb0>
 80034ea:	d900      	bls.n	80034ee <HAL_TIM_ConfigClockSource+0x82>
 80034ec:	e07a      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 80034ee:	2b60      	cmp	r3, #96	@ 0x60
 80034f0:	d04f      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x126>
 80034f2:	d900      	bls.n	80034f6 <HAL_TIM_ConfigClockSource+0x8a>
 80034f4:	e076      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 80034f6:	2b50      	cmp	r3, #80	@ 0x50
 80034f8:	d03b      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x106>
 80034fa:	d900      	bls.n	80034fe <HAL_TIM_ConfigClockSource+0x92>
 80034fc:	e072      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 80034fe:	2b40      	cmp	r3, #64	@ 0x40
 8003500:	d057      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x146>
 8003502:	d900      	bls.n	8003506 <HAL_TIM_ConfigClockSource+0x9a>
 8003504:	e06e      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 8003506:	2b30      	cmp	r3, #48	@ 0x30
 8003508:	d063      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x166>
 800350a:	d86b      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 800350c:	2b20      	cmp	r3, #32
 800350e:	d060      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x166>
 8003510:	d868      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d05d      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x166>
 8003516:	2b10      	cmp	r3, #16
 8003518:	d05b      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x166>
 800351a:	e063      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800352c:	f000 fc38 	bl	8003da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2277      	movs	r2, #119	@ 0x77
 800353c:	4313      	orrs	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	609a      	str	r2, [r3, #8]
      break;
 8003548:	e052      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	f000 fc21 	bl	8003da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	01c9      	lsls	r1, r1, #7
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
      break;
 8003570:	e03e      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	001a      	movs	r2, r3
 8003580:	f000 fb92 	bl	8003ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2150      	movs	r1, #80	@ 0x50
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fbec 	bl	8003d68 <TIM_ITRx_SetConfig>
      break;
 8003590:	e02e      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800359e:	001a      	movs	r2, r3
 80035a0:	f000 fbb0 	bl	8003d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2160      	movs	r1, #96	@ 0x60
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fbdc 	bl	8003d68 <TIM_ITRx_SetConfig>
      break;
 80035b0:	e01e      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035be:	001a      	movs	r2, r3
 80035c0:	f000 fb72 	bl	8003ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2140      	movs	r1, #64	@ 0x40
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 fbcc 	bl	8003d68 <TIM_ITRx_SetConfig>
      break;
 80035d0:	e00e      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f000 fbc3 	bl	8003d68 <TIM_ITRx_SetConfig>
      break;
 80035e2:	e005      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80035e4:	230f      	movs	r3, #15
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
      break;
 80035ec:	e000      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80035ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	223d      	movs	r2, #61	@ 0x3d
 80035f4:	2101      	movs	r1, #1
 80035f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	223c      	movs	r2, #60	@ 0x3c
 80035fc:	2100      	movs	r1, #0
 80035fe:	5499      	strb	r1, [r3, r2]

  return status;
 8003600:	230f      	movs	r3, #15
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	781b      	ldrb	r3, [r3, #0]
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	ffceff88 	.word	0xffceff88
 8003614:	ffff00ff 	.word	0xffff00ff

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a36      	ldr	r2, [pc, #216]	@ (8003704 <TIM_Base_SetConfig+0xec>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_Base_SetConfig+0x20>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a35      	ldr	r2, [pc, #212]	@ (8003708 <TIM_Base_SetConfig+0xf0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2270      	movs	r2, #112	@ 0x70
 800363c:	4393      	bics	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <TIM_Base_SetConfig+0xec>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	@ (8003708 <TIM_Base_SetConfig+0xf0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00f      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	@ (800370c <TIM_Base_SetConfig+0xf4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <TIM_Base_SetConfig+0xf8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a29      	ldr	r2, [pc, #164]	@ (8003714 <TIM_Base_SetConfig+0xfc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a28      	ldr	r2, [pc, #160]	@ (8003718 <TIM_Base_SetConfig+0x100>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a27      	ldr	r2, [pc, #156]	@ (800371c <TIM_Base_SetConfig+0x104>)
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2280      	movs	r2, #128	@ 0x80
 8003690:	4393      	bics	r3, r2
 8003692:	001a      	movs	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <TIM_Base_SetConfig+0xec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00b      	beq.n	80036d2 <TIM_Base_SetConfig+0xba>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <TIM_Base_SetConfig+0xf8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_Base_SetConfig+0xba>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a13      	ldr	r2, [pc, #76]	@ (8003714 <TIM_Base_SetConfig+0xfc>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_Base_SetConfig+0xba>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <TIM_Base_SetConfig+0x100>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d103      	bne.n	80036da <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2201      	movs	r2, #1
 80036f2:	4393      	bics	r3, r2
 80036f4:	001a      	movs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	611a      	str	r2, [r3, #16]
  }
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b004      	add	sp, #16
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40000400 	.word	0x40000400
 800370c:	40002000 	.word	0x40002000
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	fffffcff 	.word	0xfffffcff

08003720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	2201      	movs	r2, #1
 8003736:	4393      	bics	r3, r2
 8003738:	001a      	movs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <TIM_OC1_SetConfig+0xf8>)
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2203      	movs	r2, #3
 8003756:	4393      	bics	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2202      	movs	r2, #2
 8003768:	4393      	bics	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a28      	ldr	r2, [pc, #160]	@ (800381c <TIM_OC1_SetConfig+0xfc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00b      	beq.n	8003796 <TIM_OC1_SetConfig+0x76>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <TIM_OC1_SetConfig+0x100>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <TIM_OC1_SetConfig+0x76>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <TIM_OC1_SetConfig+0x104>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC1_SetConfig+0x76>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <TIM_OC1_SetConfig+0x108>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10c      	bne.n	80037b0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2208      	movs	r2, #8
 800379a:	4393      	bics	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2204      	movs	r2, #4
 80037ac:	4393      	bics	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1a      	ldr	r2, [pc, #104]	@ (800381c <TIM_OC1_SetConfig+0xfc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_OC1_SetConfig+0xb0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a19      	ldr	r2, [pc, #100]	@ (8003820 <TIM_OC1_SetConfig+0x100>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_OC1_SetConfig+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <TIM_OC1_SetConfig+0x104>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC1_SetConfig+0xb0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <TIM_OC1_SetConfig+0x108>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4a16      	ldr	r2, [pc, #88]	@ (800382c <TIM_OC1_SetConfig+0x10c>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4a15      	ldr	r2, [pc, #84]	@ (8003830 <TIM_OC1_SetConfig+0x110>)
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b006      	add	sp, #24
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	fffeff8f 	.word	0xfffeff8f
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800
 800382c:	fffffeff 	.word	0xfffffeff
 8003830:	fffffdff 	.word	0xfffffdff

08003834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	2210      	movs	r2, #16
 800384a:	4393      	bics	r3, r2
 800384c:	001a      	movs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a2e      	ldr	r2, [pc, #184]	@ (800391c <TIM_OC2_SetConfig+0xe8>)
 8003862:	4013      	ands	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <TIM_OC2_SetConfig+0xec>)
 800386a:	4013      	ands	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2220      	movs	r2, #32
 800387e:	4393      	bics	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a24      	ldr	r2, [pc, #144]	@ (8003924 <TIM_OC2_SetConfig+0xf0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10d      	bne.n	80038b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	4393      	bics	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2240      	movs	r2, #64	@ 0x40
 80038ae:	4393      	bics	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <TIM_OC2_SetConfig+0xf0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_OC2_SetConfig+0x9e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003928 <TIM_OC2_SetConfig+0xf4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <TIM_OC2_SetConfig+0x9e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a19      	ldr	r2, [pc, #100]	@ (800392c <TIM_OC2_SetConfig+0xf8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC2_SetConfig+0x9e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <TIM_OC2_SetConfig+0xfc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d113      	bne.n	80038fa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <TIM_OC2_SetConfig+0x100>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4a16      	ldr	r2, [pc, #88]	@ (8003938 <TIM_OC2_SetConfig+0x104>)
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b006      	add	sp, #24
 800391a:	bd80      	pop	{r7, pc}
 800391c:	feff8fff 	.word	0xfeff8fff
 8003920:	fffffcff 	.word	0xfffffcff
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800
 8003934:	fffffbff 	.word	0xfffffbff
 8003938:	fffff7ff 	.word	0xfffff7ff

0800393c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <TIM_OC3_SetConfig+0xe4>)
 8003952:	401a      	ands	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a2f      	ldr	r2, [pc, #188]	@ (8003a24 <TIM_OC3_SetConfig+0xe8>)
 8003968:	4013      	ands	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2203      	movs	r2, #3
 8003970:	4393      	bics	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <TIM_OC3_SetConfig+0xec>)
 8003982:	4013      	ands	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a25      	ldr	r2, [pc, #148]	@ (8003a2c <TIM_OC3_SetConfig+0xf0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10d      	bne.n	80039b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4a24      	ldr	r2, [pc, #144]	@ (8003a30 <TIM_OC3_SetConfig+0xf4>)
 800399e:	4013      	ands	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <TIM_OC3_SetConfig+0xf8>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a2c <TIM_OC3_SetConfig+0xf0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_OC3_SetConfig+0x9a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <TIM_OC3_SetConfig+0xfc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_OC3_SetConfig+0x9a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a3c <TIM_OC3_SetConfig+0x100>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_OC3_SetConfig+0x9a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a40 <TIM_OC3_SetConfig+0x104>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d113      	bne.n	80039fe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <TIM_OC3_SetConfig+0x108>)
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <TIM_OC3_SetConfig+0x10c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b006      	add	sp, #24
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fffffeff 	.word	0xfffffeff
 8003a24:	fffeff8f 	.word	0xfffeff8f
 8003a28:	fffffdff 	.word	0xfffffdff
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	fffff7ff 	.word	0xfffff7ff
 8003a34:	fffffbff 	.word	0xfffffbff
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	ffffefff 	.word	0xffffefff
 8003a48:	ffffdfff 	.word	0xffffdfff

08003a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4a26      	ldr	r2, [pc, #152]	@ (8003afc <TIM_OC4_SetConfig+0xb0>)
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <TIM_OC4_SetConfig+0xb4>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a21      	ldr	r2, [pc, #132]	@ (8003b04 <TIM_OC4_SetConfig+0xb8>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <TIM_OC4_SetConfig+0xbc>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	031b      	lsls	r3, r3, #12
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <TIM_OC4_SetConfig+0xc0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_OC4_SetConfig+0x78>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <TIM_OC4_SetConfig+0xc4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_OC4_SetConfig+0x78>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a17      	ldr	r2, [pc, #92]	@ (8003b14 <TIM_OC4_SetConfig+0xc8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_OC4_SetConfig+0x78>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a16      	ldr	r2, [pc, #88]	@ (8003b18 <TIM_OC4_SetConfig+0xcc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d109      	bne.n	8003ad8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4a15      	ldr	r2, [pc, #84]	@ (8003b1c <TIM_OC4_SetConfig+0xd0>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b006      	add	sp, #24
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	ffffefff 	.word	0xffffefff
 8003b00:	feff8fff 	.word	0xfeff8fff
 8003b04:	fffffcff 	.word	0xfffffcff
 8003b08:	ffffdfff 	.word	0xffffdfff
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <TIM_OC5_SetConfig+0xa4>)
 8003b36:	401a      	ands	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc8 <TIM_OC5_SetConfig+0xa8>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <TIM_OC5_SetConfig+0xac>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a17      	ldr	r2, [pc, #92]	@ (8003bd0 <TIM_OC5_SetConfig+0xb0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_OC5_SetConfig+0x6e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <TIM_OC5_SetConfig+0xb4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_OC5_SetConfig+0x6e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <TIM_OC5_SetConfig+0xb8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_OC5_SetConfig+0x6e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a14      	ldr	r2, [pc, #80]	@ (8003bdc <TIM_OC5_SetConfig+0xbc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d109      	bne.n	8003ba2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <TIM_OC5_SetConfig+0xa4>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b006      	add	sp, #24
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	fffeffff 	.word	0xfffeffff
 8003bc8:	fffeff8f 	.word	0xfffeff8f
 8003bcc:	fffdffff 	.word	0xfffdffff
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800

08003be0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a24      	ldr	r2, [pc, #144]	@ (8003c88 <TIM_OC6_SetConfig+0xa8>)
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a20      	ldr	r2, [pc, #128]	@ (8003c8c <TIM_OC6_SetConfig+0xac>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c90 <TIM_OC6_SetConfig+0xb0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	051b      	lsls	r3, r3, #20
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <TIM_OC6_SetConfig+0xb4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <TIM_OC6_SetConfig+0x70>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <TIM_OC6_SetConfig+0xb8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_OC6_SetConfig+0x70>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a16      	ldr	r2, [pc, #88]	@ (8003c9c <TIM_OC6_SetConfig+0xbc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_OC6_SetConfig+0x70>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ca0 <TIM_OC6_SetConfig+0xc0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d109      	bne.n	8003c64 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4a14      	ldr	r2, [pc, #80]	@ (8003ca4 <TIM_OC6_SetConfig+0xc4>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b006      	add	sp, #24
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	ffefffff 	.word	0xffefffff
 8003c8c:	feff8fff 	.word	0xfeff8fff
 8003c90:	ffdfffff 	.word	0xffdfffff
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800
 8003ca4:	fffbffff 	.word	0xfffbffff

08003ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	22f0      	movs	r2, #240	@ 0xf0
 8003cd2:	4393      	bics	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	220a      	movs	r2, #10
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b006      	add	sp, #24
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	001a      	movs	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <TIM_TI2_ConfigInputStage+0x60>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	031b      	lsls	r3, r3, #12
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	22a0      	movs	r2, #160	@ 0xa0
 8003d40:	4393      	bics	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	ffff0fff 	.word	0xffff0fff

08003d68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a08      	ldr	r2, [pc, #32]	@ (8003d9c <TIM_ITRx_SetConfig+0x34>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	2207      	movs	r2, #7
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	609a      	str	r2, [r3, #8]
}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	ffcfff8f 	.word	0xffcfff8f

08003da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <TIM_ETR_SetConfig+0x3c>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	021a      	lsls	r2, r3, #8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b006      	add	sp, #24
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	ffff00ff 	.word	0xffff00ff

08003de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	221f      	movs	r2, #31
 8003df0:	4013      	ands	r3, r2
 8003df2:	2201      	movs	r2, #1
 8003df4:	409a      	lsls	r2, r3
 8003df6:	0013      	movs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	43d2      	mvns	r2, r2
 8003e02:	401a      	ands	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	211f      	movs	r1, #31
 8003e10:	400b      	ands	r3, r1
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4099      	lsls	r1, r3
 8003e16:	000b      	movs	r3, r1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b006      	add	sp, #24
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223c      	movs	r2, #60	@ 0x3c
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e04f      	b.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	223c      	movs	r2, #60	@ 0x3c
 8003e44:	2101      	movs	r1, #1
 8003e46:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	223d      	movs	r2, #61	@ 0x3d
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a20      	ldr	r2, [pc, #128]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2270      	movs	r2, #112	@ 0x70
 8003e80:	4393      	bics	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a12      	ldr	r2, [pc, #72]	@ (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10c      	bne.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	4393      	bics	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223d      	movs	r2, #61	@ 0x3d
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223c      	movs	r2, #60	@ 0x3c
 8003eda:	2100      	movs	r1, #0
 8003edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b004      	add	sp, #16
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	ff0fffff 	.word	0xff0fffff
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	223c      	movs	r2, #60	@ 0x3c
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e06f      	b.n	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	223c      	movs	r2, #60	@ 0x3c
 8003f18:	2101      	movs	r1, #1
 8003f1a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	22ff      	movs	r2, #255	@ 0xff
 8003f20:	4393      	bics	r3, r2
 8003f22:	001a      	movs	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a33      	ldr	r2, [pc, #204]	@ (8003ffc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003f30:	401a      	ands	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a30      	ldr	r2, [pc, #192]	@ (8004000 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003f3e:	401a      	ands	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004004 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a2b      	ldr	r2, [pc, #172]	@ (8004008 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a29      	ldr	r2, [pc, #164]	@ (800400c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003f68:	401a      	ands	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a26      	ldr	r2, [pc, #152]	@ (8004010 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003f76:	401a      	ands	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a24      	ldr	r2, [pc, #144]	@ (8004014 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003f84:	401a      	ands	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f94:	401a      	ands	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800401c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d11c      	bne.n	8003fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a1d      	ldr	r2, [pc, #116]	@ (8004020 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003fac:	401a      	ands	r2, r3
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	051b      	lsls	r3, r3, #20
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a1a      	ldr	r2, [pc, #104]	@ (8004024 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003fca:	401a      	ands	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a15      	ldr	r2, [pc, #84]	@ (800402c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003fd8:	401a      	ands	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	223c      	movs	r2, #60	@ 0x3c
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	fffffcff 	.word	0xfffffcff
 8004000:	fffffbff 	.word	0xfffffbff
 8004004:	fffff7ff 	.word	0xfffff7ff
 8004008:	ffffefff 	.word	0xffffefff
 800400c:	ffffdfff 	.word	0xffffdfff
 8004010:	ffffbfff 	.word	0xffffbfff
 8004014:	fff0ffff 	.word	0xfff0ffff
 8004018:	efffffff 	.word	0xefffffff
 800401c:	40012c00 	.word	0x40012c00
 8004020:	ff0fffff 	.word	0xff0fffff
 8004024:	feffffff 	.word	0xfeffffff
 8004028:	fdffffff 	.word	0xfdffffff
 800402c:	dfffffff 	.word	0xdfffffff

08004030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e046      	b.n	80040d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2288      	movs	r2, #136	@ 0x88
 8004046:	589b      	ldr	r3, [r3, r2]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2284      	movs	r2, #132	@ 0x84
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f7fd fd22 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2288      	movs	r2, #136	@ 0x88
 8004060:	2124      	movs	r1, #36	@ 0x24
 8004062:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2101      	movs	r1, #1
 8004070:	438a      	bics	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0018      	movs	r0, r3
 8004080:	f000 fae6 	bl	8004650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 f93e 	bl	8004308 <UART_SetConfig>
 800408c:	0003      	movs	r3, r0
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e01c      	b.n	80040d0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	490d      	ldr	r1, [pc, #52]	@ (80040d8 <HAL_UART_Init+0xa8>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	212a      	movs	r1, #42	@ 0x2a
 80040b2:	438a      	bics	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2101      	movs	r1, #1
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 fb75 	bl	80047b8 <UART_CheckIdleState>
 80040ce:	0003      	movs	r3, r0
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	ffffb7ff 	.word	0xffffb7ff

080040dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	1dbb      	adds	r3, r7, #6
 80040ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2288      	movs	r2, #136	@ 0x88
 80040f0:	589b      	ldr	r3, [r3, r2]
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d000      	beq.n	80040f8 <HAL_UART_Transmit+0x1c>
 80040f6:	e090      	b.n	800421a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_UART_Transmit+0x2a>
 80040fe:	1dbb      	adds	r3, r7, #6
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e088      	b.n	800421c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	015b      	lsls	r3, r3, #5
 8004112:	429a      	cmp	r2, r3
 8004114:	d109      	bne.n	800412a <HAL_UART_Transmit+0x4e>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	d001      	beq.n	800412a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e078      	b.n	800421c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2290      	movs	r2, #144	@ 0x90
 800412e:	2100      	movs	r1, #0
 8004130:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2288      	movs	r2, #136	@ 0x88
 8004136:	2121      	movs	r1, #33	@ 0x21
 8004138:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd fe0f 	bl	8001d5c <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1dba      	adds	r2, r7, #6
 8004146:	2154      	movs	r1, #84	@ 0x54
 8004148:	8812      	ldrh	r2, [r2, #0]
 800414a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1dba      	adds	r2, r7, #6
 8004150:	2156      	movs	r1, #86	@ 0x56
 8004152:	8812      	ldrh	r2, [r2, #0]
 8004154:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	015b      	lsls	r3, r3, #5
 800415e:	429a      	cmp	r2, r3
 8004160:	d108      	bne.n	8004174 <HAL_UART_Transmit+0x98>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e003      	b.n	800417c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800417c:	e030      	b.n	80041e0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	0013      	movs	r3, r2
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	@ 0x80
 800418c:	f000 fbbe 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d005      	beq.n	80041a0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2288      	movs	r2, #136	@ 0x88
 8004198:	2120      	movs	r1, #32
 800419a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e03d      	b.n	800421c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	001a      	movs	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	05d2      	lsls	r2, r2, #23
 80041b2:	0dd2      	lsrs	r2, r2, #23
 80041b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3302      	adds	r3, #2
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	e007      	b.n	80041ce <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2256      	movs	r2, #86	@ 0x56
 80041d2:	5a9b      	ldrh	r3, [r3, r2]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b299      	uxth	r1, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2256      	movs	r2, #86	@ 0x56
 80041de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2256      	movs	r2, #86	@ 0x56
 80041e4:	5a9b      	ldrh	r3, [r3, r2]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1c8      	bne.n	800417e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0013      	movs	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	2140      	movs	r1, #64	@ 0x40
 80041fa:	f000 fb87 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d005      	beq.n	800420e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2288      	movs	r2, #136	@ 0x88
 8004206:	2120      	movs	r1, #32
 8004208:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e006      	b.n	800421c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2288      	movs	r2, #136	@ 0x88
 8004212:	2120      	movs	r1, #32
 8004214:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b008      	add	sp, #32
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	1dbb      	adds	r3, r7, #6
 8004230:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	228c      	movs	r2, #140	@ 0x8c
 8004236:	589b      	ldr	r3, [r3, r2]
 8004238:	2b20      	cmp	r3, #32
 800423a:	d145      	bne.n	80042c8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_UART_Receive_IT+0x26>
 8004242:	1dbb      	adds	r3, r7, #6
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e03d      	b.n	80042ca <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	2380      	movs	r3, #128	@ 0x80
 8004254:	015b      	lsls	r3, r3, #5
 8004256:	429a      	cmp	r2, r3
 8004258:	d109      	bne.n	800426e <HAL_UART_Receive_IT+0x4a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2201      	movs	r2, #1
 8004266:	4013      	ands	r3, r2
 8004268:	d001      	beq.n	800426e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e02d      	b.n	80042ca <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	2380      	movs	r3, #128	@ 0x80
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	4013      	ands	r3, r2
 8004280:	d019      	beq.n	80042b6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004282:	f3ef 8310 	mrs	r3, PRIMASK
 8004286:	613b      	str	r3, [r7, #16]
  return(result);
 8004288:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2180      	movs	r1, #128	@ 0x80
 80042a4:	04c9      	lsls	r1, r1, #19
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f383 8810 	msr	PRIMASK, r3
}
 80042b4:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042b6:	1dbb      	adds	r3, r7, #6
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 fb94 	bl	80049ec <UART_Start_Receive_IT>
 80042c4:	0003      	movs	r3, r0
 80042c6:	e000      	b.n	80042ca <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
  }
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b008      	add	sp, #32
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	000a      	movs	r2, r1
 80042fc:	1cbb      	adds	r3, r7, #2
 80042fe:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004300:	46c0      	nop			@ (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004310:	231a      	movs	r3, #26
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4313      	orrs	r3, r2
 800432e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4abc      	ldr	r2, [pc, #752]	@ (8004628 <UART_SetConfig+0x320>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4ab7      	ldr	r2, [pc, #732]	@ (800462c <UART_SetConfig+0x324>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	4313      	orrs	r3, r2
 800436c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4aae      	ldr	r2, [pc, #696]	@ (8004630 <UART_SetConfig+0x328>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	220f      	movs	r2, #15
 800438c:	4393      	bics	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4aa4      	ldr	r2, [pc, #656]	@ (8004634 <UART_SetConfig+0x32c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d127      	bne.n	80043f6 <UART_SetConfig+0xee>
 80043a6:	4ba4      	ldr	r3, [pc, #656]	@ (8004638 <UART_SetConfig+0x330>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	2203      	movs	r2, #3
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d017      	beq.n	80043e2 <UART_SetConfig+0xda>
 80043b2:	d81b      	bhi.n	80043ec <UART_SetConfig+0xe4>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d00a      	beq.n	80043ce <UART_SetConfig+0xc6>
 80043b8:	d818      	bhi.n	80043ec <UART_SetConfig+0xe4>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <UART_SetConfig+0xbc>
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d00a      	beq.n	80043d8 <UART_SetConfig+0xd0>
 80043c2:	e013      	b.n	80043ec <UART_SetConfig+0xe4>
 80043c4:	231b      	movs	r3, #27
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e058      	b.n	8004480 <UART_SetConfig+0x178>
 80043ce:	231b      	movs	r3, #27
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e053      	b.n	8004480 <UART_SetConfig+0x178>
 80043d8:	231b      	movs	r3, #27
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2204      	movs	r2, #4
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e04e      	b.n	8004480 <UART_SetConfig+0x178>
 80043e2:	231b      	movs	r3, #27
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	2208      	movs	r2, #8
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e049      	b.n	8004480 <UART_SetConfig+0x178>
 80043ec:	231b      	movs	r3, #27
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	2210      	movs	r2, #16
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e044      	b.n	8004480 <UART_SetConfig+0x178>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a90      	ldr	r2, [pc, #576]	@ (800463c <UART_SetConfig+0x334>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d127      	bne.n	8004450 <UART_SetConfig+0x148>
 8004400:	4b8d      	ldr	r3, [pc, #564]	@ (8004638 <UART_SetConfig+0x330>)
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	220c      	movs	r2, #12
 8004406:	4013      	ands	r3, r2
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d017      	beq.n	800443c <UART_SetConfig+0x134>
 800440c:	d81b      	bhi.n	8004446 <UART_SetConfig+0x13e>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d00a      	beq.n	8004428 <UART_SetConfig+0x120>
 8004412:	d818      	bhi.n	8004446 <UART_SetConfig+0x13e>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <UART_SetConfig+0x116>
 8004418:	2b04      	cmp	r3, #4
 800441a:	d00a      	beq.n	8004432 <UART_SetConfig+0x12a>
 800441c:	e013      	b.n	8004446 <UART_SetConfig+0x13e>
 800441e:	231b      	movs	r3, #27
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e02b      	b.n	8004480 <UART_SetConfig+0x178>
 8004428:	231b      	movs	r3, #27
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	2202      	movs	r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e026      	b.n	8004480 <UART_SetConfig+0x178>
 8004432:	231b      	movs	r3, #27
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2204      	movs	r2, #4
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e021      	b.n	8004480 <UART_SetConfig+0x178>
 800443c:	231b      	movs	r3, #27
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	2208      	movs	r2, #8
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e01c      	b.n	8004480 <UART_SetConfig+0x178>
 8004446:	231b      	movs	r3, #27
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	2210      	movs	r2, #16
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e017      	b.n	8004480 <UART_SetConfig+0x178>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7a      	ldr	r2, [pc, #488]	@ (8004640 <UART_SetConfig+0x338>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d104      	bne.n	8004464 <UART_SetConfig+0x15c>
 800445a:	231b      	movs	r3, #27
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e00d      	b.n	8004480 <UART_SetConfig+0x178>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a76      	ldr	r2, [pc, #472]	@ (8004644 <UART_SetConfig+0x33c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d104      	bne.n	8004478 <UART_SetConfig+0x170>
 800446e:	231b      	movs	r3, #27
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e003      	b.n	8004480 <UART_SetConfig+0x178>
 8004478:	231b      	movs	r3, #27
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2210      	movs	r2, #16
 800447e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	429a      	cmp	r2, r3
 800448a:	d000      	beq.n	800448e <UART_SetConfig+0x186>
 800448c:	e065      	b.n	800455a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800448e:	231b      	movs	r3, #27
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d015      	beq.n	80044c4 <UART_SetConfig+0x1bc>
 8004498:	dc18      	bgt.n	80044cc <UART_SetConfig+0x1c4>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00d      	beq.n	80044ba <UART_SetConfig+0x1b2>
 800449e:	dc15      	bgt.n	80044cc <UART_SetConfig+0x1c4>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <UART_SetConfig+0x1a2>
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d005      	beq.n	80044b4 <UART_SetConfig+0x1ac>
 80044a8:	e010      	b.n	80044cc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044aa:	f7fe fbab 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 80044ae:	0003      	movs	r3, r0
 80044b0:	617b      	str	r3, [r7, #20]
        break;
 80044b2:	e012      	b.n	80044da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b64      	ldr	r3, [pc, #400]	@ (8004648 <UART_SetConfig+0x340>)
 80044b6:	617b      	str	r3, [r7, #20]
        break;
 80044b8:	e00f      	b.n	80044da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe fb17 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 80044be:	0003      	movs	r3, r0
 80044c0:	617b      	str	r3, [r7, #20]
        break;
 80044c2:	e00a      	b.n	80044da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	617b      	str	r3, [r7, #20]
        break;
 80044ca:	e006      	b.n	80044da <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044d0:	231a      	movs	r3, #26
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
        break;
 80044d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d100      	bne.n	80044e2 <UART_SetConfig+0x1da>
 80044e0:	e08d      	b.n	80045fe <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e6:	4b59      	ldr	r3, [pc, #356]	@ (800464c <UART_SetConfig+0x344>)
 80044e8:	0052      	lsls	r2, r2, #1
 80044ea:	5ad3      	ldrh	r3, [r2, r3]
 80044ec:	0019      	movs	r1, r3
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f7fb fe18 	bl	8000124 <__udivsi3>
 80044f4:	0003      	movs	r3, r0
 80044f6:	005a      	lsls	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	18d2      	adds	r2, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0019      	movs	r1, r3
 8004506:	0010      	movs	r0, r2
 8004508:	f7fb fe0c 	bl	8000124 <__udivsi3>
 800450c:	0003      	movs	r3, r0
 800450e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d91c      	bls.n	8004550 <UART_SetConfig+0x248>
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	025b      	lsls	r3, r3, #9
 800451c:	429a      	cmp	r2, r3
 800451e:	d217      	bcs.n	8004550 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	b29a      	uxth	r2, r3
 8004524:	200e      	movs	r0, #14
 8004526:	183b      	adds	r3, r7, r0
 8004528:	210f      	movs	r1, #15
 800452a:	438a      	bics	r2, r1
 800452c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	b29b      	uxth	r3, r3
 8004534:	2207      	movs	r2, #7
 8004536:	4013      	ands	r3, r2
 8004538:	b299      	uxth	r1, r3
 800453a:	183b      	adds	r3, r7, r0
 800453c:	183a      	adds	r2, r7, r0
 800453e:	8812      	ldrh	r2, [r2, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	183a      	adds	r2, r7, r0
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e056      	b.n	80045fe <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	231a      	movs	r3, #26
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	e051      	b.n	80045fe <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800455a:	231b      	movs	r3, #27
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d015      	beq.n	8004590 <UART_SetConfig+0x288>
 8004564:	dc18      	bgt.n	8004598 <UART_SetConfig+0x290>
 8004566:	2b04      	cmp	r3, #4
 8004568:	d00d      	beq.n	8004586 <UART_SetConfig+0x27e>
 800456a:	dc15      	bgt.n	8004598 <UART_SetConfig+0x290>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <UART_SetConfig+0x26e>
 8004570:	2b02      	cmp	r3, #2
 8004572:	d005      	beq.n	8004580 <UART_SetConfig+0x278>
 8004574:	e010      	b.n	8004598 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004576:	f7fe fb45 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 800457a:	0003      	movs	r3, r0
 800457c:	617b      	str	r3, [r7, #20]
        break;
 800457e:	e012      	b.n	80045a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <UART_SetConfig+0x340>)
 8004582:	617b      	str	r3, [r7, #20]
        break;
 8004584:	e00f      	b.n	80045a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe fab1 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 800458a:	0003      	movs	r3, r0
 800458c:	617b      	str	r3, [r7, #20]
        break;
 800458e:	e00a      	b.n	80045a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	617b      	str	r3, [r7, #20]
        break;
 8004596:	e006      	b.n	80045a6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800459c:	231a      	movs	r3, #26
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
        break;
 80045a4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d028      	beq.n	80045fe <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045b0:	4b26      	ldr	r3, [pc, #152]	@ (800464c <UART_SetConfig+0x344>)
 80045b2:	0052      	lsls	r2, r2, #1
 80045b4:	5ad3      	ldrh	r3, [r2, r3]
 80045b6:	0019      	movs	r1, r3
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f7fb fdb3 	bl	8000124 <__udivsi3>
 80045be:	0003      	movs	r3, r0
 80045c0:	001a      	movs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	18d2      	adds	r2, r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	0019      	movs	r1, r3
 80045d0:	0010      	movs	r0, r2
 80045d2:	f7fb fda7 	bl	8000124 <__udivsi3>
 80045d6:	0003      	movs	r3, r0
 80045d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b0f      	cmp	r3, #15
 80045de:	d90a      	bls.n	80045f6 <UART_SetConfig+0x2ee>
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	025b      	lsls	r3, r3, #9
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d205      	bcs.n	80045f6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e003      	b.n	80045fe <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80045f6:	231a      	movs	r3, #26
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	226a      	movs	r2, #106	@ 0x6a
 8004602:	2101      	movs	r1, #1
 8004604:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2268      	movs	r2, #104	@ 0x68
 800460a:	2101      	movs	r1, #1
 800460c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800461a:	231a      	movs	r3, #26
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	781b      	ldrb	r3, [r3, #0]
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b008      	add	sp, #32
 8004626:	bd80      	pop	{r7, pc}
 8004628:	cfff69f3 	.word	0xcfff69f3
 800462c:	ffffcfff 	.word	0xffffcfff
 8004630:	11fff4ff 	.word	0x11fff4ff
 8004634:	40013800 	.word	0x40013800
 8004638:	40021000 	.word	0x40021000
 800463c:	40004400 	.word	0x40004400
 8004640:	40004800 	.word	0x40004800
 8004644:	40004c00 	.word	0x40004c00
 8004648:	00f42400 	.word	0x00f42400
 800464c:	080063f0 	.word	0x080063f0

08004650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	2208      	movs	r2, #8
 800465e:	4013      	ands	r3, r2
 8004660:	d00b      	beq.n	800467a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a4a      	ldr	r2, [pc, #296]	@ (8004794 <UART_AdvFeatureConfig+0x144>)
 800466a:	4013      	ands	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	d00b      	beq.n	800469c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4a43      	ldr	r2, [pc, #268]	@ (8004798 <UART_AdvFeatureConfig+0x148>)
 800468c:	4013      	ands	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	2202      	movs	r2, #2
 80046a2:	4013      	ands	r3, r2
 80046a4:	d00b      	beq.n	80046be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a3b      	ldr	r2, [pc, #236]	@ (800479c <UART_AdvFeatureConfig+0x14c>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	2204      	movs	r2, #4
 80046c4:	4013      	ands	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4a34      	ldr	r2, [pc, #208]	@ (80047a0 <UART_AdvFeatureConfig+0x150>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	0019      	movs	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	2210      	movs	r2, #16
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00b      	beq.n	8004702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a2c      	ldr	r2, [pc, #176]	@ (80047a4 <UART_AdvFeatureConfig+0x154>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	d00b      	beq.n	8004724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4a25      	ldr	r2, [pc, #148]	@ (80047a8 <UART_AdvFeatureConfig+0x158>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	2240      	movs	r2, #64	@ 0x40
 800472a:	4013      	ands	r3, r2
 800472c:	d01d      	beq.n	800476a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <UART_AdvFeatureConfig+0x15c>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	035b      	lsls	r3, r3, #13
 800474e:	429a      	cmp	r2, r3
 8004750:	d10b      	bne.n	800476a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <UART_AdvFeatureConfig+0x160>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	2280      	movs	r2, #128	@ 0x80
 8004770:	4013      	ands	r3, r2
 8004772:	d00b      	beq.n	800478c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4a0e      	ldr	r2, [pc, #56]	@ (80047b4 <UART_AdvFeatureConfig+0x164>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }
}
 800478c:	46c0      	nop			@ (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffff7fff 	.word	0xffff7fff
 8004798:	fffdffff 	.word	0xfffdffff
 800479c:	fffeffff 	.word	0xfffeffff
 80047a0:	fffbffff 	.word	0xfffbffff
 80047a4:	ffffefff 	.word	0xffffefff
 80047a8:	ffffdfff 	.word	0xffffdfff
 80047ac:	ffefffff 	.word	0xffefffff
 80047b0:	ff9fffff 	.word	0xff9fffff
 80047b4:	fff7ffff 	.word	0xfff7ffff

080047b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b092      	sub	sp, #72	@ 0x48
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2290      	movs	r2, #144	@ 0x90
 80047c4:	2100      	movs	r1, #0
 80047c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c8:	f7fd fac8 	bl	8001d5c <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2208      	movs	r2, #8
 80047d8:	4013      	ands	r3, r2
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d12d      	bne.n	800483a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	0391      	lsls	r1, r2, #14
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4a47      	ldr	r2, [pc, #284]	@ (8004904 <UART_CheckIdleState+0x14c>)
 80047e8:	9200      	str	r2, [sp, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f000 f88e 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 80047f0:	1e03      	subs	r3, r0, #0
 80047f2:	d022      	beq.n	800483a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f4:	f3ef 8310 	mrs	r3, PRIMASK
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80047fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047fe:	2301      	movs	r3, #1
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	46c0      	nop			@ (mov r8, r8)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	438a      	bics	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2288      	movs	r2, #136	@ 0x88
 800482a:	2120      	movs	r1, #32
 800482c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2284      	movs	r2, #132	@ 0x84
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e060      	b.n	80048fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2204      	movs	r2, #4
 8004842:	4013      	ands	r3, r2
 8004844:	2b04      	cmp	r3, #4
 8004846:	d146      	bne.n	80048d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	03d1      	lsls	r1, r2, #15
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <UART_CheckIdleState+0x14c>)
 8004852:	9200      	str	r2, [sp, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	f000 f859 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 800485a:	1e03      	subs	r3, r0, #0
 800485c:	d03b      	beq.n	80048d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485e:	f3ef 8310 	mrs	r3, PRIMASK
 8004862:	60fb      	str	r3, [r7, #12]
  return(result);
 8004864:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
 8004868:	2301      	movs	r3, #1
 800486a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f383 8810 	msr	PRIMASK, r3
}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4922      	ldr	r1, [pc, #136]	@ (8004908 <UART_CheckIdleState+0x150>)
 8004880:	400a      	ands	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f383 8810 	msr	PRIMASK, r3
}
 800488e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004890:	f3ef 8310 	mrs	r3, PRIMASK
 8004894:	61bb      	str	r3, [r7, #24]
  return(result);
 8004896:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30
 800489a:	2301      	movs	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	438a      	bics	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	228c      	movs	r2, #140	@ 0x8c
 80048c6:	2120      	movs	r1, #32
 80048c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2284      	movs	r2, #132	@ 0x84
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e012      	b.n	80048fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2288      	movs	r2, #136	@ 0x88
 80048da:	2120      	movs	r1, #32
 80048dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	228c      	movs	r2, #140	@ 0x8c
 80048e2:	2120      	movs	r1, #32
 80048e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2284      	movs	r2, #132	@ 0x84
 80048f6:	2100      	movs	r1, #0
 80048f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b010      	add	sp, #64	@ 0x40
 8004902:	bd80      	pop	{r7, pc}
 8004904:	01ffffff 	.word	0x01ffffff
 8004908:	fffffedf 	.word	0xfffffedf

0800490c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	1dfb      	adds	r3, r7, #7
 800491a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	e051      	b.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3301      	adds	r3, #1
 8004922:	d04e      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fd fa1a 	bl	8001d5c <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e051      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2204      	movs	r2, #4
 8004946:	4013      	ands	r3, r2
 8004948:	d03b      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b80      	cmp	r3, #128	@ 0x80
 800494e:	d038      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d035      	beq.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2208      	movs	r2, #8
 800495e:	4013      	ands	r3, r2
 8004960:	2b08      	cmp	r3, #8
 8004962:	d111      	bne.n	8004988 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2208      	movs	r2, #8
 800496a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	0018      	movs	r0, r3
 8004970:	f000 f960 	bl	8004c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2290      	movs	r2, #144	@ 0x90
 8004978:	2108      	movs	r1, #8
 800497a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2284      	movs	r2, #132	@ 0x84
 8004980:	2100      	movs	r1, #0
 8004982:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e02c      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	2380      	movs	r3, #128	@ 0x80
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	401a      	ands	r2, r3
 8004994:	2380      	movs	r3, #128	@ 0x80
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	429a      	cmp	r2, r3
 800499a:	d112      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2280      	movs	r2, #128	@ 0x80
 80049a2:	0112      	lsls	r2, r2, #4
 80049a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 f943 	bl	8004c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2290      	movs	r2, #144	@ 0x90
 80049b2:	2120      	movs	r1, #32
 80049b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2284      	movs	r2, #132	@ 0x84
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e00f      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	425a      	negs	r2, r3
 80049d2:	4153      	adcs	r3, r2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	001a      	movs	r2, r3
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d09e      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b004      	add	sp, #16
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b098      	sub	sp, #96	@ 0x60
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	1dbb      	adds	r3, r7, #6
 80049f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1dba      	adds	r2, r7, #6
 8004a04:	215c      	movs	r1, #92	@ 0x5c
 8004a06:	8812      	ldrh	r2, [r2, #0]
 8004a08:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1dba      	adds	r2, r7, #6
 8004a0e:	215e      	movs	r1, #94	@ 0x5e
 8004a10:	8812      	ldrh	r2, [r2, #0]
 8004a12:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	015b      	lsls	r3, r3, #5
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10d      	bne.n	8004a42 <UART_Start_Receive_IT+0x56>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <UART_Start_Receive_IT+0x4c>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2260      	movs	r2, #96	@ 0x60
 8004a32:	497b      	ldr	r1, [pc, #492]	@ (8004c20 <UART_Start_Receive_IT+0x234>)
 8004a34:	5299      	strh	r1, [r3, r2]
 8004a36:	e02e      	b.n	8004a96 <UART_Start_Receive_IT+0xaa>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2260      	movs	r2, #96	@ 0x60
 8004a3c:	21ff      	movs	r1, #255	@ 0xff
 8004a3e:	5299      	strh	r1, [r3, r2]
 8004a40:	e029      	b.n	8004a96 <UART_Start_Receive_IT+0xaa>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <UART_Start_Receive_IT+0x7a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <UART_Start_Receive_IT+0x70>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2260      	movs	r2, #96	@ 0x60
 8004a56:	21ff      	movs	r1, #255	@ 0xff
 8004a58:	5299      	strh	r1, [r3, r2]
 8004a5a:	e01c      	b.n	8004a96 <UART_Start_Receive_IT+0xaa>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2260      	movs	r2, #96	@ 0x60
 8004a60:	217f      	movs	r1, #127	@ 0x7f
 8004a62:	5299      	strh	r1, [r3, r2]
 8004a64:	e017      	b.n	8004a96 <UART_Start_Receive_IT+0xaa>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	055b      	lsls	r3, r3, #21
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d10d      	bne.n	8004a8e <UART_Start_Receive_IT+0xa2>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <UART_Start_Receive_IT+0x98>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2260      	movs	r2, #96	@ 0x60
 8004a7e:	217f      	movs	r1, #127	@ 0x7f
 8004a80:	5299      	strh	r1, [r3, r2]
 8004a82:	e008      	b.n	8004a96 <UART_Start_Receive_IT+0xaa>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2260      	movs	r2, #96	@ 0x60
 8004a88:	213f      	movs	r1, #63	@ 0x3f
 8004a8a:	5299      	strh	r1, [r3, r2]
 8004a8c:	e003      	b.n	8004a96 <UART_Start_Receive_IT+0xaa>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2260      	movs	r2, #96	@ 0x60
 8004a92:	2100      	movs	r1, #0
 8004a94:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2290      	movs	r2, #144	@ 0x90
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	228c      	movs	r2, #140	@ 0x8c
 8004aa2:	2122      	movs	r1, #34	@ 0x22
 8004aa4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab6:	f383 8810 	msr	PRIMASK, r3
}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad2:	f383 8810 	msr	PRIMASK, r3
}
 8004ad6:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	059b      	lsls	r3, r3, #22
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d150      	bne.n	8004b86 <UART_Start_Receive_IT+0x19a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2268      	movs	r2, #104	@ 0x68
 8004ae8:	5a9b      	ldrh	r3, [r3, r2]
 8004aea:	1dba      	adds	r2, r7, #6
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d349      	bcc.n	8004b86 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	2380      	movs	r3, #128	@ 0x80
 8004af8:	015b      	lsls	r3, r3, #5
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d107      	bne.n	8004b0e <UART_Start_Receive_IT+0x122>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a46      	ldr	r2, [pc, #280]	@ (8004c24 <UART_Start_Receive_IT+0x238>)
 8004b0a:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b0c:	e002      	b.n	8004b14 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a45      	ldr	r2, [pc, #276]	@ (8004c28 <UART_Start_Receive_IT+0x23c>)
 8004b12:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d019      	beq.n	8004b50 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b26:	2301      	movs	r3, #1
 8004b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	f383 8810 	msr	PRIMASK, r3
}
 8004b30:	46c0      	nop			@ (mov r8, r8)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2180      	movs	r1, #128	@ 0x80
 8004b3e:	0049      	lsls	r1, r1, #1
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b58:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2180      	movs	r1, #128	@ 0x80
 8004b72:	0549      	lsls	r1, r1, #21
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	f383 8810 	msr	PRIMASK, r3
}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	e047      	b.n	8004c16 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	015b      	lsls	r3, r3, #5
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d107      	bne.n	8004ba2 <UART_Start_Receive_IT+0x1b6>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	@ (8004c2c <UART_Start_Receive_IT+0x240>)
 8004b9e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ba0:	e002      	b.n	8004ba8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a22      	ldr	r2, [pc, #136]	@ (8004c30 <UART_Start_Receive_IT+0x244>)
 8004ba6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d019      	beq.n	8004be4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bba:	2301      	movs	r3, #1
 8004bbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	46c0      	nop			@ (mov r8, r8)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2190      	movs	r1, #144	@ 0x90
 8004bd2:	0049      	lsls	r1, r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	e018      	b.n	8004c16 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	613b      	str	r3, [r7, #16]
  return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bee:	2301      	movs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			@ (mov r8, r8)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2120      	movs	r1, #32
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b018      	add	sp, #96	@ 0x60
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	000001ff 	.word	0x000001ff
 8004c24:	080053a1 	.word	0x080053a1
 8004c28:	08005071 	.word	0x08005071
 8004c2c:	08004eb9 	.word	0x08004eb9
 8004c30:	08004d01 	.word	0x08004d01

08004c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	@ 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c40:	617b      	str	r3, [r7, #20]
  return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c46:	2301      	movs	r3, #1
 8004c48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f383 8810 	msr	PRIMASK, r3
}
 8004c50:	46c0      	nop			@ (mov r8, r8)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4926      	ldr	r1, [pc, #152]	@ (8004cf8 <UART_EndRxTransfer+0xc4>)
 8004c5e:	400a      	ands	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c72:	623b      	str	r3, [r7, #32]
  return(result);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c78:	2301      	movs	r3, #1
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	491b      	ldr	r1, [pc, #108]	@ (8004cfc <UART_EndRxTransfer+0xc8>)
 8004c90:	400a      	ands	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	f383 8810 	msr	PRIMASK, r3
}
 8004c9e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d118      	bne.n	8004cda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2110      	movs	r1, #16
 8004cca:	438a      	bics	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	228c      	movs	r2, #140	@ 0x8c
 8004cde:	2120      	movs	r1, #32
 8004ce0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b00e      	add	sp, #56	@ 0x38
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	fffffedf 	.word	0xfffffedf
 8004cfc:	effffffe 	.word	0xeffffffe

08004d00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b094      	sub	sp, #80	@ 0x50
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d08:	204e      	movs	r0, #78	@ 0x4e
 8004d0a:	183b      	adds	r3, r7, r0
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	2160      	movs	r1, #96	@ 0x60
 8004d10:	5a52      	ldrh	r2, [r2, r1]
 8004d12:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	228c      	movs	r2, #140	@ 0x8c
 8004d18:	589b      	ldr	r3, [r3, r2]
 8004d1a:	2b22      	cmp	r3, #34	@ 0x22
 8004d1c:	d000      	beq.n	8004d20 <UART_RxISR_8BIT+0x20>
 8004d1e:	e0ba      	b.n	8004e96 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d26:	214c      	movs	r1, #76	@ 0x4c
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b2d9      	uxtb	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	225e      	movs	r2, #94	@ 0x5e
 8004d50:	5a9b      	ldrh	r3, [r3, r2]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b299      	uxth	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	225e      	movs	r2, #94	@ 0x5e
 8004d5c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	225e      	movs	r2, #94	@ 0x5e
 8004d62:	5a9b      	ldrh	r3, [r3, r2]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d000      	beq.n	8004d6c <UART_RxISR_8BIT+0x6c>
 8004d6a:	e09c      	b.n	8004ea6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d76:	2301      	movs	r3, #1
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	f383 8810 	msr	PRIMASK, r3
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4948      	ldr	r1, [pc, #288]	@ (8004eb0 <UART_RxISR_8BIT+0x1b0>)
 8004d8e:	400a      	ands	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	f383 8810 	msr	PRIMASK, r3
}
 8004d9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004da2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da8:	2301      	movs	r3, #1
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dae:	f383 8810 	msr	PRIMASK, r3
}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	f383 8810 	msr	PRIMASK, r3
}
 8004dce:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	228c      	movs	r2, #140	@ 0x8c
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	4013      	ands	r3, r2
 8004df0:	d018      	beq.n	8004e24 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df2:	f3ef 8310 	mrs	r3, PRIMASK
 8004df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004df8:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f383 8810 	msr	PRIMASK, r3
}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4928      	ldr	r1, [pc, #160]	@ (8004eb4 <UART_RxISR_8BIT+0x1b4>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f383 8810 	msr	PRIMASK, r3
}
 8004e22:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d12f      	bne.n	8004e8c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e32:	f3ef 8310 	mrs	r3, PRIMASK
 8004e36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e38:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f383 8810 	msr	PRIMASK, r3
}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2110      	movs	r1, #16
 8004e54:	438a      	bics	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f383 8810 	msr	PRIMASK, r3
}
 8004e62:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d103      	bne.n	8004e7a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2210      	movs	r2, #16
 8004e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	225c      	movs	r2, #92	@ 0x5c
 8004e7e:	5a9a      	ldrh	r2, [r3, r2]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	0011      	movs	r1, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7ff fa34 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e8a:	e00c      	b.n	8004ea6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7ff fa1f 	bl	80042d2 <HAL_UART_RxCpltCallback>
}
 8004e94:	e007      	b.n	8004ea6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2108      	movs	r1, #8
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	619a      	str	r2, [r3, #24]
}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b014      	add	sp, #80	@ 0x50
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	fffffedf 	.word	0xfffffedf
 8004eb4:	fbffffff 	.word	0xfbffffff

08004eb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b094      	sub	sp, #80	@ 0x50
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ec0:	204e      	movs	r0, #78	@ 0x4e
 8004ec2:	183b      	adds	r3, r7, r0
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	2160      	movs	r1, #96	@ 0x60
 8004ec8:	5a52      	ldrh	r2, [r2, r1]
 8004eca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	228c      	movs	r2, #140	@ 0x8c
 8004ed0:	589b      	ldr	r3, [r3, r2]
 8004ed2:	2b22      	cmp	r3, #34	@ 0x22
 8004ed4:	d000      	beq.n	8004ed8 <UART_RxISR_16BIT+0x20>
 8004ed6:	e0ba      	b.n	800504e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ede:	214c      	movs	r1, #76	@ 0x4c
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	183a      	adds	r2, r7, r0
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efe:	1c9a      	adds	r2, r3, #2
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	225e      	movs	r2, #94	@ 0x5e
 8004f08:	5a9b      	ldrh	r3, [r3, r2]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b299      	uxth	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	225e      	movs	r2, #94	@ 0x5e
 8004f14:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	225e      	movs	r2, #94	@ 0x5e
 8004f1a:	5a9b      	ldrh	r3, [r3, r2]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d000      	beq.n	8004f24 <UART_RxISR_16BIT+0x6c>
 8004f22:	e09c      	b.n	800505e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f24:	f3ef 8310 	mrs	r3, PRIMASK
 8004f28:	623b      	str	r3, [r7, #32]
  return(result);
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2e:	2301      	movs	r3, #1
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			@ (mov r8, r8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4948      	ldr	r1, [pc, #288]	@ (8005068 <UART_RxISR_16BIT+0x1b0>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f60:	2301      	movs	r3, #1
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2101      	movs	r1, #1
 8004f78:	438a      	bics	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	228c      	movs	r2, #140	@ 0x8c
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004faa:	f3ef 8310 	mrs	r3, PRIMASK
 8004fae:	617b      	str	r3, [r7, #20]
  return(result);
 8004fb0:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f383 8810 	msr	PRIMASK, r3
}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4928      	ldr	r1, [pc, #160]	@ (800506c <UART_RxISR_16BIT+0x1b4>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f383 8810 	msr	PRIMASK, r3
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d12f      	bne.n	8005044 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fea:	f3ef 8310 	mrs	r3, PRIMASK
 8004fee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ff0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f383 8810 	msr	PRIMASK, r3
}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2110      	movs	r1, #16
 800500c:	438a      	bics	r2, r1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	2210      	movs	r2, #16
 8005024:	4013      	ands	r3, r2
 8005026:	2b10      	cmp	r3, #16
 8005028:	d103      	bne.n	8005032 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	225c      	movs	r2, #92	@ 0x5c
 8005036:	5a9a      	ldrh	r2, [r3, r2]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	0011      	movs	r1, r2
 800503c:	0018      	movs	r0, r3
 800503e:	f7ff f958 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005042:	e00c      	b.n	800505e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff f943 	bl	80042d2 <HAL_UART_RxCpltCallback>
}
 800504c:	e007      	b.n	800505e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2108      	movs	r1, #8
 800505a:	430a      	orrs	r2, r1
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b014      	add	sp, #80	@ 0x50
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	fffffedf 	.word	0xfffffedf
 800506c:	fbffffff 	.word	0xfbffffff

08005070 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b0a0      	sub	sp, #128	@ 0x80
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005078:	237a      	movs	r3, #122	@ 0x7a
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	2160      	movs	r1, #96	@ 0x60
 8005080:	5a52      	ldrh	r2, [r2, r1]
 8005082:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	228c      	movs	r2, #140	@ 0x8c
 80050a0:	589b      	ldr	r3, [r3, r2]
 80050a2:	2b22      	cmp	r3, #34	@ 0x22
 80050a4:	d000      	beq.n	80050a8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80050a6:	e165      	b.n	8005374 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050a8:	236e      	movs	r3, #110	@ 0x6e
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	2168      	movs	r1, #104	@ 0x68
 80050b0:	5a52      	ldrh	r2, [r2, r1]
 80050b2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050b4:	e10c      	b.n	80052d0 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050bc:	216c      	movs	r1, #108	@ 0x6c
 80050be:	187b      	adds	r3, r7, r1
 80050c0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050c2:	187b      	adds	r3, r7, r1
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	237a      	movs	r3, #122	@ 0x7a
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b2d9      	uxtb	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d4:	400a      	ands	r2, r1
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	225e      	movs	r2, #94	@ 0x5e
 80050e8:	5a9b      	ldrh	r3, [r3, r2]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b299      	uxth	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	225e      	movs	r2, #94	@ 0x5e
 80050f4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005100:	2207      	movs	r2, #7
 8005102:	4013      	ands	r3, r2
 8005104:	d049      	beq.n	800519a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	d010      	beq.n	8005130 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800510e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4013      	ands	r3, r2
 8005116:	d00b      	beq.n	8005130 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2201      	movs	r2, #1
 800511e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2290      	movs	r2, #144	@ 0x90
 8005124:	589b      	ldr	r3, [r3, r2]
 8005126:	2201      	movs	r2, #1
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2190      	movs	r1, #144	@ 0x90
 800512e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005132:	2202      	movs	r2, #2
 8005134:	4013      	ands	r3, r2
 8005136:	d00f      	beq.n	8005158 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800513a:	2201      	movs	r2, #1
 800513c:	4013      	ands	r3, r2
 800513e:	d00b      	beq.n	8005158 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2202      	movs	r2, #2
 8005146:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2290      	movs	r2, #144	@ 0x90
 800514c:	589b      	ldr	r3, [r3, r2]
 800514e:	2204      	movs	r2, #4
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2190      	movs	r1, #144	@ 0x90
 8005156:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005158:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800515a:	2204      	movs	r2, #4
 800515c:	4013      	ands	r3, r2
 800515e:	d00f      	beq.n	8005180 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005162:	2201      	movs	r2, #1
 8005164:	4013      	ands	r3, r2
 8005166:	d00b      	beq.n	8005180 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2204      	movs	r2, #4
 800516e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2290      	movs	r2, #144	@ 0x90
 8005174:	589b      	ldr	r3, [r3, r2]
 8005176:	2202      	movs	r2, #2
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2190      	movs	r1, #144	@ 0x90
 800517e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2290      	movs	r2, #144	@ 0x90
 8005184:	589b      	ldr	r3, [r3, r2]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f7ff f8a8 	bl	80042e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2290      	movs	r2, #144	@ 0x90
 8005196:	2100      	movs	r1, #0
 8005198:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	225e      	movs	r2, #94	@ 0x5e
 800519e:	5a9b      	ldrh	r3, [r3, r2]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d000      	beq.n	80051a8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80051a6:	e093      	b.n	80052d0 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051b2:	2301      	movs	r3, #1
 80051b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	46c0      	nop			@ (mov r8, r8)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4970      	ldr	r1, [pc, #448]	@ (800538c <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80051ca:	400a      	ands	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051da:	f3ef 8310 	mrs	r3, PRIMASK
 80051de:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80051e4:	2301      	movs	r3, #1
 80051e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ea:	f383 8810 	msr	PRIMASK, r3
}
 80051ee:	46c0      	nop			@ (mov r8, r8)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4965      	ldr	r1, [pc, #404]	@ (8005390 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	228c      	movs	r2, #140	@ 0x8c
 8005210:	2120      	movs	r1, #32
 8005212:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	4013      	ands	r3, r2
 800522c:	d018      	beq.n	8005260 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522e:	f3ef 8310 	mrs	r3, PRIMASK
 8005232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005236:	663b      	str	r3, [r7, #96]	@ 0x60
 8005238:	2301      	movs	r3, #1
 800523a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4951      	ldr	r1, [pc, #324]	@ (8005394 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005250:	400a      	ands	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	f383 8810 	msr	PRIMASK, r3
}
 800525e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d12f      	bne.n	80052c8 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8310 	mrs	r3, PRIMASK
 8005272:	623b      	str	r3, [r7, #32]
  return(result);
 8005274:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	f383 8810 	msr	PRIMASK, r3
}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2110      	movs	r1, #16
 8005290:	438a      	bics	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	2210      	movs	r2, #16
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d103      	bne.n	80052b6 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	225c      	movs	r2, #92	@ 0x5c
 80052ba:	5a9a      	ldrh	r2, [r3, r2]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7ff f816 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
 80052c6:	e003      	b.n	80052d0 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7ff f801 	bl	80042d2 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052d0:	236e      	movs	r3, #110	@ 0x6e
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <UART_RxISR_8BIT_FIFOEN+0x274>
 80052da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052dc:	2220      	movs	r2, #32
 80052de:	4013      	ands	r3, r2
 80052e0:	d000      	beq.n	80052e4 <UART_RxISR_8BIT_FIFOEN+0x274>
 80052e2:	e6e8      	b.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80052e4:	205a      	movs	r0, #90	@ 0x5a
 80052e6:	183b      	adds	r3, r7, r0
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	215e      	movs	r1, #94	@ 0x5e
 80052ec:	5a52      	ldrh	r2, [r2, r1]
 80052ee:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80052f0:	0001      	movs	r1, r0
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d044      	beq.n	8005384 <UART_RxISR_8BIT_FIFOEN+0x314>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2268      	movs	r2, #104	@ 0x68
 80052fe:	5a9b      	ldrh	r3, [r3, r2]
 8005300:	187a      	adds	r2, r7, r1
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d23d      	bcs.n	8005384 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8310 	mrs	r3, PRIMASK
 800530c:	60bb      	str	r3, [r7, #8]
  return(result);
 800530e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005310:	657b      	str	r3, [r7, #84]	@ 0x54
 8005312:	2301      	movs	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			@ (mov r8, r8)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	491b      	ldr	r1, [pc, #108]	@ (8005398 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800532a:	400a      	ands	r2, r1
 800532c:	609a      	str	r2, [r3, #8]
 800532e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a17      	ldr	r2, [pc, #92]	@ (800539c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800533e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005340:	f3ef 8310 	mrs	r3, PRIMASK
 8005344:	617b      	str	r3, [r7, #20]
  return(result);
 8005346:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005348:	653b      	str	r3, [r7, #80]	@ 0x50
 800534a:	2301      	movs	r3, #1
 800534c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			@ (mov r8, r8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2120      	movs	r1, #32
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005372:	e007      	b.n	8005384 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2108      	movs	r1, #8
 8005380:	430a      	orrs	r2, r1
 8005382:	619a      	str	r2, [r3, #24]
}
 8005384:	46c0      	nop			@ (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b020      	add	sp, #128	@ 0x80
 800538a:	bd80      	pop	{r7, pc}
 800538c:	fffffeff 	.word	0xfffffeff
 8005390:	effffffe 	.word	0xeffffffe
 8005394:	fbffffff 	.word	0xfbffffff
 8005398:	efffffff 	.word	0xefffffff
 800539c:	08004d01 	.word	0x08004d01

080053a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b0a2      	sub	sp, #136	@ 0x88
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80053a8:	2382      	movs	r3, #130	@ 0x82
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	2160      	movs	r1, #96	@ 0x60
 80053b0:	5a52      	ldrh	r2, [r2, r1]
 80053b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	2284      	movs	r2, #132	@ 0x84
 80053bc:	18ba      	adds	r2, r7, r2
 80053be:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	228c      	movs	r2, #140	@ 0x8c
 80053d4:	589b      	ldr	r3, [r3, r2]
 80053d6:	2b22      	cmp	r3, #34	@ 0x22
 80053d8:	d000      	beq.n	80053dc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80053da:	e16f      	b.n	80056bc <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80053dc:	2376      	movs	r3, #118	@ 0x76
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	2168      	movs	r1, #104	@ 0x68
 80053e4:	5a52      	ldrh	r2, [r2, r1]
 80053e6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053e8:	e114      	b.n	8005614 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f0:	2174      	movs	r1, #116	@ 0x74
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	2282      	movs	r2, #130	@ 0x82
 8005400:	18ba      	adds	r2, r7, r2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	4013      	ands	r3, r2
 8005408:	b29a      	uxth	r2, r3
 800540a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800540c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	225e      	movs	r2, #94	@ 0x5e
 800541c:	5a9b      	ldrh	r3, [r3, r2]
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b299      	uxth	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	225e      	movs	r2, #94	@ 0x5e
 8005428:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2184      	movs	r1, #132	@ 0x84
 8005432:	187a      	adds	r2, r7, r1
 8005434:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005436:	187b      	adds	r3, r7, r1
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2207      	movs	r2, #7
 800543c:	4013      	ands	r3, r2
 800543e:	d04e      	beq.n	80054de <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005440:	187b      	adds	r3, r7, r1
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2201      	movs	r2, #1
 8005446:	4013      	ands	r3, r2
 8005448:	d010      	beq.n	800546c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800544a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800544c:	2380      	movs	r3, #128	@ 0x80
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d00b      	beq.n	800546c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2201      	movs	r2, #1
 800545a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2290      	movs	r2, #144	@ 0x90
 8005460:	589b      	ldr	r3, [r3, r2]
 8005462:	2201      	movs	r2, #1
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2190      	movs	r1, #144	@ 0x90
 800546a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800546c:	2384      	movs	r3, #132	@ 0x84
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	d00f      	beq.n	8005498 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800547a:	2201      	movs	r2, #1
 800547c:	4013      	ands	r3, r2
 800547e:	d00b      	beq.n	8005498 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2202      	movs	r2, #2
 8005486:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2290      	movs	r2, #144	@ 0x90
 800548c:	589b      	ldr	r3, [r3, r2]
 800548e:	2204      	movs	r2, #4
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2190      	movs	r1, #144	@ 0x90
 8005496:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005498:	2384      	movs	r3, #132	@ 0x84
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2204      	movs	r2, #4
 80054a0:	4013      	ands	r3, r2
 80054a2:	d00f      	beq.n	80054c4 <UART_RxISR_16BIT_FIFOEN+0x124>
 80054a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054a6:	2201      	movs	r2, #1
 80054a8:	4013      	ands	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2204      	movs	r2, #4
 80054b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2290      	movs	r2, #144	@ 0x90
 80054b8:	589b      	ldr	r3, [r3, r2]
 80054ba:	2202      	movs	r2, #2
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2190      	movs	r1, #144	@ 0x90
 80054c2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2290      	movs	r2, #144	@ 0x90
 80054c8:	589b      	ldr	r3, [r3, r2]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f7fe ff06 	bl	80042e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2290      	movs	r2, #144	@ 0x90
 80054da:	2100      	movs	r1, #0
 80054dc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	225e      	movs	r2, #94	@ 0x5e
 80054e2:	5a9b      	ldrh	r3, [r3, r2]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d000      	beq.n	80054ec <UART_RxISR_16BIT_FIFOEN+0x14c>
 80054ea:	e093      	b.n	8005614 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ec:	f3ef 8310 	mrs	r3, PRIMASK
 80054f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80054f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054f6:	2301      	movs	r3, #1
 80054f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fc:	f383 8810 	msr	PRIMASK, r3
}
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4971      	ldr	r1, [pc, #452]	@ (80056d4 <UART_RxISR_16BIT_FIFOEN+0x334>)
 800550e:	400a      	ands	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005514:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005518:	f383 8810 	msr	PRIMASK, r3
}
 800551c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551e:	f3ef 8310 	mrs	r3, PRIMASK
 8005522:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005526:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005528:	2301      	movs	r3, #1
 800552a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800552e:	f383 8810 	msr	PRIMASK, r3
}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4966      	ldr	r1, [pc, #408]	@ (80056d8 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005540:	400a      	ands	r2, r1
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005546:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800554a:	f383 8810 	msr	PRIMASK, r3
}
 800554e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	228c      	movs	r2, #140	@ 0x8c
 8005554:	2120      	movs	r1, #32
 8005556:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	4013      	ands	r3, r2
 8005570:	d018      	beq.n	80055a4 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800557a:	667b      	str	r3, [r7, #100]	@ 0x64
 800557c:	2301      	movs	r3, #1
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4952      	ldr	r1, [pc, #328]	@ (80056dc <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005594:	400a      	ands	r2, r1
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d12f      	bne.n	800560c <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b2:	f3ef 8310 	mrs	r3, PRIMASK
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80055bc:	2301      	movs	r3, #1
 80055be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	f383 8810 	msr	PRIMASK, r3
}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2110      	movs	r1, #16
 80055d4:	438a      	bics	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2210      	movs	r2, #16
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d103      	bne.n	80055fa <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2210      	movs	r2, #16
 80055f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	225c      	movs	r2, #92	@ 0x5c
 80055fe:	5a9a      	ldrh	r2, [r3, r2]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0011      	movs	r1, r2
 8005604:	0018      	movs	r0, r3
 8005606:	f7fe fe74 	bl	80042f2 <HAL_UARTEx_RxEventCallback>
 800560a:	e003      	b.n	8005614 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f7fe fe5f 	bl	80042d2 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005614:	2376      	movs	r3, #118	@ 0x76
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d006      	beq.n	800562c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800561e:	2384      	movs	r3, #132	@ 0x84
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2220      	movs	r2, #32
 8005626:	4013      	ands	r3, r2
 8005628:	d000      	beq.n	800562c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800562a:	e6de      	b.n	80053ea <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800562c:	205e      	movs	r0, #94	@ 0x5e
 800562e:	183b      	adds	r3, r7, r0
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	215e      	movs	r1, #94	@ 0x5e
 8005634:	5a52      	ldrh	r2, [r2, r1]
 8005636:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005638:	0001      	movs	r1, r0
 800563a:	187b      	adds	r3, r7, r1
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d044      	beq.n	80056cc <UART_RxISR_16BIT_FIFOEN+0x32c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2268      	movs	r2, #104	@ 0x68
 8005646:	5a9b      	ldrh	r3, [r3, r2]
 8005648:	187a      	adds	r2, r7, r1
 800564a:	8812      	ldrh	r2, [r2, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d23d      	bcs.n	80056cc <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005650:	f3ef 8310 	mrs	r3, PRIMASK
 8005654:	60fb      	str	r3, [r7, #12]
  return(result);
 8005656:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800565a:	2301      	movs	r3, #1
 800565c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f383 8810 	msr	PRIMASK, r3
}
 8005664:	46c0      	nop			@ (mov r8, r8)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	491b      	ldr	r1, [pc, #108]	@ (80056e0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005672:	400a      	ands	r2, r1
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005678:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f383 8810 	msr	PRIMASK, r3
}
 8005680:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005686:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005688:	f3ef 8310 	mrs	r3, PRIMASK
 800568c:	61bb      	str	r3, [r7, #24]
  return(result);
 800568e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005690:	657b      	str	r3, [r7, #84]	@ 0x54
 8005692:	2301      	movs	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			@ (mov r8, r8)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2120      	movs	r1, #32
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f383 8810 	msr	PRIMASK, r3
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056ba:	e007      	b.n	80056cc <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2108      	movs	r1, #8
 80056c8:	430a      	orrs	r2, r1
 80056ca:	619a      	str	r2, [r3, #24]
}
 80056cc:	46c0      	nop			@ (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b022      	add	sp, #136	@ 0x88
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	fffffeff 	.word	0xfffffeff
 80056d8:	effffffe 	.word	0xeffffffe
 80056dc:	fbffffff 	.word	0xfbffffff
 80056e0:	efffffff 	.word	0xefffffff
 80056e4:	08004eb9 	.word	0x08004eb9

080056e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2284      	movs	r2, #132	@ 0x84
 80056f4:	5c9b      	ldrb	r3, [r3, r2]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UARTEx_DisableFifoMode+0x16>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e027      	b.n	800574e <HAL_UARTEx_DisableFifoMode+0x66>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2284      	movs	r2, #132	@ 0x84
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2288      	movs	r2, #136	@ 0x88
 800570a:	2124      	movs	r1, #36	@ 0x24
 800570c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2101      	movs	r1, #1
 8005722:	438a      	bics	r2, r1
 8005724:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a0b      	ldr	r2, [pc, #44]	@ (8005758 <HAL_UARTEx_DisableFifoMode+0x70>)
 800572a:	4013      	ands	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2288      	movs	r2, #136	@ 0x88
 8005740:	2120      	movs	r1, #32
 8005742:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2284      	movs	r2, #132	@ 0x84
 8005748:	2100      	movs	r1, #0
 800574a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	0018      	movs	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	dfffffff 	.word	0xdfffffff

0800575c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2284      	movs	r2, #132	@ 0x84
 800576a:	5c9b      	ldrb	r3, [r3, r2]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005770:	2302      	movs	r3, #2
 8005772:	e02e      	b.n	80057d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2284      	movs	r2, #132	@ 0x84
 8005778:	2101      	movs	r1, #1
 800577a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2288      	movs	r2, #136	@ 0x88
 8005780:	2124      	movs	r1, #36	@ 0x24
 8005782:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	08d9      	lsrs	r1, r3, #3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f854 	bl	8005860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2288      	movs	r2, #136	@ 0x88
 80057c4:	2120      	movs	r1, #32
 80057c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2284      	movs	r2, #132	@ 0x84
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	0018      	movs	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b004      	add	sp, #16
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2284      	movs	r2, #132	@ 0x84
 80057ea:	5c9b      	ldrb	r3, [r3, r2]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e02f      	b.n	8005854 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2284      	movs	r2, #132	@ 0x84
 80057f8:	2101      	movs	r1, #1
 80057fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2288      	movs	r2, #136	@ 0x88
 8005800:	2124      	movs	r1, #36	@ 0x24
 8005802:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2101      	movs	r1, #1
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4a0e      	ldr	r2, [pc, #56]	@ (800585c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	0018      	movs	r0, r3
 8005836:	f000 f813 	bl	8005860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2288      	movs	r2, #136	@ 0x88
 8005846:	2120      	movs	r1, #32
 8005848:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2284      	movs	r2, #132	@ 0x84
 800584e:	2100      	movs	r1, #0
 8005850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b004      	add	sp, #16
 800585a:	bd80      	pop	{r7, pc}
 800585c:	f1ffffff 	.word	0xf1ffffff

08005860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	226a      	movs	r2, #106	@ 0x6a
 8005874:	2101      	movs	r1, #1
 8005876:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2268      	movs	r2, #104	@ 0x68
 800587c:	2101      	movs	r1, #1
 800587e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005880:	e043      	b.n	800590a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005882:	260f      	movs	r6, #15
 8005884:	19bb      	adds	r3, r7, r6
 8005886:	2208      	movs	r2, #8
 8005888:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800588a:	200e      	movs	r0, #14
 800588c:	183b      	adds	r3, r7, r0
 800588e:	2208      	movs	r2, #8
 8005890:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	0e5b      	lsrs	r3, r3, #25
 800589a:	b2da      	uxtb	r2, r3
 800589c:	240d      	movs	r4, #13
 800589e:	193b      	adds	r3, r7, r4
 80058a0:	2107      	movs	r1, #7
 80058a2:	400a      	ands	r2, r1
 80058a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	0f5b      	lsrs	r3, r3, #29
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	250c      	movs	r5, #12
 80058b2:	197b      	adds	r3, r7, r5
 80058b4:	2107      	movs	r1, #7
 80058b6:	400a      	ands	r2, r1
 80058b8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ba:	183b      	adds	r3, r7, r0
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	197a      	adds	r2, r7, r5
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	4914      	ldr	r1, [pc, #80]	@ (8005914 <UARTEx_SetNbDataToProcess+0xb4>)
 80058c4:	5c8a      	ldrb	r2, [r1, r2]
 80058c6:	435a      	muls	r2, r3
 80058c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ca:	197b      	adds	r3, r7, r5
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	4a12      	ldr	r2, [pc, #72]	@ (8005918 <UARTEx_SetNbDataToProcess+0xb8>)
 80058d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d2:	0019      	movs	r1, r3
 80058d4:	f7fa fcb0 	bl	8000238 <__divsi3>
 80058d8:	0003      	movs	r3, r0
 80058da:	b299      	uxth	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	226a      	movs	r2, #106	@ 0x6a
 80058e0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e2:	19bb      	adds	r3, r7, r6
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	193a      	adds	r2, r7, r4
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	490a      	ldr	r1, [pc, #40]	@ (8005914 <UARTEx_SetNbDataToProcess+0xb4>)
 80058ec:	5c8a      	ldrb	r2, [r1, r2]
 80058ee:	435a      	muls	r2, r3
 80058f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80058f2:	193b      	adds	r3, r7, r4
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	4a08      	ldr	r2, [pc, #32]	@ (8005918 <UARTEx_SetNbDataToProcess+0xb8>)
 80058f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058fa:	0019      	movs	r1, r3
 80058fc:	f7fa fc9c 	bl	8000238 <__divsi3>
 8005900:	0003      	movs	r3, r0
 8005902:	b299      	uxth	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2268      	movs	r2, #104	@ 0x68
 8005908:	5299      	strh	r1, [r3, r2]
}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	46bd      	mov	sp, r7
 800590e:	b005      	add	sp, #20
 8005910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	08006408 	.word	0x08006408
 8005918:	08006410 	.word	0x08006410

0800591c <sniprintf>:
 800591c:	b40c      	push	{r2, r3}
 800591e:	b530      	push	{r4, r5, lr}
 8005920:	4b17      	ldr	r3, [pc, #92]	@ (8005980 <sniprintf+0x64>)
 8005922:	000c      	movs	r4, r1
 8005924:	681d      	ldr	r5, [r3, #0]
 8005926:	b09d      	sub	sp, #116	@ 0x74
 8005928:	2900      	cmp	r1, #0
 800592a:	da08      	bge.n	800593e <sniprintf+0x22>
 800592c:	238b      	movs	r3, #139	@ 0x8b
 800592e:	2001      	movs	r0, #1
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	4240      	negs	r0, r0
 8005934:	b01d      	add	sp, #116	@ 0x74
 8005936:	bc30      	pop	{r4, r5}
 8005938:	bc08      	pop	{r3}
 800593a:	b002      	add	sp, #8
 800593c:	4718      	bx	r3
 800593e:	2382      	movs	r3, #130	@ 0x82
 8005940:	466a      	mov	r2, sp
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	8293      	strh	r3, [r2, #20]
 8005946:	2300      	movs	r3, #0
 8005948:	9002      	str	r0, [sp, #8]
 800594a:	9006      	str	r0, [sp, #24]
 800594c:	4299      	cmp	r1, r3
 800594e:	d000      	beq.n	8005952 <sniprintf+0x36>
 8005950:	1e4b      	subs	r3, r1, #1
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	9307      	str	r3, [sp, #28]
 8005956:	2301      	movs	r3, #1
 8005958:	466a      	mov	r2, sp
 800595a:	425b      	negs	r3, r3
 800595c:	82d3      	strh	r3, [r2, #22]
 800595e:	0028      	movs	r0, r5
 8005960:	ab21      	add	r3, sp, #132	@ 0x84
 8005962:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005964:	a902      	add	r1, sp, #8
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	f000 f99c 	bl	8005ca4 <_svfiprintf_r>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	da01      	bge.n	8005974 <sniprintf+0x58>
 8005970:	238b      	movs	r3, #139	@ 0x8b
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	2c00      	cmp	r4, #0
 8005976:	d0dd      	beq.n	8005934 <sniprintf+0x18>
 8005978:	2200      	movs	r2, #0
 800597a:	9b02      	ldr	r3, [sp, #8]
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e7d9      	b.n	8005934 <sniprintf+0x18>
 8005980:	20000010 	.word	0x20000010

08005984 <memset>:
 8005984:	0003      	movs	r3, r0
 8005986:	1882      	adds	r2, r0, r2
 8005988:	4293      	cmp	r3, r2
 800598a:	d100      	bne.n	800598e <memset+0xa>
 800598c:	4770      	bx	lr
 800598e:	7019      	strb	r1, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	e7f9      	b.n	8005988 <memset+0x4>

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	@ (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	20000010 	.word	0x20000010

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	2600      	movs	r6, #0
 80059a4:	4c0c      	ldr	r4, [pc, #48]	@ (80059d8 <__libc_init_array+0x38>)
 80059a6:	4d0d      	ldr	r5, [pc, #52]	@ (80059dc <__libc_init_array+0x3c>)
 80059a8:	1b64      	subs	r4, r4, r5
 80059aa:	10a4      	asrs	r4, r4, #2
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	2600      	movs	r6, #0
 80059b2:	f000 fc65 	bl	8006280 <_init>
 80059b6:	4c0a      	ldr	r4, [pc, #40]	@ (80059e0 <__libc_init_array+0x40>)
 80059b8:	4d0a      	ldr	r5, [pc, #40]	@ (80059e4 <__libc_init_array+0x44>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	00b3      	lsls	r3, r6, #2
 80059c6:	58eb      	ldr	r3, [r5, r3]
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	00b3      	lsls	r3, r6, #2
 80059d0:	58eb      	ldr	r3, [r5, r3]
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	0800644c 	.word	0x0800644c
 80059dc:	0800644c 	.word	0x0800644c
 80059e0:	08006450 	.word	0x08006450
 80059e4:	0800644c 	.word	0x0800644c

080059e8 <__retarget_lock_acquire_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_release_recursive>:
 80059ea:	4770      	bx	lr

080059ec <_free_r>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	0005      	movs	r5, r0
 80059f0:	1e0c      	subs	r4, r1, #0
 80059f2:	d010      	beq.n	8005a16 <_free_r+0x2a>
 80059f4:	3c04      	subs	r4, #4
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da00      	bge.n	80059fe <_free_r+0x12>
 80059fc:	18e4      	adds	r4, r4, r3
 80059fe:	0028      	movs	r0, r5
 8005a00:	f000 f8e0 	bl	8005bc4 <__malloc_lock>
 8005a04:	4a1d      	ldr	r2, [pc, #116]	@ (8005a7c <_free_r+0x90>)
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <_free_r+0x2c>
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	6014      	str	r4, [r2, #0]
 8005a10:	0028      	movs	r0, r5
 8005a12:	f000 f8df 	bl	8005bd4 <__malloc_unlock>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d908      	bls.n	8005a2e <_free_r+0x42>
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	1821      	adds	r1, r4, r0
 8005a20:	428b      	cmp	r3, r1
 8005a22:	d1f3      	bne.n	8005a0c <_free_r+0x20>
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	1809      	adds	r1, r1, r0
 8005a2a:	6021      	str	r1, [r4, #0]
 8005a2c:	e7ee      	b.n	8005a0c <_free_r+0x20>
 8005a2e:	001a      	movs	r2, r3
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <_free_r+0x4e>
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	d9f9      	bls.n	8005a2e <_free_r+0x42>
 8005a3a:	6811      	ldr	r1, [r2, #0]
 8005a3c:	1850      	adds	r0, r2, r1
 8005a3e:	42a0      	cmp	r0, r4
 8005a40:	d10b      	bne.n	8005a5a <_free_r+0x6e>
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	1809      	adds	r1, r1, r0
 8005a46:	1850      	adds	r0, r2, r1
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	4283      	cmp	r3, r0
 8005a4c:	d1e0      	bne.n	8005a10 <_free_r+0x24>
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	1841      	adds	r1, r0, r1
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	6053      	str	r3, [r2, #4]
 8005a58:	e7da      	b.n	8005a10 <_free_r+0x24>
 8005a5a:	42a0      	cmp	r0, r4
 8005a5c:	d902      	bls.n	8005a64 <_free_r+0x78>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	e7d5      	b.n	8005a10 <_free_r+0x24>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	1821      	adds	r1, r4, r0
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	d103      	bne.n	8005a74 <_free_r+0x88>
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	1809      	adds	r1, r1, r0
 8005a72:	6021      	str	r1, [r4, #0]
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	6054      	str	r4, [r2, #4]
 8005a78:	e7ca      	b.n	8005a10 <_free_r+0x24>
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	200002b8 	.word	0x200002b8

08005a80 <sbrk_aligned>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac0 <sbrk_aligned+0x40>)
 8005a84:	000d      	movs	r5, r1
 8005a86:	6831      	ldr	r1, [r6, #0]
 8005a88:	0004      	movs	r4, r0
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d102      	bne.n	8005a94 <sbrk_aligned+0x14>
 8005a8e:	f000 fb99 	bl	80061c4 <_sbrk_r>
 8005a92:	6030      	str	r0, [r6, #0]
 8005a94:	0029      	movs	r1, r5
 8005a96:	0020      	movs	r0, r4
 8005a98:	f000 fb94 	bl	80061c4 <_sbrk_r>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d103      	bne.n	8005aa8 <sbrk_aligned+0x28>
 8005aa0:	2501      	movs	r5, #1
 8005aa2:	426d      	negs	r5, r5
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	1cc5      	adds	r5, r0, #3
 8005aac:	439d      	bics	r5, r3
 8005aae:	42a8      	cmp	r0, r5
 8005ab0:	d0f8      	beq.n	8005aa4 <sbrk_aligned+0x24>
 8005ab2:	1a29      	subs	r1, r5, r0
 8005ab4:	0020      	movs	r0, r4
 8005ab6:	f000 fb85 	bl	80061c4 <_sbrk_r>
 8005aba:	3001      	adds	r0, #1
 8005abc:	d1f2      	bne.n	8005aa4 <sbrk_aligned+0x24>
 8005abe:	e7ef      	b.n	8005aa0 <sbrk_aligned+0x20>
 8005ac0:	200002b4 	.word	0x200002b4

08005ac4 <_malloc_r>:
 8005ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	1ccb      	adds	r3, r1, #3
 8005aca:	4393      	bics	r3, r2
 8005acc:	3308      	adds	r3, #8
 8005ace:	0005      	movs	r5, r0
 8005ad0:	001f      	movs	r7, r3
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d234      	bcs.n	8005b40 <_malloc_r+0x7c>
 8005ad6:	270c      	movs	r7, #12
 8005ad8:	42b9      	cmp	r1, r7
 8005ada:	d833      	bhi.n	8005b44 <_malloc_r+0x80>
 8005adc:	0028      	movs	r0, r5
 8005ade:	f000 f871 	bl	8005bc4 <__malloc_lock>
 8005ae2:	4e37      	ldr	r6, [pc, #220]	@ (8005bc0 <_malloc_r+0xfc>)
 8005ae4:	6833      	ldr	r3, [r6, #0]
 8005ae6:	001c      	movs	r4, r3
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d12f      	bne.n	8005b4c <_malloc_r+0x88>
 8005aec:	0039      	movs	r1, r7
 8005aee:	0028      	movs	r0, r5
 8005af0:	f7ff ffc6 	bl	8005a80 <sbrk_aligned>
 8005af4:	0004      	movs	r4, r0
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d15f      	bne.n	8005bba <_malloc_r+0xf6>
 8005afa:	6834      	ldr	r4, [r6, #0]
 8005afc:	9400      	str	r4, [sp, #0]
 8005afe:	9b00      	ldr	r3, [sp, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d14a      	bne.n	8005b9a <_malloc_r+0xd6>
 8005b04:	2c00      	cmp	r4, #0
 8005b06:	d052      	beq.n	8005bae <_malloc_r+0xea>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	0028      	movs	r0, r5
 8005b0c:	18e3      	adds	r3, r4, r3
 8005b0e:	9900      	ldr	r1, [sp, #0]
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	f000 fb57 	bl	80061c4 <_sbrk_r>
 8005b16:	9b01      	ldr	r3, [sp, #4]
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	d148      	bne.n	8005bae <_malloc_r+0xea>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	0028      	movs	r0, r5
 8005b20:	1aff      	subs	r7, r7, r3
 8005b22:	0039      	movs	r1, r7
 8005b24:	f7ff ffac 	bl	8005a80 <sbrk_aligned>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d040      	beq.n	8005bae <_malloc_r+0xea>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	19db      	adds	r3, r3, r7
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	6833      	ldr	r3, [r6, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	d133      	bne.n	8005ba2 <_malloc_r+0xde>
 8005b3a:	9b00      	ldr	r3, [sp, #0]
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	e019      	b.n	8005b74 <_malloc_r+0xb0>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dac9      	bge.n	8005ad8 <_malloc_r+0x14>
 8005b44:	230c      	movs	r3, #12
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	2000      	movs	r0, #0
 8005b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b4c:	6821      	ldr	r1, [r4, #0]
 8005b4e:	1bc9      	subs	r1, r1, r7
 8005b50:	d420      	bmi.n	8005b94 <_malloc_r+0xd0>
 8005b52:	290b      	cmp	r1, #11
 8005b54:	d90a      	bls.n	8005b6c <_malloc_r+0xa8>
 8005b56:	19e2      	adds	r2, r4, r7
 8005b58:	6027      	str	r7, [r4, #0]
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	d104      	bne.n	8005b68 <_malloc_r+0xa4>
 8005b5e:	6032      	str	r2, [r6, #0]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	6011      	str	r1, [r2, #0]
 8005b64:	6053      	str	r3, [r2, #4]
 8005b66:	e005      	b.n	8005b74 <_malloc_r+0xb0>
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	e7f9      	b.n	8005b60 <_malloc_r+0x9c>
 8005b6c:	6862      	ldr	r2, [r4, #4]
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	d10e      	bne.n	8005b90 <_malloc_r+0xcc>
 8005b72:	6032      	str	r2, [r6, #0]
 8005b74:	0028      	movs	r0, r5
 8005b76:	f000 f82d 	bl	8005bd4 <__malloc_unlock>
 8005b7a:	0020      	movs	r0, r4
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	300b      	adds	r0, #11
 8005b80:	1d23      	adds	r3, r4, #4
 8005b82:	4390      	bics	r0, r2
 8005b84:	1ac2      	subs	r2, r0, r3
 8005b86:	4298      	cmp	r0, r3
 8005b88:	d0df      	beq.n	8005b4a <_malloc_r+0x86>
 8005b8a:	1a1b      	subs	r3, r3, r0
 8005b8c:	50a3      	str	r3, [r4, r2]
 8005b8e:	e7dc      	b.n	8005b4a <_malloc_r+0x86>
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e7ef      	b.n	8005b74 <_malloc_r+0xb0>
 8005b94:	0023      	movs	r3, r4
 8005b96:	6864      	ldr	r4, [r4, #4]
 8005b98:	e7a6      	b.n	8005ae8 <_malloc_r+0x24>
 8005b9a:	9c00      	ldr	r4, [sp, #0]
 8005b9c:	6863      	ldr	r3, [r4, #4]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	e7ad      	b.n	8005afe <_malloc_r+0x3a>
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	d1fb      	bne.n	8005ba2 <_malloc_r+0xde>
 8005baa:	2300      	movs	r3, #0
 8005bac:	e7da      	b.n	8005b64 <_malloc_r+0xa0>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	0028      	movs	r0, r5
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	f000 f80e 	bl	8005bd4 <__malloc_unlock>
 8005bb8:	e7c6      	b.n	8005b48 <_malloc_r+0x84>
 8005bba:	6007      	str	r7, [r0, #0]
 8005bbc:	e7da      	b.n	8005b74 <_malloc_r+0xb0>
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	200002b8 	.word	0x200002b8

08005bc4 <__malloc_lock>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4802      	ldr	r0, [pc, #8]	@ (8005bd0 <__malloc_lock+0xc>)
 8005bc8:	f7ff ff0e 	bl	80059e8 <__retarget_lock_acquire_recursive>
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	200002b0 	.word	0x200002b0

08005bd4 <__malloc_unlock>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4802      	ldr	r0, [pc, #8]	@ (8005be0 <__malloc_unlock+0xc>)
 8005bd8:	f7ff ff07 	bl	80059ea <__retarget_lock_release_recursive>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	46c0      	nop			@ (mov r8, r8)
 8005be0:	200002b0 	.word	0x200002b0

08005be4 <__ssputs_r>:
 8005be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be6:	688e      	ldr	r6, [r1, #8]
 8005be8:	b085      	sub	sp, #20
 8005bea:	001f      	movs	r7, r3
 8005bec:	000c      	movs	r4, r1
 8005bee:	680b      	ldr	r3, [r1, #0]
 8005bf0:	9002      	str	r0, [sp, #8]
 8005bf2:	9203      	str	r2, [sp, #12]
 8005bf4:	42be      	cmp	r6, r7
 8005bf6:	d830      	bhi.n	8005c5a <__ssputs_r+0x76>
 8005bf8:	210c      	movs	r1, #12
 8005bfa:	5e62      	ldrsh	r2, [r4, r1]
 8005bfc:	2190      	movs	r1, #144	@ 0x90
 8005bfe:	00c9      	lsls	r1, r1, #3
 8005c00:	420a      	tst	r2, r1
 8005c02:	d028      	beq.n	8005c56 <__ssputs_r+0x72>
 8005c04:	2003      	movs	r0, #3
 8005c06:	6921      	ldr	r1, [r4, #16]
 8005c08:	1a5b      	subs	r3, r3, r1
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	6963      	ldr	r3, [r4, #20]
 8005c0e:	4343      	muls	r3, r0
 8005c10:	9801      	ldr	r0, [sp, #4]
 8005c12:	0fdd      	lsrs	r5, r3, #31
 8005c14:	18ed      	adds	r5, r5, r3
 8005c16:	1c7b      	adds	r3, r7, #1
 8005c18:	181b      	adds	r3, r3, r0
 8005c1a:	106d      	asrs	r5, r5, #1
 8005c1c:	42ab      	cmp	r3, r5
 8005c1e:	d900      	bls.n	8005c22 <__ssputs_r+0x3e>
 8005c20:	001d      	movs	r5, r3
 8005c22:	0552      	lsls	r2, r2, #21
 8005c24:	d528      	bpl.n	8005c78 <__ssputs_r+0x94>
 8005c26:	0029      	movs	r1, r5
 8005c28:	9802      	ldr	r0, [sp, #8]
 8005c2a:	f7ff ff4b 	bl	8005ac4 <_malloc_r>
 8005c2e:	1e06      	subs	r6, r0, #0
 8005c30:	d02c      	beq.n	8005c8c <__ssputs_r+0xa8>
 8005c32:	9a01      	ldr	r2, [sp, #4]
 8005c34:	6921      	ldr	r1, [r4, #16]
 8005c36:	f000 fae2 	bl	80061fe <memcpy>
 8005c3a:	89a2      	ldrh	r2, [r4, #12]
 8005c3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ca0 <__ssputs_r+0xbc>)
 8005c3e:	401a      	ands	r2, r3
 8005c40:	2380      	movs	r3, #128	@ 0x80
 8005c42:	4313      	orrs	r3, r2
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	6126      	str	r6, [r4, #16]
 8005c4a:	18f6      	adds	r6, r6, r3
 8005c4c:	6026      	str	r6, [r4, #0]
 8005c4e:	003e      	movs	r6, r7
 8005c50:	6165      	str	r5, [r4, #20]
 8005c52:	1aed      	subs	r5, r5, r3
 8005c54:	60a5      	str	r5, [r4, #8]
 8005c56:	42be      	cmp	r6, r7
 8005c58:	d900      	bls.n	8005c5c <__ssputs_r+0x78>
 8005c5a:	003e      	movs	r6, r7
 8005c5c:	0032      	movs	r2, r6
 8005c5e:	9903      	ldr	r1, [sp, #12]
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	f000 fa9b 	bl	800619c <memmove>
 8005c66:	2000      	movs	r0, #0
 8005c68:	68a3      	ldr	r3, [r4, #8]
 8005c6a:	1b9b      	subs	r3, r3, r6
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	199b      	adds	r3, r3, r6
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	b005      	add	sp, #20
 8005c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c78:	002a      	movs	r2, r5
 8005c7a:	9802      	ldr	r0, [sp, #8]
 8005c7c:	f000 fac8 	bl	8006210 <_realloc_r>
 8005c80:	1e06      	subs	r6, r0, #0
 8005c82:	d1e0      	bne.n	8005c46 <__ssputs_r+0x62>
 8005c84:	6921      	ldr	r1, [r4, #16]
 8005c86:	9802      	ldr	r0, [sp, #8]
 8005c88:	f7ff feb0 	bl	80059ec <_free_r>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	2001      	movs	r0, #1
 8005c90:	9a02      	ldr	r2, [sp, #8]
 8005c92:	4240      	negs	r0, r0
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	89a2      	ldrh	r2, [r4, #12]
 8005c98:	3334      	adds	r3, #52	@ 0x34
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e7e9      	b.n	8005c74 <__ssputs_r+0x90>
 8005ca0:	fffffb7f 	.word	0xfffffb7f

08005ca4 <_svfiprintf_r>:
 8005ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca6:	b0a1      	sub	sp, #132	@ 0x84
 8005ca8:	9003      	str	r0, [sp, #12]
 8005caa:	001d      	movs	r5, r3
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	000f      	movs	r7, r1
 8005cb0:	0016      	movs	r6, r2
 8005cb2:	061b      	lsls	r3, r3, #24
 8005cb4:	d511      	bpl.n	8005cda <_svfiprintf_r+0x36>
 8005cb6:	690b      	ldr	r3, [r1, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10e      	bne.n	8005cda <_svfiprintf_r+0x36>
 8005cbc:	2140      	movs	r1, #64	@ 0x40
 8005cbe:	f7ff ff01 	bl	8005ac4 <_malloc_r>
 8005cc2:	6038      	str	r0, [r7, #0]
 8005cc4:	6138      	str	r0, [r7, #16]
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d105      	bne.n	8005cd6 <_svfiprintf_r+0x32>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	9a03      	ldr	r2, [sp, #12]
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	4240      	negs	r0, r0
 8005cd4:	e0cf      	b.n	8005e76 <_svfiprintf_r+0x1d2>
 8005cd6:	2340      	movs	r3, #64	@ 0x40
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	ac08      	add	r4, sp, #32
 8005cde:	6163      	str	r3, [r4, #20]
 8005ce0:	3320      	adds	r3, #32
 8005ce2:	7663      	strb	r3, [r4, #25]
 8005ce4:	3310      	adds	r3, #16
 8005ce6:	76a3      	strb	r3, [r4, #26]
 8005ce8:	9507      	str	r5, [sp, #28]
 8005cea:	0035      	movs	r5, r6
 8005cec:	782b      	ldrb	r3, [r5, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <_svfiprintf_r+0x52>
 8005cf2:	2b25      	cmp	r3, #37	@ 0x25
 8005cf4:	d148      	bne.n	8005d88 <_svfiprintf_r+0xe4>
 8005cf6:	1bab      	subs	r3, r5, r6
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	42b5      	cmp	r5, r6
 8005cfc:	d00b      	beq.n	8005d16 <_svfiprintf_r+0x72>
 8005cfe:	0032      	movs	r2, r6
 8005d00:	0039      	movs	r1, r7
 8005d02:	9803      	ldr	r0, [sp, #12]
 8005d04:	f7ff ff6e 	bl	8005be4 <__ssputs_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d100      	bne.n	8005d0e <_svfiprintf_r+0x6a>
 8005d0c:	e0ae      	b.n	8005e6c <_svfiprintf_r+0x1c8>
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	9a05      	ldr	r2, [sp, #20]
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	6163      	str	r3, [r4, #20]
 8005d16:	782b      	ldrb	r3, [r5, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d100      	bne.n	8005d1e <_svfiprintf_r+0x7a>
 8005d1c:	e0a6      	b.n	8005e6c <_svfiprintf_r+0x1c8>
 8005d1e:	2201      	movs	r2, #1
 8005d20:	2300      	movs	r3, #0
 8005d22:	4252      	negs	r2, r2
 8005d24:	6062      	str	r2, [r4, #4]
 8005d26:	a904      	add	r1, sp, #16
 8005d28:	3254      	adds	r2, #84	@ 0x54
 8005d2a:	1852      	adds	r2, r2, r1
 8005d2c:	1c6e      	adds	r6, r5, #1
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	60e3      	str	r3, [r4, #12]
 8005d32:	60a3      	str	r3, [r4, #8]
 8005d34:	7013      	strb	r3, [r2, #0]
 8005d36:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005d38:	4b54      	ldr	r3, [pc, #336]	@ (8005e8c <_svfiprintf_r+0x1e8>)
 8005d3a:	2205      	movs	r2, #5
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	7831      	ldrb	r1, [r6, #0]
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	f000 fa51 	bl	80061e8 <memchr>
 8005d46:	1c75      	adds	r5, r6, #1
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d11f      	bne.n	8005d8c <_svfiprintf_r+0xe8>
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	06d3      	lsls	r3, r2, #27
 8005d50:	d504      	bpl.n	8005d5c <_svfiprintf_r+0xb8>
 8005d52:	2353      	movs	r3, #83	@ 0x53
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	185b      	adds	r3, r3, r1
 8005d58:	2120      	movs	r1, #32
 8005d5a:	7019      	strb	r1, [r3, #0]
 8005d5c:	0713      	lsls	r3, r2, #28
 8005d5e:	d504      	bpl.n	8005d6a <_svfiprintf_r+0xc6>
 8005d60:	2353      	movs	r3, #83	@ 0x53
 8005d62:	a904      	add	r1, sp, #16
 8005d64:	185b      	adds	r3, r3, r1
 8005d66:	212b      	movs	r1, #43	@ 0x2b
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	7833      	ldrb	r3, [r6, #0]
 8005d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d6e:	d016      	beq.n	8005d9e <_svfiprintf_r+0xfa>
 8005d70:	0035      	movs	r5, r6
 8005d72:	2100      	movs	r1, #0
 8005d74:	200a      	movs	r0, #10
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	782a      	ldrb	r2, [r5, #0]
 8005d7a:	1c6e      	adds	r6, r5, #1
 8005d7c:	3a30      	subs	r2, #48	@ 0x30
 8005d7e:	2a09      	cmp	r2, #9
 8005d80:	d950      	bls.n	8005e24 <_svfiprintf_r+0x180>
 8005d82:	2900      	cmp	r1, #0
 8005d84:	d111      	bne.n	8005daa <_svfiprintf_r+0x106>
 8005d86:	e017      	b.n	8005db8 <_svfiprintf_r+0x114>
 8005d88:	3501      	adds	r5, #1
 8005d8a:	e7af      	b.n	8005cec <_svfiprintf_r+0x48>
 8005d8c:	9b05      	ldr	r3, [sp, #20]
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	1ac0      	subs	r0, r0, r3
 8005d92:	2301      	movs	r3, #1
 8005d94:	4083      	lsls	r3, r0
 8005d96:	4313      	orrs	r3, r2
 8005d98:	002e      	movs	r6, r5
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	e7cc      	b.n	8005d38 <_svfiprintf_r+0x94>
 8005d9e:	9b07      	ldr	r3, [sp, #28]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	9107      	str	r1, [sp, #28]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	db01      	blt.n	8005dae <_svfiprintf_r+0x10a>
 8005daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dac:	e004      	b.n	8005db8 <_svfiprintf_r+0x114>
 8005dae:	425b      	negs	r3, r3
 8005db0:	60e3      	str	r3, [r4, #12]
 8005db2:	2302      	movs	r3, #2
 8005db4:	4313      	orrs	r3, r2
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	782b      	ldrb	r3, [r5, #0]
 8005dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dbc:	d10c      	bne.n	8005dd8 <_svfiprintf_r+0x134>
 8005dbe:	786b      	ldrb	r3, [r5, #1]
 8005dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc2:	d134      	bne.n	8005e2e <_svfiprintf_r+0x18a>
 8005dc4:	9b07      	ldr	r3, [sp, #28]
 8005dc6:	3502      	adds	r5, #2
 8005dc8:	1d1a      	adds	r2, r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	9207      	str	r2, [sp, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da01      	bge.n	8005dd6 <_svfiprintf_r+0x132>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd8:	4e2d      	ldr	r6, [pc, #180]	@ (8005e90 <_svfiprintf_r+0x1ec>)
 8005dda:	2203      	movs	r2, #3
 8005ddc:	0030      	movs	r0, r6
 8005dde:	7829      	ldrb	r1, [r5, #0]
 8005de0:	f000 fa02 	bl	80061e8 <memchr>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d006      	beq.n	8005df6 <_svfiprintf_r+0x152>
 8005de8:	2340      	movs	r3, #64	@ 0x40
 8005dea:	1b80      	subs	r0, r0, r6
 8005dec:	4083      	lsls	r3, r0
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	3501      	adds	r5, #1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	7829      	ldrb	r1, [r5, #0]
 8005df8:	2206      	movs	r2, #6
 8005dfa:	4826      	ldr	r0, [pc, #152]	@ (8005e94 <_svfiprintf_r+0x1f0>)
 8005dfc:	1c6e      	adds	r6, r5, #1
 8005dfe:	7621      	strb	r1, [r4, #24]
 8005e00:	f000 f9f2 	bl	80061e8 <memchr>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d038      	beq.n	8005e7a <_svfiprintf_r+0x1d6>
 8005e08:	4b23      	ldr	r3, [pc, #140]	@ (8005e98 <_svfiprintf_r+0x1f4>)
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d122      	bne.n	8005e54 <_svfiprintf_r+0x1b0>
 8005e0e:	2207      	movs	r2, #7
 8005e10:	9b07      	ldr	r3, [sp, #28]
 8005e12:	3307      	adds	r3, #7
 8005e14:	4393      	bics	r3, r2
 8005e16:	3308      	adds	r3, #8
 8005e18:	9307      	str	r3, [sp, #28]
 8005e1a:	6963      	ldr	r3, [r4, #20]
 8005e1c:	9a04      	ldr	r2, [sp, #16]
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	6163      	str	r3, [r4, #20]
 8005e22:	e762      	b.n	8005cea <_svfiprintf_r+0x46>
 8005e24:	4343      	muls	r3, r0
 8005e26:	0035      	movs	r5, r6
 8005e28:	2101      	movs	r1, #1
 8005e2a:	189b      	adds	r3, r3, r2
 8005e2c:	e7a4      	b.n	8005d78 <_svfiprintf_r+0xd4>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	200a      	movs	r0, #10
 8005e32:	0019      	movs	r1, r3
 8005e34:	3501      	adds	r5, #1
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	782a      	ldrb	r2, [r5, #0]
 8005e3a:	1c6e      	adds	r6, r5, #1
 8005e3c:	3a30      	subs	r2, #48	@ 0x30
 8005e3e:	2a09      	cmp	r2, #9
 8005e40:	d903      	bls.n	8005e4a <_svfiprintf_r+0x1a6>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0c8      	beq.n	8005dd8 <_svfiprintf_r+0x134>
 8005e46:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e48:	e7c6      	b.n	8005dd8 <_svfiprintf_r+0x134>
 8005e4a:	4341      	muls	r1, r0
 8005e4c:	0035      	movs	r5, r6
 8005e4e:	2301      	movs	r3, #1
 8005e50:	1889      	adds	r1, r1, r2
 8005e52:	e7f1      	b.n	8005e38 <_svfiprintf_r+0x194>
 8005e54:	aa07      	add	r2, sp, #28
 8005e56:	9200      	str	r2, [sp, #0]
 8005e58:	0021      	movs	r1, r4
 8005e5a:	003a      	movs	r2, r7
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e9c <_svfiprintf_r+0x1f8>)
 8005e5e:	9803      	ldr	r0, [sp, #12]
 8005e60:	e000      	b.n	8005e64 <_svfiprintf_r+0x1c0>
 8005e62:	bf00      	nop
 8005e64:	9004      	str	r0, [sp, #16]
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	d1d6      	bne.n	8005e1a <_svfiprintf_r+0x176>
 8005e6c:	89bb      	ldrh	r3, [r7, #12]
 8005e6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005e70:	065b      	lsls	r3, r3, #25
 8005e72:	d500      	bpl.n	8005e76 <_svfiprintf_r+0x1d2>
 8005e74:	e72c      	b.n	8005cd0 <_svfiprintf_r+0x2c>
 8005e76:	b021      	add	sp, #132	@ 0x84
 8005e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e7a:	aa07      	add	r2, sp, #28
 8005e7c:	9200      	str	r2, [sp, #0]
 8005e7e:	0021      	movs	r1, r4
 8005e80:	003a      	movs	r2, r7
 8005e82:	4b06      	ldr	r3, [pc, #24]	@ (8005e9c <_svfiprintf_r+0x1f8>)
 8005e84:	9803      	ldr	r0, [sp, #12]
 8005e86:	f000 f87b 	bl	8005f80 <_printf_i>
 8005e8a:	e7eb      	b.n	8005e64 <_svfiprintf_r+0x1c0>
 8005e8c:	08006418 	.word	0x08006418
 8005e90:	0800641e 	.word	0x0800641e
 8005e94:	08006422 	.word	0x08006422
 8005e98:	00000000 	.word	0x00000000
 8005e9c:	08005be5 	.word	0x08005be5

08005ea0 <_printf_common>:
 8005ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea2:	0016      	movs	r6, r2
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	688a      	ldr	r2, [r1, #8]
 8005ea8:	690b      	ldr	r3, [r1, #16]
 8005eaa:	000c      	movs	r4, r1
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	da00      	bge.n	8005eb4 <_printf_common+0x14>
 8005eb2:	0013      	movs	r3, r2
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	6033      	str	r3, [r6, #0]
 8005eb8:	3243      	adds	r2, #67	@ 0x43
 8005eba:	7812      	ldrb	r2, [r2, #0]
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	d001      	beq.n	8005ec4 <_printf_common+0x24>
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	069b      	lsls	r3, r3, #26
 8005ec8:	d502      	bpl.n	8005ed0 <_printf_common+0x30>
 8005eca:	6833      	ldr	r3, [r6, #0]
 8005ecc:	3302      	adds	r3, #2
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	2306      	movs	r3, #6
 8005ed4:	0015      	movs	r5, r2
 8005ed6:	401d      	ands	r5, r3
 8005ed8:	421a      	tst	r2, r3
 8005eda:	d027      	beq.n	8005f2c <_printf_common+0x8c>
 8005edc:	0023      	movs	r3, r4
 8005ede:	3343      	adds	r3, #67	@ 0x43
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	1e5a      	subs	r2, r3, #1
 8005ee4:	4193      	sbcs	r3, r2
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	0692      	lsls	r2, r2, #26
 8005eea:	d430      	bmi.n	8005f4e <_printf_common+0xae>
 8005eec:	0022      	movs	r2, r4
 8005eee:	9901      	ldr	r1, [sp, #4]
 8005ef0:	9800      	ldr	r0, [sp, #0]
 8005ef2:	9d08      	ldr	r5, [sp, #32]
 8005ef4:	3243      	adds	r2, #67	@ 0x43
 8005ef6:	47a8      	blx	r5
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d025      	beq.n	8005f48 <_printf_common+0xa8>
 8005efc:	2206      	movs	r2, #6
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	2500      	movs	r5, #0
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d105      	bne.n	8005f14 <_printf_common+0x74>
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	68e5      	ldr	r5, [r4, #12]
 8005f0c:	1aed      	subs	r5, r5, r3
 8005f0e:	43eb      	mvns	r3, r5
 8005f10:	17db      	asrs	r3, r3, #31
 8005f12:	401d      	ands	r5, r3
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	6922      	ldr	r2, [r4, #16]
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	dd01      	ble.n	8005f20 <_printf_common+0x80>
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	18ed      	adds	r5, r5, r3
 8005f20:	2600      	movs	r6, #0
 8005f22:	42b5      	cmp	r5, r6
 8005f24:	d120      	bne.n	8005f68 <_printf_common+0xc8>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e010      	b.n	8005f4c <_printf_common+0xac>
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	68e3      	ldr	r3, [r4, #12]
 8005f2e:	6832      	ldr	r2, [r6, #0]
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	42ab      	cmp	r3, r5
 8005f34:	ddd2      	ble.n	8005edc <_printf_common+0x3c>
 8005f36:	0022      	movs	r2, r4
 8005f38:	2301      	movs	r3, #1
 8005f3a:	9901      	ldr	r1, [sp, #4]
 8005f3c:	9800      	ldr	r0, [sp, #0]
 8005f3e:	9f08      	ldr	r7, [sp, #32]
 8005f40:	3219      	adds	r2, #25
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1f0      	bne.n	8005f2a <_printf_common+0x8a>
 8005f48:	2001      	movs	r0, #1
 8005f4a:	4240      	negs	r0, r0
 8005f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f4e:	2030      	movs	r0, #48	@ 0x30
 8005f50:	18e1      	adds	r1, r4, r3
 8005f52:	3143      	adds	r1, #67	@ 0x43
 8005f54:	7008      	strb	r0, [r1, #0]
 8005f56:	0021      	movs	r1, r4
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	3145      	adds	r1, #69	@ 0x45
 8005f5c:	7809      	ldrb	r1, [r1, #0]
 8005f5e:	18a2      	adds	r2, r4, r2
 8005f60:	3243      	adds	r2, #67	@ 0x43
 8005f62:	3302      	adds	r3, #2
 8005f64:	7011      	strb	r1, [r2, #0]
 8005f66:	e7c1      	b.n	8005eec <_printf_common+0x4c>
 8005f68:	0022      	movs	r2, r4
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	9901      	ldr	r1, [sp, #4]
 8005f6e:	9800      	ldr	r0, [sp, #0]
 8005f70:	9f08      	ldr	r7, [sp, #32]
 8005f72:	321a      	adds	r2, #26
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0e6      	beq.n	8005f48 <_printf_common+0xa8>
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7d1      	b.n	8005f22 <_printf_common+0x82>
	...

08005f80 <_printf_i>:
 8005f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f82:	b08b      	sub	sp, #44	@ 0x2c
 8005f84:	9206      	str	r2, [sp, #24]
 8005f86:	000a      	movs	r2, r1
 8005f88:	3243      	adds	r2, #67	@ 0x43
 8005f8a:	9307      	str	r3, [sp, #28]
 8005f8c:	9005      	str	r0, [sp, #20]
 8005f8e:	9203      	str	r2, [sp, #12]
 8005f90:	7e0a      	ldrb	r2, [r1, #24]
 8005f92:	000c      	movs	r4, r1
 8005f94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f96:	2a78      	cmp	r2, #120	@ 0x78
 8005f98:	d809      	bhi.n	8005fae <_printf_i+0x2e>
 8005f9a:	2a62      	cmp	r2, #98	@ 0x62
 8005f9c:	d80b      	bhi.n	8005fb6 <_printf_i+0x36>
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d100      	bne.n	8005fa4 <_printf_i+0x24>
 8005fa2:	e0bc      	b.n	800611e <_printf_i+0x19e>
 8005fa4:	497b      	ldr	r1, [pc, #492]	@ (8006194 <_printf_i+0x214>)
 8005fa6:	9104      	str	r1, [sp, #16]
 8005fa8:	2a58      	cmp	r2, #88	@ 0x58
 8005faa:	d100      	bne.n	8005fae <_printf_i+0x2e>
 8005fac:	e090      	b.n	80060d0 <_printf_i+0x150>
 8005fae:	0025      	movs	r5, r4
 8005fb0:	3542      	adds	r5, #66	@ 0x42
 8005fb2:	702a      	strb	r2, [r5, #0]
 8005fb4:	e022      	b.n	8005ffc <_printf_i+0x7c>
 8005fb6:	0010      	movs	r0, r2
 8005fb8:	3863      	subs	r0, #99	@ 0x63
 8005fba:	2815      	cmp	r0, #21
 8005fbc:	d8f7      	bhi.n	8005fae <_printf_i+0x2e>
 8005fbe:	f7fa f8a7 	bl	8000110 <__gnu_thumb1_case_shi>
 8005fc2:	0016      	.short	0x0016
 8005fc4:	fff6001f 	.word	0xfff6001f
 8005fc8:	fff6fff6 	.word	0xfff6fff6
 8005fcc:	001ffff6 	.word	0x001ffff6
 8005fd0:	fff6fff6 	.word	0xfff6fff6
 8005fd4:	fff6fff6 	.word	0xfff6fff6
 8005fd8:	003600a1 	.word	0x003600a1
 8005fdc:	fff60080 	.word	0xfff60080
 8005fe0:	00b2fff6 	.word	0x00b2fff6
 8005fe4:	0036fff6 	.word	0x0036fff6
 8005fe8:	fff6fff6 	.word	0xfff6fff6
 8005fec:	0084      	.short	0x0084
 8005fee:	0025      	movs	r5, r4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	3542      	adds	r5, #66	@ 0x42
 8005ff4:	1d11      	adds	r1, r2, #4
 8005ff6:	6019      	str	r1, [r3, #0]
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	702b      	strb	r3, [r5, #0]
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0a0      	b.n	8006142 <_printf_i+0x1c2>
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	6809      	ldr	r1, [r1, #0]
 8006004:	1d02      	adds	r2, r0, #4
 8006006:	060d      	lsls	r5, r1, #24
 8006008:	d50b      	bpl.n	8006022 <_printf_i+0xa2>
 800600a:	6806      	ldr	r6, [r0, #0]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	2e00      	cmp	r6, #0
 8006010:	da03      	bge.n	800601a <_printf_i+0x9a>
 8006012:	232d      	movs	r3, #45	@ 0x2d
 8006014:	9a03      	ldr	r2, [sp, #12]
 8006016:	4276      	negs	r6, r6
 8006018:	7013      	strb	r3, [r2, #0]
 800601a:	4b5e      	ldr	r3, [pc, #376]	@ (8006194 <_printf_i+0x214>)
 800601c:	270a      	movs	r7, #10
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	e018      	b.n	8006054 <_printf_i+0xd4>
 8006022:	6806      	ldr	r6, [r0, #0]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	0649      	lsls	r1, r1, #25
 8006028:	d5f1      	bpl.n	800600e <_printf_i+0x8e>
 800602a:	b236      	sxth	r6, r6
 800602c:	e7ef      	b.n	800600e <_printf_i+0x8e>
 800602e:	6808      	ldr	r0, [r1, #0]
 8006030:	6819      	ldr	r1, [r3, #0]
 8006032:	c940      	ldmia	r1!, {r6}
 8006034:	0605      	lsls	r5, r0, #24
 8006036:	d402      	bmi.n	800603e <_printf_i+0xbe>
 8006038:	0640      	lsls	r0, r0, #25
 800603a:	d500      	bpl.n	800603e <_printf_i+0xbe>
 800603c:	b2b6      	uxth	r6, r6
 800603e:	6019      	str	r1, [r3, #0]
 8006040:	4b54      	ldr	r3, [pc, #336]	@ (8006194 <_printf_i+0x214>)
 8006042:	270a      	movs	r7, #10
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	2a6f      	cmp	r2, #111	@ 0x6f
 8006048:	d100      	bne.n	800604c <_printf_i+0xcc>
 800604a:	3f02      	subs	r7, #2
 800604c:	0023      	movs	r3, r4
 800604e:	2200      	movs	r2, #0
 8006050:	3343      	adds	r3, #67	@ 0x43
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	60a3      	str	r3, [r4, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db03      	blt.n	8006064 <_printf_i+0xe4>
 800605c:	2104      	movs	r1, #4
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	438a      	bics	r2, r1
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	2e00      	cmp	r6, #0
 8006066:	d102      	bne.n	800606e <_printf_i+0xee>
 8006068:	9d03      	ldr	r5, [sp, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <_printf_i+0x108>
 800606e:	9d03      	ldr	r5, [sp, #12]
 8006070:	0030      	movs	r0, r6
 8006072:	0039      	movs	r1, r7
 8006074:	f7fa f8dc 	bl	8000230 <__aeabi_uidivmod>
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	3d01      	subs	r5, #1
 800607c:	5c5b      	ldrb	r3, [r3, r1]
 800607e:	702b      	strb	r3, [r5, #0]
 8006080:	0033      	movs	r3, r6
 8006082:	0006      	movs	r6, r0
 8006084:	429f      	cmp	r7, r3
 8006086:	d9f3      	bls.n	8006070 <_printf_i+0xf0>
 8006088:	2f08      	cmp	r7, #8
 800608a:	d109      	bne.n	80060a0 <_printf_i+0x120>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	07db      	lsls	r3, r3, #31
 8006090:	d506      	bpl.n	80060a0 <_printf_i+0x120>
 8006092:	6862      	ldr	r2, [r4, #4]
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	429a      	cmp	r2, r3
 8006098:	dc02      	bgt.n	80060a0 <_printf_i+0x120>
 800609a:	2330      	movs	r3, #48	@ 0x30
 800609c:	3d01      	subs	r5, #1
 800609e:	702b      	strb	r3, [r5, #0]
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	1b5b      	subs	r3, r3, r5
 80060a4:	6123      	str	r3, [r4, #16]
 80060a6:	9b07      	ldr	r3, [sp, #28]
 80060a8:	0021      	movs	r1, r4
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	9805      	ldr	r0, [sp, #20]
 80060ae:	9b06      	ldr	r3, [sp, #24]
 80060b0:	aa09      	add	r2, sp, #36	@ 0x24
 80060b2:	f7ff fef5 	bl	8005ea0 <_printf_common>
 80060b6:	3001      	adds	r0, #1
 80060b8:	d148      	bne.n	800614c <_printf_i+0x1cc>
 80060ba:	2001      	movs	r0, #1
 80060bc:	4240      	negs	r0, r0
 80060be:	b00b      	add	sp, #44	@ 0x2c
 80060c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c2:	2220      	movs	r2, #32
 80060c4:	6809      	ldr	r1, [r1, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	6022      	str	r2, [r4, #0]
 80060ca:	2278      	movs	r2, #120	@ 0x78
 80060cc:	4932      	ldr	r1, [pc, #200]	@ (8006198 <_printf_i+0x218>)
 80060ce:	9104      	str	r1, [sp, #16]
 80060d0:	0021      	movs	r1, r4
 80060d2:	3145      	adds	r1, #69	@ 0x45
 80060d4:	700a      	strb	r2, [r1, #0]
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	c940      	ldmia	r1!, {r6}
 80060dc:	0610      	lsls	r0, r2, #24
 80060de:	d402      	bmi.n	80060e6 <_printf_i+0x166>
 80060e0:	0650      	lsls	r0, r2, #25
 80060e2:	d500      	bpl.n	80060e6 <_printf_i+0x166>
 80060e4:	b2b6      	uxth	r6, r6
 80060e6:	6019      	str	r1, [r3, #0]
 80060e8:	07d3      	lsls	r3, r2, #31
 80060ea:	d502      	bpl.n	80060f2 <_printf_i+0x172>
 80060ec:	2320      	movs	r3, #32
 80060ee:	4313      	orrs	r3, r2
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d001      	beq.n	80060fa <_printf_i+0x17a>
 80060f6:	2710      	movs	r7, #16
 80060f8:	e7a8      	b.n	800604c <_printf_i+0xcc>
 80060fa:	2220      	movs	r2, #32
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	4393      	bics	r3, r2
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	e7f8      	b.n	80060f6 <_printf_i+0x176>
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	680d      	ldr	r5, [r1, #0]
 8006108:	1d10      	adds	r0, r2, #4
 800610a:	6949      	ldr	r1, [r1, #20]
 800610c:	6018      	str	r0, [r3, #0]
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	062e      	lsls	r6, r5, #24
 8006112:	d501      	bpl.n	8006118 <_printf_i+0x198>
 8006114:	6019      	str	r1, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0x19e>
 8006118:	066d      	lsls	r5, r5, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0x194>
 800611c:	8019      	strh	r1, [r3, #0]
 800611e:	2300      	movs	r3, #0
 8006120:	9d03      	ldr	r5, [sp, #12]
 8006122:	6123      	str	r3, [r4, #16]
 8006124:	e7bf      	b.n	80060a6 <_printf_i+0x126>
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	1d11      	adds	r1, r2, #4
 800612a:	6019      	str	r1, [r3, #0]
 800612c:	6815      	ldr	r5, [r2, #0]
 800612e:	2100      	movs	r1, #0
 8006130:	0028      	movs	r0, r5
 8006132:	6862      	ldr	r2, [r4, #4]
 8006134:	f000 f858 	bl	80061e8 <memchr>
 8006138:	2800      	cmp	r0, #0
 800613a:	d001      	beq.n	8006140 <_printf_i+0x1c0>
 800613c:	1b40      	subs	r0, r0, r5
 800613e:	6060      	str	r0, [r4, #4]
 8006140:	6863      	ldr	r3, [r4, #4]
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	2300      	movs	r3, #0
 8006146:	9a03      	ldr	r2, [sp, #12]
 8006148:	7013      	strb	r3, [r2, #0]
 800614a:	e7ac      	b.n	80060a6 <_printf_i+0x126>
 800614c:	002a      	movs	r2, r5
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	9906      	ldr	r1, [sp, #24]
 8006152:	9805      	ldr	r0, [sp, #20]
 8006154:	9d07      	ldr	r5, [sp, #28]
 8006156:	47a8      	blx	r5
 8006158:	3001      	adds	r0, #1
 800615a:	d0ae      	beq.n	80060ba <_printf_i+0x13a>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	079b      	lsls	r3, r3, #30
 8006160:	d415      	bmi.n	800618e <_printf_i+0x20e>
 8006162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006164:	68e0      	ldr	r0, [r4, #12]
 8006166:	4298      	cmp	r0, r3
 8006168:	daa9      	bge.n	80060be <_printf_i+0x13e>
 800616a:	0018      	movs	r0, r3
 800616c:	e7a7      	b.n	80060be <_printf_i+0x13e>
 800616e:	0022      	movs	r2, r4
 8006170:	2301      	movs	r3, #1
 8006172:	9906      	ldr	r1, [sp, #24]
 8006174:	9805      	ldr	r0, [sp, #20]
 8006176:	9e07      	ldr	r6, [sp, #28]
 8006178:	3219      	adds	r2, #25
 800617a:	47b0      	blx	r6
 800617c:	3001      	adds	r0, #1
 800617e:	d09c      	beq.n	80060ba <_printf_i+0x13a>
 8006180:	3501      	adds	r5, #1
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	42ab      	cmp	r3, r5
 800618a:	dcf0      	bgt.n	800616e <_printf_i+0x1ee>
 800618c:	e7e9      	b.n	8006162 <_printf_i+0x1e2>
 800618e:	2500      	movs	r5, #0
 8006190:	e7f7      	b.n	8006182 <_printf_i+0x202>
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	08006429 	.word	0x08006429
 8006198:	0800643a 	.word	0x0800643a

0800619c <memmove>:
 800619c:	b510      	push	{r4, lr}
 800619e:	4288      	cmp	r0, r1
 80061a0:	d806      	bhi.n	80061b0 <memmove+0x14>
 80061a2:	2300      	movs	r3, #0
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d008      	beq.n	80061ba <memmove+0x1e>
 80061a8:	5ccc      	ldrb	r4, [r1, r3]
 80061aa:	54c4      	strb	r4, [r0, r3]
 80061ac:	3301      	adds	r3, #1
 80061ae:	e7f9      	b.n	80061a4 <memmove+0x8>
 80061b0:	188b      	adds	r3, r1, r2
 80061b2:	4298      	cmp	r0, r3
 80061b4:	d2f5      	bcs.n	80061a2 <memmove+0x6>
 80061b6:	3a01      	subs	r2, #1
 80061b8:	d200      	bcs.n	80061bc <memmove+0x20>
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	5c8b      	ldrb	r3, [r1, r2]
 80061be:	5483      	strb	r3, [r0, r2]
 80061c0:	e7f9      	b.n	80061b6 <memmove+0x1a>
	...

080061c4 <_sbrk_r>:
 80061c4:	2300      	movs	r3, #0
 80061c6:	b570      	push	{r4, r5, r6, lr}
 80061c8:	4d06      	ldr	r5, [pc, #24]	@ (80061e4 <_sbrk_r+0x20>)
 80061ca:	0004      	movs	r4, r0
 80061cc:	0008      	movs	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fb fce2 	bl	8001b98 <_sbrk>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d103      	bne.n	80061e0 <_sbrk_r+0x1c>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d000      	beq.n	80061e0 <_sbrk_r+0x1c>
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	200002ac 	.word	0x200002ac

080061e8 <memchr>:
 80061e8:	b2c9      	uxtb	r1, r1
 80061ea:	1882      	adds	r2, r0, r2
 80061ec:	4290      	cmp	r0, r2
 80061ee:	d101      	bne.n	80061f4 <memchr+0xc>
 80061f0:	2000      	movs	r0, #0
 80061f2:	4770      	bx	lr
 80061f4:	7803      	ldrb	r3, [r0, #0]
 80061f6:	428b      	cmp	r3, r1
 80061f8:	d0fb      	beq.n	80061f2 <memchr+0xa>
 80061fa:	3001      	adds	r0, #1
 80061fc:	e7f6      	b.n	80061ec <memchr+0x4>

080061fe <memcpy>:
 80061fe:	2300      	movs	r3, #0
 8006200:	b510      	push	{r4, lr}
 8006202:	429a      	cmp	r2, r3
 8006204:	d100      	bne.n	8006208 <memcpy+0xa>
 8006206:	bd10      	pop	{r4, pc}
 8006208:	5ccc      	ldrb	r4, [r1, r3]
 800620a:	54c4      	strb	r4, [r0, r3]
 800620c:	3301      	adds	r3, #1
 800620e:	e7f8      	b.n	8006202 <memcpy+0x4>

08006210 <_realloc_r>:
 8006210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006212:	0006      	movs	r6, r0
 8006214:	000c      	movs	r4, r1
 8006216:	0015      	movs	r5, r2
 8006218:	2900      	cmp	r1, #0
 800621a:	d105      	bne.n	8006228 <_realloc_r+0x18>
 800621c:	0011      	movs	r1, r2
 800621e:	f7ff fc51 	bl	8005ac4 <_malloc_r>
 8006222:	0004      	movs	r4, r0
 8006224:	0020      	movs	r0, r4
 8006226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006228:	2a00      	cmp	r2, #0
 800622a:	d103      	bne.n	8006234 <_realloc_r+0x24>
 800622c:	f7ff fbde 	bl	80059ec <_free_r>
 8006230:	2400      	movs	r4, #0
 8006232:	e7f7      	b.n	8006224 <_realloc_r+0x14>
 8006234:	f000 f81b 	bl	800626e <_malloc_usable_size_r>
 8006238:	0007      	movs	r7, r0
 800623a:	4285      	cmp	r5, r0
 800623c:	d802      	bhi.n	8006244 <_realloc_r+0x34>
 800623e:	0843      	lsrs	r3, r0, #1
 8006240:	42ab      	cmp	r3, r5
 8006242:	d3ef      	bcc.n	8006224 <_realloc_r+0x14>
 8006244:	0029      	movs	r1, r5
 8006246:	0030      	movs	r0, r6
 8006248:	f7ff fc3c 	bl	8005ac4 <_malloc_r>
 800624c:	9001      	str	r0, [sp, #4]
 800624e:	2800      	cmp	r0, #0
 8006250:	d0ee      	beq.n	8006230 <_realloc_r+0x20>
 8006252:	002a      	movs	r2, r5
 8006254:	42bd      	cmp	r5, r7
 8006256:	d900      	bls.n	800625a <_realloc_r+0x4a>
 8006258:	003a      	movs	r2, r7
 800625a:	0021      	movs	r1, r4
 800625c:	9801      	ldr	r0, [sp, #4]
 800625e:	f7ff ffce 	bl	80061fe <memcpy>
 8006262:	0021      	movs	r1, r4
 8006264:	0030      	movs	r0, r6
 8006266:	f7ff fbc1 	bl	80059ec <_free_r>
 800626a:	9c01      	ldr	r4, [sp, #4]
 800626c:	e7da      	b.n	8006224 <_realloc_r+0x14>

0800626e <_malloc_usable_size_r>:
 800626e:	1f0b      	subs	r3, r1, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	1f18      	subs	r0, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	da01      	bge.n	800627c <_malloc_usable_size_r+0xe>
 8006278:	580b      	ldr	r3, [r1, r0]
 800627a:	18c0      	adds	r0, r0, r3
 800627c:	4770      	bx	lr
	...

08006280 <_init>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr

0800628c <_fini>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr
